/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class Decimal : TBase
    {
        public byte[] Unscaled { get; set; }

        public short Scale { get; set; }

        public Decimal()
        {
        }

        public Decimal(byte[] unscaled, short scale)
            : this()
        {
            this.Unscaled = unscaled;
            this.Scale = scale;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_unscaled = false;
            bool isset_scale = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Unscaled = iprot.ReadBinary();
                            isset_unscaled = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.I16)
                        {
                            Scale = iprot.ReadI16();
                            isset_scale = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_unscaled)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_scale)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Decimal");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "unscaled";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Unscaled);
            oprot.WriteFieldEnd();
            field.Name = "scale";
            field.Type = TType.I16;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(Scale);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Decimal(");
            sb.Append("Unscaled: ");
            sb.Append(Unscaled);
            sb.Append(",Scale: ");
            sb.Append(Scale);
            sb.Append(")");
            return sb.ToString();
        }
    }
}