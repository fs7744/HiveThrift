/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class OpenTxnsResponse : TBase
    {
        public List<long> Txn_ids { get; set; }

        public OpenTxnsResponse()
        {
        }

        public OpenTxnsResponse(List<long> txn_ids)
            : this()
        {
            this.Txn_ids = txn_ids;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_txn_ids = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                Txn_ids = new List<long>();
                                TList _list205 = iprot.ReadListBegin();
                                for (int _i206 = 0; _i206 < _list205.Count; ++_i206)
                                {
                                    long _elem207 = 0;
                                    _elem207 = iprot.ReadI64();
                                    Txn_ids.Add(_elem207);
                                }
                                iprot.ReadListEnd();
                            }
                            isset_txn_ids = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_txn_ids)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("OpenTxnsResponse");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "txn_ids";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
                oprot.WriteListBegin(new TList(TType.I64, Txn_ids.Count));
                foreach (long _iter208 in Txn_ids)
                {
                    oprot.WriteI64(_iter208);
                }
                oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("OpenTxnsResponse(");
            sb.Append("Txn_ids: ");
            sb.Append(Txn_ids);
            sb.Append(")");
            return sb.ToString();
        }
    }
}