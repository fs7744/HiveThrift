/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class AggrStats : TBase
    {
        public List<ColumnStatisticsObj> ColStats { get; set; }

        public long PartsFound { get; set; }

        public AggrStats()
        {
        }

        public AggrStats(List<ColumnStatisticsObj> colStats, long partsFound)
            : this()
        {
            this.ColStats = colStats;
            this.PartsFound = partsFound;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_colStats = false;
            bool isset_partsFound = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                ColStats = new List<ColumnStatisticsObj>();
                                TList _list122 = iprot.ReadListBegin();
                                for (int _i123 = 0; _i123 < _list122.Count; ++_i123)
                                {
                                    ColumnStatisticsObj _elem124 = new ColumnStatisticsObj();
                                    _elem124 = new ColumnStatisticsObj();
                                    _elem124.Read(iprot);
                                    ColStats.Add(_elem124);
                                }
                                iprot.ReadListEnd();
                            }
                            isset_colStats = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I64)
                        {
                            PartsFound = iprot.ReadI64();
                            isset_partsFound = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_colStats)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_partsFound)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("AggrStats");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "colStats";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
                oprot.WriteListBegin(new TList(TType.Struct, ColStats.Count));
                foreach (ColumnStatisticsObj _iter125 in ColStats)
                {
                    _iter125.Write(oprot);
                }
                oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
            field.Name = "partsFound";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(PartsFound);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("AggrStats(");
            sb.Append("ColStats: ");
            sb.Append(ColStats);
            sb.Append(",PartsFound: ");
            sb.Append(PartsFound);
            sb.Append(")");
            return sb.ToString();
        }
    }
}