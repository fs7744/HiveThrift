/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Graph : TBase
    {
        private NodeType _nodeType;
        private List<string> _roots;
        private List<Adjacency> _adjacencyList;

        /// <summary>
        ///
        /// <seealso cref="NodeType"/>
        /// </summary>
        public NodeType NodeType
        {
            get
            {
                return _nodeType;
            }
            set
            {
                __isset.nodeType = true;
                this._nodeType = value;
            }
        }

        public List<string> Roots
        {
            get
            {
                return _roots;
            }
            set
            {
                __isset.roots = true;
                this._roots = value;
            }
        }

        public List<Adjacency> AdjacencyList
        {
            get
            {
                return _adjacencyList;
            }
            set
            {
                __isset.adjacencyList = true;
                this._adjacencyList = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool nodeType;
            public bool roots;
            public bool adjacencyList;
        }

        public Graph()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            NodeType = (NodeType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.List)
                        {
                            {
                                Roots = new List<string>();
                                TList _list4 = iprot.ReadListBegin();
                                for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                {
                                    string _elem6 = null;
                                    _elem6 = iprot.ReadString();
                                    Roots.Add(_elem6);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.List)
                        {
                            {
                                AdjacencyList = new List<Adjacency>();
                                TList _list7 = iprot.ReadListBegin();
                                for (int _i8 = 0; _i8 < _list7.Count; ++_i8)
                                {
                                    Adjacency _elem9 = new Adjacency();
                                    _elem9 = new Adjacency();
                                    _elem9.Read(iprot);
                                    AdjacencyList.Add(_elem9);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Graph");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.nodeType)
            {
                field.Name = "nodeType";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)NodeType);
                oprot.WriteFieldEnd();
            }
            if (Roots != null && __isset.roots)
            {
                field.Name = "roots";
                field.Type = TType.List;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.String, Roots.Count));
                    foreach (string _iter10 in Roots)
                    {
                        oprot.WriteString(_iter10);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (AdjacencyList != null && __isset.adjacencyList)
            {
                field.Name = "adjacencyList";
                field.Type = TType.List;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, AdjacencyList.Count));
                    foreach (Adjacency _iter11 in AdjacencyList)
                    {
                        _iter11.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Graph(");
            sb.Append("NodeType: ");
            sb.Append(NodeType);
            sb.Append(",Roots: ");
            sb.Append(Roots);
            sb.Append(",AdjacencyList: ");
            sb.Append(AdjacencyList);
            sb.Append(")");
            return sb.ToString();
        }
    }
}