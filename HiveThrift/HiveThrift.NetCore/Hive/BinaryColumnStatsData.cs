/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class BinaryColumnStatsData : TBase
    {
        public long MaxColLen { get; set; }

        public double AvgColLen { get; set; }

        public long NumNulls { get; set; }

        public BinaryColumnStatsData()
        {
        }

        public BinaryColumnStatsData(long maxColLen, double avgColLen, long numNulls)
            : this()
        {
            this.MaxColLen = maxColLen;
            this.AvgColLen = avgColLen;
            this.NumNulls = numNulls;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_maxColLen = false;
            bool isset_avgColLen = false;
            bool isset_numNulls = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I64)
                        {
                            MaxColLen = iprot.ReadI64();
                            isset_maxColLen = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.Double)
                        {
                            AvgColLen = iprot.ReadDouble();
                            isset_avgColLen = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.I64)
                        {
                            NumNulls = iprot.ReadI64();
                            isset_numNulls = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_maxColLen)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_avgColLen)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_numNulls)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("BinaryColumnStatsData");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "maxColLen";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(MaxColLen);
            oprot.WriteFieldEnd();
            field.Name = "avgColLen";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(AvgColLen);
            oprot.WriteFieldEnd();
            field.Name = "numNulls";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumNulls);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("BinaryColumnStatsData(");
            sb.Append("MaxColLen: ");
            sb.Append(MaxColLen);
            sb.Append(",AvgColLen: ");
            sb.Append(AvgColLen);
            sb.Append(",NumNulls: ");
            sb.Append(NumNulls);
            sb.Append(")");
            return sb.ToString();
        }
    }
}