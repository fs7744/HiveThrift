/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class LockComponent : TBase
    {
        private string _tablename;
        private string _partitionname;

        /// <summary>
        ///
        /// <seealso cref="LockType"/>
        /// </summary>
        public LockType Type { get; set; }

        /// <summary>
        ///
        /// <seealso cref="LockLevel"/>
        /// </summary>
        public LockLevel Level { get; set; }

        public string Dbname { get; set; }

        public string Tablename
        {
            get
            {
                return _tablename;
            }
            set
            {
                __isset.tablename = true;
                this._tablename = value;
            }
        }

        public string Partitionname
        {
            get
            {
                return _partitionname;
            }
            set
            {
                __isset.partitionname = true;
                this._partitionname = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool tablename;
            public bool partitionname;
        }

        public LockComponent()
        {
        }

        public LockComponent(LockType type, LockLevel level, string dbname)
            : this()
        {
            this.Type = type;
            this.Level = level;
            this.Dbname = dbname;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_type = false;
            bool isset_level = false;
            bool isset_dbname = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            Type = (LockType)iprot.ReadI32();
                            isset_type = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            Level = (LockLevel)iprot.ReadI32();
                            isset_level = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            Dbname = iprot.ReadString();
                            isset_dbname = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            Tablename = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.String)
                        {
                            Partitionname = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_type)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_level)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_dbname)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("LockComponent");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "type";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Type);
            oprot.WriteFieldEnd();
            field.Name = "level";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Level);
            oprot.WriteFieldEnd();
            field.Name = "dbname";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Dbname);
            oprot.WriteFieldEnd();
            if (Tablename != null && __isset.tablename)
            {
                field.Name = "tablename";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Tablename);
                oprot.WriteFieldEnd();
            }
            if (Partitionname != null && __isset.partitionname)
            {
                field.Name = "partitionname";
                field.Type = TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Partitionname);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("LockComponent(");
            sb.Append("Type: ");
            sb.Append(Type);
            sb.Append(",Level: ");
            sb.Append(Level);
            sb.Append(",Dbname: ");
            sb.Append(Dbname);
            sb.Append(",Tablename: ");
            sb.Append(Tablename);
            sb.Append(",Partitionname: ");
            sb.Append(Partitionname);
            sb.Append(")");
            return sb.ToString();
        }
    }
}