/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class HiveObjectRef : TBase
    {
        private HiveObjectType _objectType;
        private string _dbName;
        private string _objectName;
        private List<string> _partValues;
        private string _columnName;

        /// <summary>
        ///
        /// <seealso cref="HiveObjectType"/>
        /// </summary>
        public HiveObjectType ObjectType
        {
            get
            {
                return _objectType;
            }
            set
            {
                __isset.objectType = true;
                this._objectType = value;
            }
        }

        public string DbName
        {
            get
            {
                return _dbName;
            }
            set
            {
                __isset.dbName = true;
                this._dbName = value;
            }
        }

        public string ObjectName
        {
            get
            {
                return _objectName;
            }
            set
            {
                __isset.objectName = true;
                this._objectName = value;
            }
        }

        public List<string> PartValues
        {
            get
            {
                return _partValues;
            }
            set
            {
                __isset.partValues = true;
                this._partValues = value;
            }
        }

        public string ColumnName
        {
            get
            {
                return _columnName;
            }
            set
            {
                __isset.columnName = true;
                this._columnName = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool objectType;
            public bool dbName;
            public bool objectName;
            public bool partValues;
            public bool columnName;
        }

        public HiveObjectRef()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            ObjectType = (HiveObjectType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            ObjectName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.List)
                        {
                            {
                                PartValues = new List<string>();
                                TList _list4 = iprot.ReadListBegin();
                                for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                {
                                    string _elem6 = null;
                                    _elem6 = iprot.ReadString();
                                    PartValues.Add(_elem6);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.String)
                        {
                            ColumnName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("HiveObjectRef");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.objectType)
            {
                field.Name = "objectType";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)ObjectType);
                oprot.WriteFieldEnd();
            }
            if (DbName != null && __isset.dbName)
            {
                field.Name = "dbName";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(DbName);
                oprot.WriteFieldEnd();
            }
            if (ObjectName != null && __isset.objectName)
            {
                field.Name = "objectName";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ObjectName);
                oprot.WriteFieldEnd();
            }
            if (PartValues != null && __isset.partValues)
            {
                field.Name = "partValues";
                field.Type = TType.List;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.String, PartValues.Count));
                    foreach (string _iter7 in PartValues)
                    {
                        oprot.WriteString(_iter7);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (ColumnName != null && __isset.columnName)
            {
                field.Name = "columnName";
                field.Type = TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ColumnName);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("HiveObjectRef(");
            sb.Append("ObjectType: ");
            sb.Append(ObjectType);
            sb.Append(",DbName: ");
            sb.Append(DbName);
            sb.Append(",ObjectName: ");
            sb.Append(ObjectName);
            sb.Append(",PartValues: ");
            sb.Append(PartValues);
            sb.Append(",ColumnName: ");
            sb.Append(ColumnName);
            sb.Append(")");
            return sb.ToString();
        }
    }
}