/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Index : TBase
    {
        private string _indexName;
        private string _indexHandlerClass;
        private string _dbName;
        private string _origTableName;
        private int _createTime;
        private int _lastAccessTime;
        private string _indexTableName;
        private StorageDescriptor _sd;
        private Dictionary<string, string> _parameters;
        private bool _deferredRebuild;

        public string IndexName
        {
            get
            {
                return _indexName;
            }
            set
            {
                __isset.indexName = true;
                this._indexName = value;
            }
        }

        public string IndexHandlerClass
        {
            get
            {
                return _indexHandlerClass;
            }
            set
            {
                __isset.indexHandlerClass = true;
                this._indexHandlerClass = value;
            }
        }

        public string DbName
        {
            get
            {
                return _dbName;
            }
            set
            {
                __isset.dbName = true;
                this._dbName = value;
            }
        }

        public string OrigTableName
        {
            get
            {
                return _origTableName;
            }
            set
            {
                __isset.origTableName = true;
                this._origTableName = value;
            }
        }

        public int CreateTime
        {
            get
            {
                return _createTime;
            }
            set
            {
                __isset.createTime = true;
                this._createTime = value;
            }
        }

        public int LastAccessTime
        {
            get
            {
                return _lastAccessTime;
            }
            set
            {
                __isset.lastAccessTime = true;
                this._lastAccessTime = value;
            }
        }

        public string IndexTableName
        {
            get
            {
                return _indexTableName;
            }
            set
            {
                __isset.indexTableName = true;
                this._indexTableName = value;
            }
        }

        public StorageDescriptor Sd
        {
            get
            {
                return _sd;
            }
            set
            {
                __isset.sd = true;
                this._sd = value;
            }
        }

        public Dictionary<string, string> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                __isset.parameters = true;
                this._parameters = value;
            }
        }

        public bool DeferredRebuild
        {
            get
            {
                return _deferredRebuild;
            }
            set
            {
                __isset.deferredRebuild = true;
                this._deferredRebuild = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool indexName;
            public bool indexHandlerClass;
            public bool dbName;
            public bool origTableName;
            public bool createTime;
            public bool lastAccessTime;
            public bool indexTableName;
            public bool sd;
            public bool parameters;
            public bool deferredRebuild;
        }

        public Index()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            IndexName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            IndexHandlerClass = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            OrigTableName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.I32)
                        {
                            CreateTime = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.I32)
                        {
                            LastAccessTime = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.String)
                        {
                            IndexTableName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.Struct)
                        {
                            Sd = new StorageDescriptor();
                            Sd.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 9:
                        if (field.Type == TType.Map)
                        {
                            {
                                Parameters = new Dictionary<string, string>();
                                TMap _map113 = iprot.ReadMapBegin();
                                for (int _i114 = 0; _i114 < _map113.Count; ++_i114)
                                {
                                    string _key115;
                                    string _val116;
                                    _key115 = iprot.ReadString();
                                    _val116 = iprot.ReadString();
                                    Parameters[_key115] = _val116;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 10:
                        if (field.Type == TType.Bool)
                        {
                            DeferredRebuild = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Index");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (IndexName != null && __isset.indexName)
            {
                field.Name = "indexName";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(IndexName);
                oprot.WriteFieldEnd();
            }
            if (IndexHandlerClass != null && __isset.indexHandlerClass)
            {
                field.Name = "indexHandlerClass";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(IndexHandlerClass);
                oprot.WriteFieldEnd();
            }
            if (DbName != null && __isset.dbName)
            {
                field.Name = "dbName";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(DbName);
                oprot.WriteFieldEnd();
            }
            if (OrigTableName != null && __isset.origTableName)
            {
                field.Name = "origTableName";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(OrigTableName);
                oprot.WriteFieldEnd();
            }
            if (__isset.createTime)
            {
                field.Name = "createTime";
                field.Type = TType.I32;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(CreateTime);
                oprot.WriteFieldEnd();
            }
            if (__isset.lastAccessTime)
            {
                field.Name = "lastAccessTime";
                field.Type = TType.I32;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(LastAccessTime);
                oprot.WriteFieldEnd();
            }
            if (IndexTableName != null && __isset.indexTableName)
            {
                field.Name = "indexTableName";
                field.Type = TType.String;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(IndexTableName);
                oprot.WriteFieldEnd();
            }
            if (Sd != null && __isset.sd)
            {
                field.Name = "sd";
                field.Type = TType.Struct;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                Sd.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Parameters != null && __isset.parameters)
            {
                field.Name = "parameters";
                field.Type = TType.Map;
                field.ID = 9;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
                    foreach (string _iter117 in Parameters.Keys)
                    {
                        oprot.WriteString(_iter117);
                        oprot.WriteString(Parameters[_iter117]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (__isset.deferredRebuild)
            {
                field.Name = "deferredRebuild";
                field.Type = TType.Bool;
                field.ID = 10;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(DeferredRebuild);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Index(");
            sb.Append("IndexName: ");
            sb.Append(IndexName);
            sb.Append(",IndexHandlerClass: ");
            sb.Append(IndexHandlerClass);
            sb.Append(",DbName: ");
            sb.Append(DbName);
            sb.Append(",OrigTableName: ");
            sb.Append(OrigTableName);
            sb.Append(",CreateTime: ");
            sb.Append(CreateTime);
            sb.Append(",LastAccessTime: ");
            sb.Append(LastAccessTime);
            sb.Append(",IndexTableName: ");
            sb.Append(IndexTableName);
            sb.Append(",Sd: ");
            sb.Append(Sd == null ? "<null>" : Sd.ToString());
            sb.Append(",Parameters: ");
            sb.Append(Parameters);
            sb.Append(",DeferredRebuild: ");
            sb.Append(DeferredRebuild);
            sb.Append(")");
            return sb.ToString();
        }
    }
}