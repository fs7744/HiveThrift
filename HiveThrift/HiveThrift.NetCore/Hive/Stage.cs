/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Stage : TBase
    {
        private string _stageId;
        private StageType _stageType;
        private Dictionary<string, string> _stageAttributes;
        private Dictionary<string, long> _stageCounters;
        private List<Task> _taskList;
        private bool _done;
        private bool _started;

        public string StageId
        {
            get
            {
                return _stageId;
            }
            set
            {
                __isset.stageId = true;
                this._stageId = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="StageType"/>
        /// </summary>
        public StageType StageType
        {
            get
            {
                return _stageType;
            }
            set
            {
                __isset.stageType = true;
                this._stageType = value;
            }
        }

        public Dictionary<string, string> StageAttributes
        {
            get
            {
                return _stageAttributes;
            }
            set
            {
                __isset.stageAttributes = true;
                this._stageAttributes = value;
            }
        }

        public Dictionary<string, long> StageCounters
        {
            get
            {
                return _stageCounters;
            }
            set
            {
                __isset.stageCounters = true;
                this._stageCounters = value;
            }
        }

        public List<Task> TaskList
        {
            get
            {
                return _taskList;
            }
            set
            {
                __isset.taskList = true;
                this._taskList = value;
            }
        }

        public bool Done
        {
            get
            {
                return _done;
            }
            set
            {
                __isset.done = true;
                this._done = value;
            }
        }

        public bool Started
        {
            get
            {
                return _started;
            }
            set
            {
                __isset.started = true;
                this._started = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool stageId;
            public bool stageType;
            public bool stageAttributes;
            public bool stageCounters;
            public bool taskList;
            public bool done;
            public bool started;
        }

        public Stage()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            StageId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            StageType = (StageType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                StageAttributes = new Dictionary<string, string>();
                                TMap _map36 = iprot.ReadMapBegin();
                                for (int _i37 = 0; _i37 < _map36.Count; ++_i37)
                                {
                                    string _key38;
                                    string _val39;
                                    _key38 = iprot.ReadString();
                                    _val39 = iprot.ReadString();
                                    StageAttributes[_key38] = _val39;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Map)
                        {
                            {
                                StageCounters = new Dictionary<string, long>();
                                TMap _map40 = iprot.ReadMapBegin();
                                for (int _i41 = 0; _i41 < _map40.Count; ++_i41)
                                {
                                    string _key42;
                                    long _val43;
                                    _key42 = iprot.ReadString();
                                    _val43 = iprot.ReadI64();
                                    StageCounters[_key42] = _val43;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.List)
                        {
                            {
                                TaskList = new List<Task>();
                                TList _list44 = iprot.ReadListBegin();
                                for (int _i45 = 0; _i45 < _list44.Count; ++_i45)
                                {
                                    Task _elem46 = new Task();
                                    _elem46 = new Task();
                                    _elem46.Read(iprot);
                                    TaskList.Add(_elem46);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.Bool)
                        {
                            Done = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.Bool)
                        {
                            Started = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Stage");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (StageId != null && __isset.stageId)
            {
                field.Name = "stageId";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(StageId);
                oprot.WriteFieldEnd();
            }
            if (__isset.stageType)
            {
                field.Name = "stageType";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)StageType);
                oprot.WriteFieldEnd();
            }
            if (StageAttributes != null && __isset.stageAttributes)
            {
                field.Name = "stageAttributes";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, StageAttributes.Count));
                    foreach (string _iter47 in StageAttributes.Keys)
                    {
                        oprot.WriteString(_iter47);
                        oprot.WriteString(StageAttributes[_iter47]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (StageCounters != null && __isset.stageCounters)
            {
                field.Name = "stageCounters";
                field.Type = TType.Map;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.I64, StageCounters.Count));
                    foreach (string _iter48 in StageCounters.Keys)
                    {
                        oprot.WriteString(_iter48);
                        oprot.WriteI64(StageCounters[_iter48]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (TaskList != null && __isset.taskList)
            {
                field.Name = "taskList";
                field.Type = TType.List;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, TaskList.Count));
                    foreach (Task _iter49 in TaskList)
                    {
                        _iter49.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (__isset.done)
            {
                field.Name = "done";
                field.Type = TType.Bool;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Done);
                oprot.WriteFieldEnd();
            }
            if (__isset.started)
            {
                field.Name = "started";
                field.Type = TType.Bool;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Started);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Stage(");
            sb.Append("StageId: ");
            sb.Append(StageId);
            sb.Append(",StageType: ");
            sb.Append(StageType);
            sb.Append(",StageAttributes: ");
            sb.Append(StageAttributes);
            sb.Append(",StageCounters: ");
            sb.Append(StageCounters);
            sb.Append(",TaskList: ");
            sb.Append(TaskList);
            sb.Append(",Done: ");
            sb.Append(Done);
            sb.Append(",Started: ");
            sb.Append(Started);
            sb.Append(")");
            return sb.ToString();
        }
    }
}