/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class DecimalColumnStatsData : TBase
    {
        private Decimal _lowValue;
        private Decimal _highValue;

        public Decimal LowValue
        {
            get
            {
                return _lowValue;
            }
            set
            {
                __isset.lowValue = true;
                this._lowValue = value;
            }
        }

        public Decimal HighValue
        {
            get
            {
                return _highValue;
            }
            set
            {
                __isset.highValue = true;
                this._highValue = value;
            }
        }

        public long NumNulls { get; set; }

        public long NumDVs { get; set; }

        public Isset __isset;

        public struct Isset
        {
            public bool lowValue;
            public bool highValue;
        }

        public DecimalColumnStatsData()
        {
        }

        public DecimalColumnStatsData(long numNulls, long numDVs)
            : this()
        {
            this.NumNulls = numNulls;
            this.NumDVs = numDVs;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_numNulls = false;
            bool isset_numDVs = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Struct)
                        {
                            LowValue = new Decimal();
                            LowValue.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.Struct)
                        {
                            HighValue = new Decimal();
                            HighValue.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.I64)
                        {
                            NumNulls = iprot.ReadI64();
                            isset_numNulls = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.I64)
                        {
                            NumDVs = iprot.ReadI64();
                            isset_numDVs = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_numNulls)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_numDVs)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("DecimalColumnStatsData");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (LowValue != null && __isset.lowValue)
            {
                field.Name = "lowValue";
                field.Type = TType.Struct;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                LowValue.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (HighValue != null && __isset.highValue)
            {
                field.Name = "highValue";
                field.Type = TType.Struct;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                HighValue.Write(oprot);
                oprot.WriteFieldEnd();
            }
            field.Name = "numNulls";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumNulls);
            oprot.WriteFieldEnd();
            field.Name = "numDVs";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumDVs);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("DecimalColumnStatsData(");
            sb.Append("LowValue: ");
            sb.Append(LowValue == null ? "<null>" : LowValue.ToString());
            sb.Append(",HighValue: ");
            sb.Append(HighValue == null ? "<null>" : HighValue.ToString());
            sb.Append(",NumNulls: ");
            sb.Append(NumNulls);
            sb.Append(",NumDVs: ");
            sb.Append(NumDVs);
            sb.Append(")");
            return sb.ToString();
        }
    }
}