/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class FieldSchema : TBase
    {
        private string _name;
        private string _type;
        private string _comment;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                __isset.name = true;
                this._name = value;
            }
        }

        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                __isset.type = true;
                this._type = value;
            }
        }

        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                __isset.comment = true;
                this._comment = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool name;
            public bool type;
            public bool comment;
        }

        public FieldSchema()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            Type = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            Comment = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("FieldSchema");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Name != null && __isset.name)
            {
                field.Name = "name";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            if (Type != null && __isset.type)
            {
                field.Name = "type";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Type);
                oprot.WriteFieldEnd();
            }
            if (Comment != null && __isset.comment)
            {
                field.Name = "comment";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Comment);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("FieldSchema(");
            sb.Append("Name: ");
            sb.Append(Name);
            sb.Append(",Type: ");
            sb.Append(Type);
            sb.Append(",Comment: ");
            sb.Append(Comment);
            sb.Append(")");
            return sb.ToString();
        }
    }
}