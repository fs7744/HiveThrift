/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class SkewedInfo : TBase
    {
        private List<string> _skewedColNames;
        private List<List<string>> _skewedColValues;
        private Dictionary<List<string>, string> _skewedColValueLocationMaps;

        public List<string> SkewedColNames
        {
            get
            {
                return _skewedColNames;
            }
            set
            {
                __isset.skewedColNames = true;
                this._skewedColNames = value;
            }
        }

        public List<List<string>> SkewedColValues
        {
            get
            {
                return _skewedColValues;
            }
            set
            {
                __isset.skewedColValues = true;
                this._skewedColValues = value;
            }
        }

        public Dictionary<List<string>, string> SkewedColValueLocationMaps
        {
            get
            {
                return _skewedColValueLocationMaps;
            }
            set
            {
                __isset.skewedColValueLocationMaps = true;
                this._skewedColValueLocationMaps = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool skewedColNames;
            public bool skewedColValues;
            public bool skewedColValueLocationMaps;
        }

        public SkewedInfo()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                SkewedColNames = new List<string>();
                                TList _list57 = iprot.ReadListBegin();
                                for (int _i58 = 0; _i58 < _list57.Count; ++_i58)
                                {
                                    string _elem59 = null;
                                    _elem59 = iprot.ReadString();
                                    SkewedColNames.Add(_elem59);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.List)
                        {
                            {
                                SkewedColValues = new List<List<string>>();
                                TList _list60 = iprot.ReadListBegin();
                                for (int _i61 = 0; _i61 < _list60.Count; ++_i61)
                                {
                                    List<string> _elem62 = new List<string>();
                                    {
                                        _elem62 = new List<string>();
                                        TList _list63 = iprot.ReadListBegin();
                                        for (int _i64 = 0; _i64 < _list63.Count; ++_i64)
                                        {
                                            string _elem65 = null;
                                            _elem65 = iprot.ReadString();
                                            _elem62.Add(_elem65);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                    SkewedColValues.Add(_elem62);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                SkewedColValueLocationMaps = new Dictionary<List<string>, string>();
                                TMap _map66 = iprot.ReadMapBegin();
                                for (int _i67 = 0; _i67 < _map66.Count; ++_i67)
                                {
                                    List<string> _key68;
                                    string _val69;
                                    {
                                        _key68 = new List<string>();
                                        TList _list70 = iprot.ReadListBegin();
                                        for (int _i71 = 0; _i71 < _list70.Count; ++_i71)
                                        {
                                            string _elem72 = null;
                                            _elem72 = iprot.ReadString();
                                            _key68.Add(_elem72);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                    _val69 = iprot.ReadString();
                                    SkewedColValueLocationMaps[_key68] = _val69;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SkewedInfo");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (SkewedColNames != null && __isset.skewedColNames)
            {
                field.Name = "skewedColNames";
                field.Type = TType.List;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.String, SkewedColNames.Count));
                    foreach (string _iter73 in SkewedColNames)
                    {
                        oprot.WriteString(_iter73);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (SkewedColValues != null && __isset.skewedColValues)
            {
                field.Name = "skewedColValues";
                field.Type = TType.List;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.List, SkewedColValues.Count));
                    foreach (List<string> _iter74 in SkewedColValues)
                    {
                        {
                            oprot.WriteListBegin(new TList(TType.String, _iter74.Count));
                            foreach (string _iter75 in _iter74)
                            {
                                oprot.WriteString(_iter75);
                            }
                            oprot.WriteListEnd();
                        }
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (SkewedColValueLocationMaps != null && __isset.skewedColValueLocationMaps)
            {
                field.Name = "skewedColValueLocationMaps";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.List, TType.String, SkewedColValueLocationMaps.Count));
                    foreach (List<string> _iter76 in SkewedColValueLocationMaps.Keys)
                    {
                        {
                            oprot.WriteListBegin(new TList(TType.String, _iter76.Count));
                            foreach (string _iter77 in _iter76)
                            {
                                oprot.WriteString(_iter77);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteString(SkewedColValueLocationMaps[_iter76]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SkewedInfo(");
            sb.Append("SkewedColNames: ");
            sb.Append(SkewedColNames);
            sb.Append(",SkewedColValues: ");
            sb.Append(SkewedColValues);
            sb.Append(",SkewedColValueLocationMaps: ");
            sb.Append(SkewedColValueLocationMaps);
            sb.Append(")");
            return sb.ToString();
        }
    }
}