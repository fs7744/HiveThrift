/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class Database : TBase
    {
        private string _name;
        private string _description;
        private string _locationUri;
        private Dictionary<string, string> _parameters;
        private PrincipalPrivilegeSet _privileges;
        private string _ownerName;
        private PrincipalType _ownerType;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                __isset.name = true;
                this._name = value;
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                __isset.description = true;
                this._description = value;
            }
        }

        public string LocationUri
        {
            get
            {
                return _locationUri;
            }
            set
            {
                __isset.locationUri = true;
                this._locationUri = value;
            }
        }

        public Dictionary<string, string> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                __isset.parameters = true;
                this._parameters = value;
            }
        }

        public PrincipalPrivilegeSet Privileges
        {
            get
            {
                return _privileges;
            }
            set
            {
                __isset.privileges = true;
                this._privileges = value;
            }
        }

        public string OwnerName
        {
            get
            {
                return _ownerName;
            }
            set
            {
                __isset.ownerName = true;
                this._ownerName = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="PrincipalType"/>
        /// </summary>
        public PrincipalType OwnerType
        {
            get
            {
                return _ownerType;
            }
            set
            {
                __isset.ownerType = true;
                this._ownerType = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool name;
            public bool description;
            public bool locationUri;
            public bool parameters;
            public bool privileges;
            public bool ownerName;
            public bool ownerType;
        }

        public Database()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            Description = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            LocationUri = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Map)
                        {
                            {
                                Parameters = new Dictionary<string, string>();
                                TMap _map47 = iprot.ReadMapBegin();
                                for (int _i48 = 0; _i48 < _map47.Count; ++_i48)
                                {
                                    string _key49;
                                    string _val50;
                                    _key49 = iprot.ReadString();
                                    _val50 = iprot.ReadString();
                                    Parameters[_key49] = _val50;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Struct)
                        {
                            Privileges = new PrincipalPrivilegeSet();
                            Privileges.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.String)
                        {
                            OwnerName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.I32)
                        {
                            OwnerType = (PrincipalType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Database");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Name != null && __isset.name)
            {
                field.Name = "name";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            if (Description != null && __isset.description)
            {
                field.Name = "description";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Description);
                oprot.WriteFieldEnd();
            }
            if (LocationUri != null && __isset.locationUri)
            {
                field.Name = "locationUri";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(LocationUri);
                oprot.WriteFieldEnd();
            }
            if (Parameters != null && __isset.parameters)
            {
                field.Name = "parameters";
                field.Type = TType.Map;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
                    foreach (string _iter51 in Parameters.Keys)
                    {
                        oprot.WriteString(_iter51);
                        oprot.WriteString(Parameters[_iter51]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (Privileges != null && __isset.privileges)
            {
                field.Name = "privileges";
                field.Type = TType.Struct;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                Privileges.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (OwnerName != null && __isset.ownerName)
            {
                field.Name = "ownerName";
                field.Type = TType.String;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(OwnerName);
                oprot.WriteFieldEnd();
            }
            if (__isset.ownerType)
            {
                field.Name = "ownerType";
                field.Type = TType.I32;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)OwnerType);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Database(");
            sb.Append("Name: ");
            sb.Append(Name);
            sb.Append(",Description: ");
            sb.Append(Description);
            sb.Append(",LocationUri: ");
            sb.Append(LocationUri);
            sb.Append(",Parameters: ");
            sb.Append(Parameters);
            sb.Append(",Privileges: ");
            sb.Append(Privileges == null ? "<null>" : Privileges.ToString());
            sb.Append(",OwnerName: ");
            sb.Append(OwnerName);
            sb.Append(",OwnerType: ");
            sb.Append(OwnerType);
            sb.Append(")");
            return sb.ToString();
        }
    }
}