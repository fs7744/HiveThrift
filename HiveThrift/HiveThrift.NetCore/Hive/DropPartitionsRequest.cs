/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class DropPartitionsRequest : TBase
    {
        private bool _deleteData;
        private bool _ifExists;
        private bool _ignoreProtection;
        private EnvironmentContext _environmentContext;
        private bool _needResult;

        public string DbName { get; set; }

        public string TblName { get; set; }

        public RequestPartsSpec Parts { get; set; }

        public bool DeleteData
        {
            get
            {
                return _deleteData;
            }
            set
            {
                __isset.deleteData = true;
                this._deleteData = value;
            }
        }

        public bool IfExists
        {
            get
            {
                return _ifExists;
            }
            set
            {
                __isset.ifExists = true;
                this._ifExists = value;
            }
        }

        public bool IgnoreProtection
        {
            get
            {
                return _ignoreProtection;
            }
            set
            {
                __isset.ignoreProtection = true;
                this._ignoreProtection = value;
            }
        }

        public EnvironmentContext EnvironmentContext
        {
            get
            {
                return _environmentContext;
            }
            set
            {
                __isset.environmentContext = true;
                this._environmentContext = value;
            }
        }

        public bool NeedResult
        {
            get
            {
                return _needResult;
            }
            set
            {
                __isset.needResult = true;
                this._needResult = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool deleteData;
            public bool ifExists;
            public bool ignoreProtection;
            public bool environmentContext;
            public bool needResult;
        }

        public DropPartitionsRequest()
        {
            this._ifExists = true;
            this.__isset.ifExists = true;
            this._needResult = true;
            this.__isset.needResult = true;
        }

        public DropPartitionsRequest(string dbName, string tblName, RequestPartsSpec parts)
            : this()
        {
            this.DbName = dbName;
            this.TblName = tblName;
            this.Parts = parts;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_dbName = false;
            bool isset_tblName = false;
            bool isset_parts = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                            isset_dbName = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            TblName = iprot.ReadString();
                            isset_tblName = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Struct)
                        {
                            Parts = new RequestPartsSpec();
                            Parts.Read(iprot);
                            isset_parts = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Bool)
                        {
                            DeleteData = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Bool)
                        {
                            IfExists = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.Bool)
                        {
                            IgnoreProtection = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.Struct)
                        {
                            EnvironmentContext = new EnvironmentContext();
                            EnvironmentContext.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.Bool)
                        {
                            NeedResult = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_dbName)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_tblName)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_parts)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("DropPartitionsRequest");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "dbName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DbName);
            oprot.WriteFieldEnd();
            field.Name = "tblName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TblName);
            oprot.WriteFieldEnd();
            field.Name = "parts";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Parts.Write(oprot);
            oprot.WriteFieldEnd();
            if (__isset.deleteData)
            {
                field.Name = "deleteData";
                field.Type = TType.Bool;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(DeleteData);
                oprot.WriteFieldEnd();
            }
            if (__isset.ifExists)
            {
                field.Name = "ifExists";
                field.Type = TType.Bool;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(IfExists);
                oprot.WriteFieldEnd();
            }
            if (__isset.ignoreProtection)
            {
                field.Name = "ignoreProtection";
                field.Type = TType.Bool;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(IgnoreProtection);
                oprot.WriteFieldEnd();
            }
            if (EnvironmentContext != null && __isset.environmentContext)
            {
                field.Name = "environmentContext";
                field.Type = TType.Struct;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                EnvironmentContext.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (__isset.needResult)
            {
                field.Name = "needResult";
                field.Type = TType.Bool;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(NeedResult);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("DropPartitionsRequest(");
            sb.Append("DbName: ");
            sb.Append(DbName);
            sb.Append(",TblName: ");
            sb.Append(TblName);
            sb.Append(",Parts: ");
            sb.Append(Parts == null ? "<null>" : Parts.ToString());
            sb.Append(",DeleteData: ");
            sb.Append(DeleteData);
            sb.Append(",IfExists: ");
            sb.Append(IfExists);
            sb.Append(",IgnoreProtection: ");
            sb.Append(IgnoreProtection);
            sb.Append(",EnvironmentContext: ");
            sb.Append(EnvironmentContext == null ? "<null>" : EnvironmentContext.ToString());
            sb.Append(",NeedResult: ");
            sb.Append(NeedResult);
            sb.Append(")");
            return sb.ToString();
        }
    }
}