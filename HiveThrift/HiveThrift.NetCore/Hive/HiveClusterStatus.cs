/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class HiveClusterStatus : TBase
    {
        private int _taskTrackers;
        private int _mapTasks;
        private int _reduceTasks;
        private int _maxMapTasks;
        private int _maxReduceTasks;
        private JobTrackerState _state;

        public int TaskTrackers
        {
            get
            {
                return _taskTrackers;
            }
            set
            {
                __isset.taskTrackers = true;
                this._taskTrackers = value;
            }
        }

        public int MapTasks
        {
            get
            {
                return _mapTasks;
            }
            set
            {
                __isset.mapTasks = true;
                this._mapTasks = value;
            }
        }

        public int ReduceTasks
        {
            get
            {
                return _reduceTasks;
            }
            set
            {
                __isset.reduceTasks = true;
                this._reduceTasks = value;
            }
        }

        public int MaxMapTasks
        {
            get
            {
                return _maxMapTasks;
            }
            set
            {
                __isset.maxMapTasks = true;
                this._maxMapTasks = value;
            }
        }

        public int MaxReduceTasks
        {
            get
            {
                return _maxReduceTasks;
            }
            set
            {
                __isset.maxReduceTasks = true;
                this._maxReduceTasks = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="JobTrackerState"/>
        /// </summary>
        public JobTrackerState State
        {
            get
            {
                return _state;
            }
            set
            {
                __isset.state = true;
                this._state = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool taskTrackers;
            public bool mapTasks;
            public bool reduceTasks;
            public bool maxMapTasks;
            public bool maxReduceTasks;
            public bool state;
        }

        public HiveClusterStatus()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            TaskTrackers = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            MapTasks = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.I32)
                        {
                            ReduceTasks = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.I32)
                        {
                            MaxMapTasks = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.I32)
                        {
                            MaxReduceTasks = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.I32)
                        {
                            State = (JobTrackerState)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("HiveClusterStatus");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.taskTrackers)
            {
                field.Name = "taskTrackers";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(TaskTrackers);
                oprot.WriteFieldEnd();
            }
            if (__isset.mapTasks)
            {
                field.Name = "mapTasks";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(MapTasks);
                oprot.WriteFieldEnd();
            }
            if (__isset.reduceTasks)
            {
                field.Name = "reduceTasks";
                field.Type = TType.I32;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(ReduceTasks);
                oprot.WriteFieldEnd();
            }
            if (__isset.maxMapTasks)
            {
                field.Name = "maxMapTasks";
                field.Type = TType.I32;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(MaxMapTasks);
                oprot.WriteFieldEnd();
            }
            if (__isset.maxReduceTasks)
            {
                field.Name = "maxReduceTasks";
                field.Type = TType.I32;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(MaxReduceTasks);
                oprot.WriteFieldEnd();
            }
            if (__isset.state)
            {
                field.Name = "state";
                field.Type = TType.I32;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)State);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("HiveClusterStatus(");
            sb.Append("TaskTrackers: ");
            sb.Append(TaskTrackers);
            sb.Append(",MapTasks: ");
            sb.Append(MapTasks);
            sb.Append(",ReduceTasks: ");
            sb.Append(ReduceTasks);
            sb.Append(",MaxMapTasks: ");
            sb.Append(MaxMapTasks);
            sb.Append(",MaxReduceTasks: ");
            sb.Append(MaxReduceTasks);
            sb.Append(",State: ");
            sb.Append(State);
            sb.Append(")");
            return sb.ToString();
        }
    }
}