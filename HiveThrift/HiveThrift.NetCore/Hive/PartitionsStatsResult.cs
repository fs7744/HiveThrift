/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class PartitionsStatsResult : TBase
    {
        public Dictionary<string, List<ColumnStatisticsObj>> PartStats { get; set; }

        public PartitionsStatsResult()
        {
        }

        public PartitionsStatsResult(Dictionary<string, List<ColumnStatisticsObj>> partStats)
            : this()
        {
            this.PartStats = partStats;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_partStats = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Map)
                        {
                            {
                                PartStats = new Dictionary<string, List<ColumnStatisticsObj>>();
                                TMap _map152 = iprot.ReadMapBegin();
                                for (int _i153 = 0; _i153 < _map152.Count; ++_i153)
                                {
                                    string _key154;
                                    List<ColumnStatisticsObj> _val155;
                                    _key154 = iprot.ReadString();
                                    {
                                        _val155 = new List<ColumnStatisticsObj>();
                                        TList _list156 = iprot.ReadListBegin();
                                        for (int _i157 = 0; _i157 < _list156.Count; ++_i157)
                                        {
                                            ColumnStatisticsObj _elem158 = new ColumnStatisticsObj();
                                            _elem158 = new ColumnStatisticsObj();
                                            _elem158.Read(iprot);
                                            _val155.Add(_elem158);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                    PartStats[_key154] = _val155;
                                }
                                iprot.ReadMapEnd();
                            }
                            isset_partStats = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_partStats)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("PartitionsStatsResult");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "partStats";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
                oprot.WriteMapBegin(new TMap(TType.String, TType.List, PartStats.Count));
                foreach (string _iter159 in PartStats.Keys)
                {
                    oprot.WriteString(_iter159);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, PartStats[_iter159].Count));
                        foreach (ColumnStatisticsObj _iter160 in PartStats[_iter159])
                        {
                            _iter160.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                }
                oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("PartitionsStatsResult(");
            sb.Append("PartStats: ");
            sb.Append(PartStats);
            sb.Append(")");
            return sb.ToString();
        }
    }
}