/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class PrincipalPrivilegeSet : TBase
    {
        private Dictionary<string, List<PrivilegeGrantInfo>> _userPrivileges;
        private Dictionary<string, List<PrivilegeGrantInfo>> _groupPrivileges;
        private Dictionary<string, List<PrivilegeGrantInfo>> _rolePrivileges;

        public Dictionary<string, List<PrivilegeGrantInfo>> UserPrivileges
        {
            get
            {
                return _userPrivileges;
            }
            set
            {
                __isset.userPrivileges = true;
                this._userPrivileges = value;
            }
        }

        public Dictionary<string, List<PrivilegeGrantInfo>> GroupPrivileges
        {
            get
            {
                return _groupPrivileges;
            }
            set
            {
                __isset.groupPrivileges = true;
                this._groupPrivileges = value;
            }
        }

        public Dictionary<string, List<PrivilegeGrantInfo>> RolePrivileges
        {
            get
            {
                return _rolePrivileges;
            }
            set
            {
                __isset.rolePrivileges = true;
                this._rolePrivileges = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool userPrivileges;
            public bool groupPrivileges;
            public bool rolePrivileges;
        }

        public PrincipalPrivilegeSet()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Map)
                        {
                            {
                                UserPrivileges = new Dictionary<string, List<PrivilegeGrantInfo>>();
                                TMap _map12 = iprot.ReadMapBegin();
                                for (int _i13 = 0; _i13 < _map12.Count; ++_i13)
                                {
                                    string _key14;
                                    List<PrivilegeGrantInfo> _val15;
                                    _key14 = iprot.ReadString();
                                    {
                                        _val15 = new List<PrivilegeGrantInfo>();
                                        TList _list16 = iprot.ReadListBegin();
                                        for (int _i17 = 0; _i17 < _list16.Count; ++_i17)
                                        {
                                            PrivilegeGrantInfo _elem18 = new PrivilegeGrantInfo();
                                            _elem18 = new PrivilegeGrantInfo();
                                            _elem18.Read(iprot);
                                            _val15.Add(_elem18);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                    UserPrivileges[_key14] = _val15;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.Map)
                        {
                            {
                                GroupPrivileges = new Dictionary<string, List<PrivilegeGrantInfo>>();
                                TMap _map19 = iprot.ReadMapBegin();
                                for (int _i20 = 0; _i20 < _map19.Count; ++_i20)
                                {
                                    string _key21;
                                    List<PrivilegeGrantInfo> _val22;
                                    _key21 = iprot.ReadString();
                                    {
                                        _val22 = new List<PrivilegeGrantInfo>();
                                        TList _list23 = iprot.ReadListBegin();
                                        for (int _i24 = 0; _i24 < _list23.Count; ++_i24)
                                        {
                                            PrivilegeGrantInfo _elem25 = new PrivilegeGrantInfo();
                                            _elem25 = new PrivilegeGrantInfo();
                                            _elem25.Read(iprot);
                                            _val22.Add(_elem25);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                    GroupPrivileges[_key21] = _val22;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                RolePrivileges = new Dictionary<string, List<PrivilegeGrantInfo>>();
                                TMap _map26 = iprot.ReadMapBegin();
                                for (int _i27 = 0; _i27 < _map26.Count; ++_i27)
                                {
                                    string _key28;
                                    List<PrivilegeGrantInfo> _val29;
                                    _key28 = iprot.ReadString();
                                    {
                                        _val29 = new List<PrivilegeGrantInfo>();
                                        TList _list30 = iprot.ReadListBegin();
                                        for (int _i31 = 0; _i31 < _list30.Count; ++_i31)
                                        {
                                            PrivilegeGrantInfo _elem32 = new PrivilegeGrantInfo();
                                            _elem32 = new PrivilegeGrantInfo();
                                            _elem32.Read(iprot);
                                            _val29.Add(_elem32);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                    RolePrivileges[_key28] = _val29;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("PrincipalPrivilegeSet");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (UserPrivileges != null && __isset.userPrivileges)
            {
                field.Name = "userPrivileges";
                field.Type = TType.Map;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.List, UserPrivileges.Count));
                    foreach (string _iter33 in UserPrivileges.Keys)
                    {
                        oprot.WriteString(_iter33);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, UserPrivileges[_iter33].Count));
                            foreach (PrivilegeGrantInfo _iter34 in UserPrivileges[_iter33])
                            {
                                _iter34.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (GroupPrivileges != null && __isset.groupPrivileges)
            {
                field.Name = "groupPrivileges";
                field.Type = TType.Map;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.List, GroupPrivileges.Count));
                    foreach (string _iter35 in GroupPrivileges.Keys)
                    {
                        oprot.WriteString(_iter35);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, GroupPrivileges[_iter35].Count));
                            foreach (PrivilegeGrantInfo _iter36 in GroupPrivileges[_iter35])
                            {
                                _iter36.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (RolePrivileges != null && __isset.rolePrivileges)
            {
                field.Name = "rolePrivileges";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.List, RolePrivileges.Count));
                    foreach (string _iter37 in RolePrivileges.Keys)
                    {
                        oprot.WriteString(_iter37);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, RolePrivileges[_iter37].Count));
                            foreach (PrivilegeGrantInfo _iter38 in RolePrivileges[_iter37])
                            {
                                _iter38.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("PrincipalPrivilegeSet(");
            sb.Append("UserPrivileges: ");
            sb.Append(UserPrivileges);
            sb.Append(",GroupPrivileges: ");
            sb.Append(GroupPrivileges);
            sb.Append(",RolePrivileges: ");
            sb.Append(RolePrivileges);
            sb.Append(")");
            return sb.ToString();
        }
    }
}