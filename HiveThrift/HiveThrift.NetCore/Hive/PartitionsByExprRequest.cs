/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class PartitionsByExprRequest : TBase
    {
        private string _defaultPartitionName;
        private short _maxParts;

        public string DbName { get; set; }

        public string TblName { get; set; }

        public byte[] Expr { get; set; }

        public string DefaultPartitionName
        {
            get
            {
                return _defaultPartitionName;
            }
            set
            {
                __isset.defaultPartitionName = true;
                this._defaultPartitionName = value;
            }
        }

        public short MaxParts
        {
            get
            {
                return _maxParts;
            }
            set
            {
                __isset.maxParts = true;
                this._maxParts = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool defaultPartitionName;
            public bool maxParts;
        }

        public PartitionsByExprRequest()
        {
            this._maxParts = -1;
            this.__isset.maxParts = true;
        }

        public PartitionsByExprRequest(string dbName, string tblName, byte[] expr)
            : this()
        {
            this.DbName = dbName;
            this.TblName = tblName;
            this.Expr = expr;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_dbName = false;
            bool isset_tblName = false;
            bool isset_expr = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                            isset_dbName = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            TblName = iprot.ReadString();
                            isset_tblName = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            Expr = iprot.ReadBinary();
                            isset_expr = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            DefaultPartitionName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.I16)
                        {
                            MaxParts = iprot.ReadI16();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_dbName)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_tblName)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_expr)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("PartitionsByExprRequest");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "dbName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DbName);
            oprot.WriteFieldEnd();
            field.Name = "tblName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TblName);
            oprot.WriteFieldEnd();
            field.Name = "expr";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Expr);
            oprot.WriteFieldEnd();
            if (DefaultPartitionName != null && __isset.defaultPartitionName)
            {
                field.Name = "defaultPartitionName";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(DefaultPartitionName);
                oprot.WriteFieldEnd();
            }
            if (__isset.maxParts)
            {
                field.Name = "maxParts";
                field.Type = TType.I16;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteI16(MaxParts);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("PartitionsByExprRequest(");
            sb.Append("DbName: ");
            sb.Append(DbName);
            sb.Append(",TblName: ");
            sb.Append(TblName);
            sb.Append(",Expr: ");
            sb.Append(Expr);
            sb.Append(",DefaultPartitionName: ");
            sb.Append(DefaultPartitionName);
            sb.Append(",MaxParts: ");
            sb.Append(MaxParts);
            sb.Append(")");
            return sb.ToString();
        }
    }
}