/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Thrift;
using Thrift.Protocol;

namespace Hive
{
    public partial class ThriftHive
    {
        public interface Iface : Hive.ThriftHiveMetastore.Iface
        {
            void execute(string query);

#if SILVERLIGHT
      IAsyncResult Begin_execute(AsyncCallback callback, object state, string query);
      void End_execute(IAsyncResult asyncResult);
#endif

            string fetchOne();

#if SILVERLIGHT
      IAsyncResult Begin_fetchOne(AsyncCallback callback, object state);
      string End_fetchOne(IAsyncResult asyncResult);
#endif

            List<string> fetchN(int numRows);

#if SILVERLIGHT
      IAsyncResult Begin_fetchN(AsyncCallback callback, object state, int numRows);
      List<string> End_fetchN(IAsyncResult asyncResult);
#endif

            List<string> fetchAll();

#if SILVERLIGHT
      IAsyncResult Begin_fetchAll(AsyncCallback callback, object state);
      List<string> End_fetchAll(IAsyncResult asyncResult);
#endif

            Hive.Schema getSchema();

#if SILVERLIGHT
      IAsyncResult Begin_getSchema(AsyncCallback callback, object state);
      Hive.Schema End_getSchema(IAsyncResult asyncResult);
#endif

            Hive.Schema getThriftSchema();

#if SILVERLIGHT
      IAsyncResult Begin_getThriftSchema(AsyncCallback callback, object state);
      Hive.Schema End_getThriftSchema(IAsyncResult asyncResult);
#endif

            HiveClusterStatus getClusterStatus();

#if SILVERLIGHT
      IAsyncResult Begin_getClusterStatus(AsyncCallback callback, object state);
      HiveClusterStatus End_getClusterStatus(IAsyncResult asyncResult);
#endif

            Hive.QueryPlan getQueryPlan();

#if SILVERLIGHT
      IAsyncResult Begin_getQueryPlan(AsyncCallback callback, object state);
      Hive.QueryPlan End_getQueryPlan(IAsyncResult asyncResult);
#endif

            void clean();

#if SILVERLIGHT
      IAsyncResult Begin_clean(AsyncCallback callback, object state);
      void End_clean(IAsyncResult asyncResult);
#endif
        }

        public class Client : Hive.ThriftHiveMetastore.Client, Iface
        {
            public Client(TProtocol prot)
                : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
                : base(iprot, oprot)
            {
            }

#if SILVERLIGHT
      public IAsyncResult Begin_execute(AsyncCallback callback, object state, string query)
      {
        return send_execute(callback, state, query);
      }

      public void End_execute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_execute();
      }

#endif

            public void execute(string query)
            {
#if !SILVERLIGHT
                send_execute(query);
                recv_execute();

#else
        var asyncResult = Begin_execute(null, null, query);
        End_execute(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_execute(AsyncCallback callback, object state, string query)
#else

            public void send_execute(string query)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("execute", TMessageType.Call, seqid_));
                execute_args args = new execute_args();
                args.Query = query;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_execute()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                execute_result result = new execute_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_fetchOne(AsyncCallback callback, object state)
      {
        return send_fetchOne(callback, state);
      }

      public string End_fetchOne(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchOne();
      }

#endif

            public string fetchOne()
            {
#if !SILVERLIGHT
                send_fetchOne();
                return recv_fetchOne();

#else
        var asyncResult = Begin_fetchOne(null, null);
        return End_fetchOne(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_fetchOne(AsyncCallback callback, object state)
#else

            public void send_fetchOne()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("fetchOne", TMessageType.Call, seqid_));
                fetchOne_args args = new fetchOne_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_fetchOne()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                fetchOne_result result = new fetchOne_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchOne failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_fetchN(AsyncCallback callback, object state, int numRows)
      {
        return send_fetchN(callback, state, numRows);
      }

      public List<string> End_fetchN(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchN();
      }

#endif

            public List<string> fetchN(int numRows)
            {
#if !SILVERLIGHT
                send_fetchN(numRows);
                return recv_fetchN();

#else
        var asyncResult = Begin_fetchN(null, null, numRows);
        return End_fetchN(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_fetchN(AsyncCallback callback, object state, int numRows)
#else

            public void send_fetchN(int numRows)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("fetchN", TMessageType.Call, seqid_));
                fetchN_args args = new fetchN_args();
                args.NumRows = numRows;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_fetchN()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                fetchN_result result = new fetchN_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchN failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_fetchAll(AsyncCallback callback, object state)
      {
        return send_fetchAll(callback, state);
      }

      public List<string> End_fetchAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchAll();
      }

#endif

            public List<string> fetchAll()
            {
#if !SILVERLIGHT
                send_fetchAll();
                return recv_fetchAll();

#else
        var asyncResult = Begin_fetchAll(null, null);
        return End_fetchAll(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_fetchAll(AsyncCallback callback, object state)
#else

            public void send_fetchAll()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("fetchAll", TMessageType.Call, seqid_));
                fetchAll_args args = new fetchAll_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_fetchAll()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                fetchAll_result result = new fetchAll_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchAll failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_getSchema(AsyncCallback callback, object state)
      {
        return send_getSchema(callback, state);
      }

      public Hive.Schema End_getSchema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSchema();
      }

#endif

            public Hive.Schema getSchema()
            {
#if !SILVERLIGHT
                send_getSchema();
                return recv_getSchema();

#else
        var asyncResult = Begin_getSchema(null, null);
        return End_getSchema(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_getSchema(AsyncCallback callback, object state)
#else

            public void send_getSchema()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getSchema", TMessageType.Call, seqid_));
                getSchema_args args = new getSchema_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Hive.Schema recv_getSchema()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getSchema_result result = new getSchema_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSchema failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_getThriftSchema(AsyncCallback callback, object state)
      {
        return send_getThriftSchema(callback, state);
      }

      public Hive.Schema End_getThriftSchema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getThriftSchema();
      }

#endif

            public Hive.Schema getThriftSchema()
            {
#if !SILVERLIGHT
                send_getThriftSchema();
                return recv_getThriftSchema();

#else
        var asyncResult = Begin_getThriftSchema(null, null);
        return End_getThriftSchema(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_getThriftSchema(AsyncCallback callback, object state)
#else

            public void send_getThriftSchema()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getThriftSchema", TMessageType.Call, seqid_));
                getThriftSchema_args args = new getThriftSchema_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Hive.Schema recv_getThriftSchema()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getThriftSchema_result result = new getThriftSchema_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getThriftSchema failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_getClusterStatus(AsyncCallback callback, object state)
      {
        return send_getClusterStatus(callback, state);
      }

      public HiveClusterStatus End_getClusterStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getClusterStatus();
      }

#endif

            public HiveClusterStatus getClusterStatus()
            {
#if !SILVERLIGHT
                send_getClusterStatus();
                return recv_getClusterStatus();

#else
        var asyncResult = Begin_getClusterStatus(null, null);
        return End_getClusterStatus(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_getClusterStatus(AsyncCallback callback, object state)
#else

            public void send_getClusterStatus()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getClusterStatus", TMessageType.Call, seqid_));
                getClusterStatus_args args = new getClusterStatus_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public HiveClusterStatus recv_getClusterStatus()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getClusterStatus_result result = new getClusterStatus_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterStatus failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_getQueryPlan(AsyncCallback callback, object state)
      {
        return send_getQueryPlan(callback, state);
      }

      public Hive.QueryPlan End_getQueryPlan(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getQueryPlan();
      }

#endif

            public Hive.QueryPlan getQueryPlan()
            {
#if !SILVERLIGHT
                send_getQueryPlan();
                return recv_getQueryPlan();

#else
        var asyncResult = Begin_getQueryPlan(null, null);
        return End_getQueryPlan(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_getQueryPlan(AsyncCallback callback, object state)
#else

            public void send_getQueryPlan()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getQueryPlan", TMessageType.Call, seqid_));
                getQueryPlan_args args = new getQueryPlan_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Hive.QueryPlan recv_getQueryPlan()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getQueryPlan_result result = new getQueryPlan_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.ex)
                {
                    throw result.Ex;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getQueryPlan failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_clean(AsyncCallback callback, object state)
      {
        return send_clean(callback, state);
      }

      public void End_clean(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clean();
      }

#endif

            public void clean()
            {
#if !SILVERLIGHT
                send_clean();
                recv_clean();

#else
        var asyncResult = Begin_clean(null, null);
        End_clean(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_clean(AsyncCallback callback, object state)
#else

            public void send_clean()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("clean", TMessageType.Call, seqid_));
                clean_args args = new clean_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_clean()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                clean_result result = new clean_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }
        }

        public class Processor : Hive.ThriftHiveMetastore.Processor, TProcessor
        {
            public Processor(Iface iface)
                : base(iface)
            {
                iface_ = iface;
                processMap_["execute"] = execute_Process;
                processMap_["fetchOne"] = fetchOne_Process;
                processMap_["fetchN"] = fetchN_Process;
                processMap_["fetchAll"] = fetchAll_Process;
                processMap_["getSchema"] = getSchema_Process;
                processMap_["getThriftSchema"] = getThriftSchema_Process;
                processMap_["getClusterStatus"] = getClusterStatus_Process;
                processMap_["getQueryPlan"] = getQueryPlan_Process;
                processMap_["clean"] = clean_Process;
            }

            private Iface iface_;

            public new bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void execute_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                execute_args args = new execute_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                execute_result result = new execute_result();
                try
                {
                    iface_.execute(args.Query);
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("execute", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void fetchOne_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                fetchOne_args args = new fetchOne_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                fetchOne_result result = new fetchOne_result();
                try
                {
                    result.Success = iface_.fetchOne();
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("fetchOne", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void fetchN_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                fetchN_args args = new fetchN_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                fetchN_result result = new fetchN_result();
                try
                {
                    result.Success = iface_.fetchN(args.NumRows);
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("fetchN", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void fetchAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                fetchAll_args args = new fetchAll_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                fetchAll_result result = new fetchAll_result();
                try
                {
                    result.Success = iface_.fetchAll();
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("fetchAll", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getSchema_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getSchema_args args = new getSchema_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getSchema_result result = new getSchema_result();
                try
                {
                    result.Success = iface_.getSchema();
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("getSchema", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getThriftSchema_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getThriftSchema_args args = new getThriftSchema_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getThriftSchema_result result = new getThriftSchema_result();
                try
                {
                    result.Success = iface_.getThriftSchema();
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("getThriftSchema", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getClusterStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getClusterStatus_args args = new getClusterStatus_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getClusterStatus_result result = new getClusterStatus_result();
                try
                {
                    result.Success = iface_.getClusterStatus();
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("getClusterStatus", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getQueryPlan_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getQueryPlan_args args = new getQueryPlan_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getQueryPlan_result result = new getQueryPlan_result();
                try
                {
                    result.Success = iface_.getQueryPlan();
                }
                catch (HiveServerException ex)
                {
                    result.Ex = ex;
                }
                oprot.WriteMessageBegin(new TMessage("getQueryPlan", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void clean_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                clean_args args = new clean_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                clean_result result = new clean_result();
                iface_.clean();
                oprot.WriteMessageBegin(new TMessage("clean", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class execute_args : TBase
        {
            private string _query;

            public string Query
            {
                get
                {
                    return _query;
                }
                set
                {
                    __isset.query = true;
                    this._query = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool query;
            }

            public execute_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Query = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("execute_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Query != null && __isset.query)
                {
                    field.Name = "query";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Query);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("execute_args(");
                sb.Append("Query: ");
                sb.Append(Query);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class execute_result : TBase
        {
            private HiveServerException _ex;

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool ex;
            }

            public execute_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("execute_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("execute_result(");
                sb.Append("Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class fetchOne_args : TBase
        {
            public fetchOne_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("fetchOne_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("fetchOne_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class fetchOne_result : TBase
        {
            private string _success;
            private HiveServerException _ex;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public fetchOne_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("fetchOne_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("fetchOne_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class fetchN_args : TBase
        {
            private int _numRows;

            public int NumRows
            {
                get
                {
                    return _numRows;
                }
                set
                {
                    __isset.numRows = true;
                    this._numRows = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool numRows;
            }

            public fetchN_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                NumRows = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("fetchN_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.numRows)
                {
                    field.Name = "numRows";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(NumRows);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("fetchN_args(");
                sb.Append("NumRows: ");
                sb.Append(NumRows);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class fetchN_result : TBase
        {
            private List<string> _success;
            private HiveServerException _ex;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public fetchN_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list0 = iprot.ReadListBegin();
                                    for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                    {
                                        string _elem2 = null;
                                        _elem2 = iprot.ReadString();
                                        Success.Add(_elem2);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("fetchN_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter3 in Success)
                            {
                                oprot.WriteString(_iter3);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("fetchN_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class fetchAll_args : TBase
        {
            public fetchAll_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("fetchAll_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("fetchAll_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class fetchAll_result : TBase
        {
            private List<string> _success;
            private HiveServerException _ex;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public fetchAll_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list4 = iprot.ReadListBegin();
                                    for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                    {
                                        string _elem6 = null;
                                        _elem6 = iprot.ReadString();
                                        Success.Add(_elem6);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("fetchAll_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter7 in Success)
                            {
                                oprot.WriteString(_iter7);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("fetchAll_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getSchema_args : TBase
        {
            public getSchema_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getSchema_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getSchema_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getSchema_result : TBase
        {
            private Hive.Schema _success;
            private HiveServerException _ex;

            public Hive.Schema Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public getSchema_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Hive.Schema();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getSchema_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getSchema_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getThriftSchema_args : TBase
        {
            public getThriftSchema_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getThriftSchema_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getThriftSchema_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getThriftSchema_result : TBase
        {
            private Hive.Schema _success;
            private HiveServerException _ex;

            public Hive.Schema Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public getThriftSchema_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Hive.Schema();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getThriftSchema_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getThriftSchema_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getClusterStatus_args : TBase
        {
            public getClusterStatus_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getClusterStatus_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getClusterStatus_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getClusterStatus_result : TBase
        {
            private HiveClusterStatus _success;
            private HiveServerException _ex;

            public HiveClusterStatus Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public getClusterStatus_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new HiveClusterStatus();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getClusterStatus_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getClusterStatus_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getQueryPlan_args : TBase
        {
            public getQueryPlan_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getQueryPlan_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getQueryPlan_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getQueryPlan_result : TBase
        {
            private Hive.QueryPlan _success;
            private HiveServerException _ex;

            public Hive.QueryPlan Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public HiveServerException Ex
            {
                get
                {
                    return _ex;
                }
                set
                {
                    __isset.ex = true;
                    this._ex = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool ex;
            }

            public getQueryPlan_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Hive.QueryPlan();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ex = new HiveServerException();
                                Ex.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getQueryPlan_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ex)
                {
                    if (Ex != null)
                    {
                        field.Name = "Ex";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Ex.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getQueryPlan_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",Ex: ");
                sb.Append(Ex == null ? "<null>" : Ex.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class clean_args : TBase
        {
            public clean_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("clean_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("clean_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class clean_result : TBase
        {
            public clean_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("clean_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("clean_result(");
                sb.Append(")");
                return sb.ToString();
            }
        }
    }
}