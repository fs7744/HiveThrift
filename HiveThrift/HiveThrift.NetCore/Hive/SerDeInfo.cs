/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class SerDeInfo : TBase
    {
        private string _name;
        private string _serializationLib;
        private Dictionary<string, string> _parameters;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                __isset.name = true;
                this._name = value;
            }
        }

        public string SerializationLib
        {
            get
            {
                return _serializationLib;
            }
            set
            {
                __isset.serializationLib = true;
                this._serializationLib = value;
            }
        }

        public Dictionary<string, string> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                __isset.parameters = true;
                this._parameters = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool name;
            public bool serializationLib;
            public bool parameters;
        }

        public SerDeInfo()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            SerializationLib = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                Parameters = new Dictionary<string, string>();
                                TMap _map52 = iprot.ReadMapBegin();
                                for (int _i53 = 0; _i53 < _map52.Count; ++_i53)
                                {
                                    string _key54;
                                    string _val55;
                                    _key54 = iprot.ReadString();
                                    _val55 = iprot.ReadString();
                                    Parameters[_key54] = _val55;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SerDeInfo");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Name != null && __isset.name)
            {
                field.Name = "name";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            if (SerializationLib != null && __isset.serializationLib)
            {
                field.Name = "serializationLib";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(SerializationLib);
                oprot.WriteFieldEnd();
            }
            if (Parameters != null && __isset.parameters)
            {
                field.Name = "parameters";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
                    foreach (string _iter56 in Parameters.Keys)
                    {
                        oprot.WriteString(_iter56);
                        oprot.WriteString(Parameters[_iter56]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SerDeInfo(");
            sb.Append("Name: ");
            sb.Append(Name);
            sb.Append(",SerializationLib: ");
            sb.Append(SerializationLib);
            sb.Append(",Parameters: ");
            sb.Append(Parameters);
            sb.Append(")");
            return sb.ToString();
        }
    }
}