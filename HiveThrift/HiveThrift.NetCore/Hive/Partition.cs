/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Partition : TBase
    {
        private List<string> _values;
        private string _dbName;
        private string _tableName;
        private int _createTime;
        private int _lastAccessTime;
        private StorageDescriptor _sd;
        private Dictionary<string, string> _parameters;
        private PrincipalPrivilegeSet _privileges;

        public List<string> Values
        {
            get
            {
                return _values;
            }
            set
            {
                __isset.values = true;
                this._values = value;
            }
        }

        public string DbName
        {
            get
            {
                return _dbName;
            }
            set
            {
                __isset.dbName = true;
                this._dbName = value;
            }
        }

        public string TableName
        {
            get
            {
                return _tableName;
            }
            set
            {
                __isset.tableName = true;
                this._tableName = value;
            }
        }

        public int CreateTime
        {
            get
            {
                return _createTime;
            }
            set
            {
                __isset.createTime = true;
                this._createTime = value;
            }
        }

        public int LastAccessTime
        {
            get
            {
                return _lastAccessTime;
            }
            set
            {
                __isset.lastAccessTime = true;
                this._lastAccessTime = value;
            }
        }

        public StorageDescriptor Sd
        {
            get
            {
                return _sd;
            }
            set
            {
                __isset.sd = true;
                this._sd = value;
            }
        }

        public Dictionary<string, string> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                __isset.parameters = true;
                this._parameters = value;
            }
        }

        public PrincipalPrivilegeSet Privileges
        {
            get
            {
                return _privileges;
            }
            set
            {
                __isset.privileges = true;
                this._privileges = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool values;
            public bool dbName;
            public bool tableName;
            public bool createTime;
            public bool lastAccessTime;
            public bool sd;
            public bool parameters;
            public bool privileges;
        }

        public Partition()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                Values = new List<string>();
                                TList _list104 = iprot.ReadListBegin();
                                for (int _i105 = 0; _i105 < _list104.Count; ++_i105)
                                {
                                    string _elem106 = null;
                                    _elem106 = iprot.ReadString();
                                    Values.Add(_elem106);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            TableName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.I32)
                        {
                            CreateTime = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.I32)
                        {
                            LastAccessTime = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.Struct)
                        {
                            Sd = new StorageDescriptor();
                            Sd.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.Map)
                        {
                            {
                                Parameters = new Dictionary<string, string>();
                                TMap _map107 = iprot.ReadMapBegin();
                                for (int _i108 = 0; _i108 < _map107.Count; ++_i108)
                                {
                                    string _key109;
                                    string _val110;
                                    _key109 = iprot.ReadString();
                                    _val110 = iprot.ReadString();
                                    Parameters[_key109] = _val110;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.Struct)
                        {
                            Privileges = new PrincipalPrivilegeSet();
                            Privileges.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Partition");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Values != null && __isset.values)
            {
                field.Name = "values";
                field.Type = TType.List;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.String, Values.Count));
                    foreach (string _iter111 in Values)
                    {
                        oprot.WriteString(_iter111);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (DbName != null && __isset.dbName)
            {
                field.Name = "dbName";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(DbName);
                oprot.WriteFieldEnd();
            }
            if (TableName != null && __isset.tableName)
            {
                field.Name = "tableName";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(TableName);
                oprot.WriteFieldEnd();
            }
            if (__isset.createTime)
            {
                field.Name = "createTime";
                field.Type = TType.I32;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(CreateTime);
                oprot.WriteFieldEnd();
            }
            if (__isset.lastAccessTime)
            {
                field.Name = "lastAccessTime";
                field.Type = TType.I32;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(LastAccessTime);
                oprot.WriteFieldEnd();
            }
            if (Sd != null && __isset.sd)
            {
                field.Name = "sd";
                field.Type = TType.Struct;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                Sd.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Parameters != null && __isset.parameters)
            {
                field.Name = "parameters";
                field.Type = TType.Map;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
                    foreach (string _iter112 in Parameters.Keys)
                    {
                        oprot.WriteString(_iter112);
                        oprot.WriteString(Parameters[_iter112]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (Privileges != null && __isset.privileges)
            {
                field.Name = "privileges";
                field.Type = TType.Struct;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                Privileges.Write(oprot);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Partition(");
            sb.Append("Values: ");
            sb.Append(Values);
            sb.Append(",DbName: ");
            sb.Append(DbName);
            sb.Append(",TableName: ");
            sb.Append(TableName);
            sb.Append(",CreateTime: ");
            sb.Append(CreateTime);
            sb.Append(",LastAccessTime: ");
            sb.Append(LastAccessTime);
            sb.Append(",Sd: ");
            sb.Append(Sd == null ? "<null>" : Sd.ToString());
            sb.Append(",Parameters: ");
            sb.Append(Parameters);
            sb.Append(",Privileges: ");
            sb.Append(Privileges == null ? "<null>" : Privileges.ToString());
            sb.Append(")");
            return sb.ToString();
        }
    }
}