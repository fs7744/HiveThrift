/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class EnvironmentContext : TBase
    {
        private Dictionary<string, string> _properties;

        public Dictionary<string, string> Properties
        {
            get
            {
                return _properties;
            }
            set
            {
                __isset.properties = true;
                this._properties = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool properties;
        }

        public EnvironmentContext()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Map)
                        {
                            {
                                Properties = new Dictionary<string, string>();
                                TMap _map139 = iprot.ReadMapBegin();
                                for (int _i140 = 0; _i140 < _map139.Count; ++_i140)
                                {
                                    string _key141;
                                    string _val142;
                                    _key141 = iprot.ReadString();
                                    _val142 = iprot.ReadString();
                                    Properties[_key141] = _val142;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("EnvironmentContext");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Properties != null && __isset.properties)
            {
                field.Name = "properties";
                field.Type = TType.Map;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
                    foreach (string _iter143 in Properties.Keys)
                    {
                        oprot.WriteString(_iter143);
                        oprot.WriteString(Properties[_iter143]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("EnvironmentContext(");
            sb.Append("Properties: ");
            sb.Append(Properties);
            sb.Append(")");
            return sb.ToString();
        }
    }
}