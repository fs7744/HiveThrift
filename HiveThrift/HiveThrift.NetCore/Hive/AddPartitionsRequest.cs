/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class AddPartitionsRequest : TBase
    {
        private bool _needResult;

        public string DbName { get; set; }

        public string TblName { get; set; }

        public List<Partition> Parts { get; set; }

        public bool IfNotExists { get; set; }

        public bool NeedResult
        {
            get
            {
                return _needResult;
            }
            set
            {
                __isset.needResult = true;
                this._needResult = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool needResult;
        }

        public AddPartitionsRequest()
        {
            this._needResult = true;
            this.__isset.needResult = true;
        }

        public AddPartitionsRequest(string dbName, string tblName, List<Partition> parts, bool ifNotExists)
            : this()
        {
            this.DbName = dbName;
            this.TblName = tblName;
            this.Parts = parts;
            this.IfNotExists = ifNotExists;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_dbName = false;
            bool isset_tblName = false;
            bool isset_parts = false;
            bool isset_ifNotExists = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                            isset_dbName = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            TblName = iprot.ReadString();
                            isset_tblName = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.List)
                        {
                            {
                                Parts = new List<Partition>();
                                TList _list177 = iprot.ReadListBegin();
                                for (int _i178 = 0; _i178 < _list177.Count; ++_i178)
                                {
                                    Partition _elem179 = new Partition();
                                    _elem179 = new Partition();
                                    _elem179.Read(iprot);
                                    Parts.Add(_elem179);
                                }
                                iprot.ReadListEnd();
                            }
                            isset_parts = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Bool)
                        {
                            IfNotExists = iprot.ReadBool();
                            isset_ifNotExists = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Bool)
                        {
                            NeedResult = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_dbName)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_tblName)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_parts)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_ifNotExists)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("AddPartitionsRequest");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "dbName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DbName);
            oprot.WriteFieldEnd();
            field.Name = "tblName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TblName);
            oprot.WriteFieldEnd();
            field.Name = "parts";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
                oprot.WriteListBegin(new TList(TType.Struct, Parts.Count));
                foreach (Partition _iter180 in Parts)
                {
                    _iter180.Write(oprot);
                }
                oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
            field.Name = "ifNotExists";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IfNotExists);
            oprot.WriteFieldEnd();
            if (__isset.needResult)
            {
                field.Name = "needResult";
                field.Type = TType.Bool;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(NeedResult);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("AddPartitionsRequest(");
            sb.Append("DbName: ");
            sb.Append(DbName);
            sb.Append(",TblName: ");
            sb.Append(TblName);
            sb.Append(",Parts: ");
            sb.Append(Parts);
            sb.Append(",IfNotExists: ");
            sb.Append(IfNotExists);
            sb.Append(",NeedResult: ");
            sb.Append(NeedResult);
            sb.Append(")");
            return sb.ToString();
        }
    }
}