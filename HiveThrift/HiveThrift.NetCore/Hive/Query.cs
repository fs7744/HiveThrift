/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Query : TBase
    {
        private string _queryId;
        private string _queryType;
        private Dictionary<string, string> _queryAttributes;
        private Dictionary<string, long> _queryCounters;
        private Graph _stageGraph;
        private List<Stage> _stageList;
        private bool _done;
        private bool _started;

        public string QueryId
        {
            get
            {
                return _queryId;
            }
            set
            {
                __isset.queryId = true;
                this._queryId = value;
            }
        }

        public string QueryType
        {
            get
            {
                return _queryType;
            }
            set
            {
                __isset.queryType = true;
                this._queryType = value;
            }
        }

        public Dictionary<string, string> QueryAttributes
        {
            get
            {
                return _queryAttributes;
            }
            set
            {
                __isset.queryAttributes = true;
                this._queryAttributes = value;
            }
        }

        public Dictionary<string, long> QueryCounters
        {
            get
            {
                return _queryCounters;
            }
            set
            {
                __isset.queryCounters = true;
                this._queryCounters = value;
            }
        }

        public Graph StageGraph
        {
            get
            {
                return _stageGraph;
            }
            set
            {
                __isset.stageGraph = true;
                this._stageGraph = value;
            }
        }

        public List<Stage> StageList
        {
            get
            {
                return _stageList;
            }
            set
            {
                __isset.stageList = true;
                this._stageList = value;
            }
        }

        public bool Done
        {
            get
            {
                return _done;
            }
            set
            {
                __isset.done = true;
                this._done = value;
            }
        }

        public bool Started
        {
            get
            {
                return _started;
            }
            set
            {
                __isset.started = true;
                this._started = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool queryId;
            public bool queryType;
            public bool queryAttributes;
            public bool queryCounters;
            public bool stageGraph;
            public bool stageList;
            public bool done;
            public bool started;
        }

        public Query()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            QueryId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            QueryType = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                QueryAttributes = new Dictionary<string, string>();
                                TMap _map50 = iprot.ReadMapBegin();
                                for (int _i51 = 0; _i51 < _map50.Count; ++_i51)
                                {
                                    string _key52;
                                    string _val53;
                                    _key52 = iprot.ReadString();
                                    _val53 = iprot.ReadString();
                                    QueryAttributes[_key52] = _val53;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Map)
                        {
                            {
                                QueryCounters = new Dictionary<string, long>();
                                TMap _map54 = iprot.ReadMapBegin();
                                for (int _i55 = 0; _i55 < _map54.Count; ++_i55)
                                {
                                    string _key56;
                                    long _val57;
                                    _key56 = iprot.ReadString();
                                    _val57 = iprot.ReadI64();
                                    QueryCounters[_key56] = _val57;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Struct)
                        {
                            StageGraph = new Graph();
                            StageGraph.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.List)
                        {
                            {
                                StageList = new List<Stage>();
                                TList _list58 = iprot.ReadListBegin();
                                for (int _i59 = 0; _i59 < _list58.Count; ++_i59)
                                {
                                    Stage _elem60 = new Stage();
                                    _elem60 = new Stage();
                                    _elem60.Read(iprot);
                                    StageList.Add(_elem60);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.Bool)
                        {
                            Done = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.Bool)
                        {
                            Started = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Query");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (QueryId != null && __isset.queryId)
            {
                field.Name = "queryId";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(QueryId);
                oprot.WriteFieldEnd();
            }
            if (QueryType != null && __isset.queryType)
            {
                field.Name = "queryType";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(QueryType);
                oprot.WriteFieldEnd();
            }
            if (QueryAttributes != null && __isset.queryAttributes)
            {
                field.Name = "queryAttributes";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, QueryAttributes.Count));
                    foreach (string _iter61 in QueryAttributes.Keys)
                    {
                        oprot.WriteString(_iter61);
                        oprot.WriteString(QueryAttributes[_iter61]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (QueryCounters != null && __isset.queryCounters)
            {
                field.Name = "queryCounters";
                field.Type = TType.Map;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.I64, QueryCounters.Count));
                    foreach (string _iter62 in QueryCounters.Keys)
                    {
                        oprot.WriteString(_iter62);
                        oprot.WriteI64(QueryCounters[_iter62]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (StageGraph != null && __isset.stageGraph)
            {
                field.Name = "stageGraph";
                field.Type = TType.Struct;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                StageGraph.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (StageList != null && __isset.stageList)
            {
                field.Name = "stageList";
                field.Type = TType.List;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, StageList.Count));
                    foreach (Stage _iter63 in StageList)
                    {
                        _iter63.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (__isset.done)
            {
                field.Name = "done";
                field.Type = TType.Bool;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Done);
                oprot.WriteFieldEnd();
            }
            if (__isset.started)
            {
                field.Name = "started";
                field.Type = TType.Bool;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Started);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Query(");
            sb.Append("QueryId: ");
            sb.Append(QueryId);
            sb.Append(",QueryType: ");
            sb.Append(QueryType);
            sb.Append(",QueryAttributes: ");
            sb.Append(QueryAttributes);
            sb.Append(",QueryCounters: ");
            sb.Append(QueryCounters);
            sb.Append(",StageGraph: ");
            sb.Append(StageGraph == null ? "<null>" : StageGraph.ToString());
            sb.Append(",StageList: ");
            sb.Append(StageList);
            sb.Append(",Done: ");
            sb.Append(Done);
            sb.Append(",Started: ");
            sb.Append(Started);
            sb.Append(")");
            return sb.ToString();
        }
    }
}