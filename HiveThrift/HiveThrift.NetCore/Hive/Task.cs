/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Task : TBase
    {
        private string _taskId;
        private TaskType _taskType;
        private Dictionary<string, string> _taskAttributes;
        private Dictionary<string, long> _taskCounters;
        private Graph _operatorGraph;
        private List<Operator> _operatorList;
        private bool _done;
        private bool _started;

        public string TaskId
        {
            get
            {
                return _taskId;
            }
            set
            {
                __isset.taskId = true;
                this._taskId = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="TaskType"/>
        /// </summary>
        public TaskType TaskType
        {
            get
            {
                return _taskType;
            }
            set
            {
                __isset.taskType = true;
                this._taskType = value;
            }
        }

        public Dictionary<string, string> TaskAttributes
        {
            get
            {
                return _taskAttributes;
            }
            set
            {
                __isset.taskAttributes = true;
                this._taskAttributes = value;
            }
        }

        public Dictionary<string, long> TaskCounters
        {
            get
            {
                return _taskCounters;
            }
            set
            {
                __isset.taskCounters = true;
                this._taskCounters = value;
            }
        }

        public Graph OperatorGraph
        {
            get
            {
                return _operatorGraph;
            }
            set
            {
                __isset.operatorGraph = true;
                this._operatorGraph = value;
            }
        }

        public List<Operator> OperatorList
        {
            get
            {
                return _operatorList;
            }
            set
            {
                __isset.operatorList = true;
                this._operatorList = value;
            }
        }

        public bool Done
        {
            get
            {
                return _done;
            }
            set
            {
                __isset.done = true;
                this._done = value;
            }
        }

        public bool Started
        {
            get
            {
                return _started;
            }
            set
            {
                __isset.started = true;
                this._started = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool taskId;
            public bool taskType;
            public bool taskAttributes;
            public bool taskCounters;
            public bool operatorGraph;
            public bool operatorList;
            public bool done;
            public bool started;
        }

        public Task()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            TaskId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            TaskType = (TaskType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                TaskAttributes = new Dictionary<string, string>();
                                TMap _map22 = iprot.ReadMapBegin();
                                for (int _i23 = 0; _i23 < _map22.Count; ++_i23)
                                {
                                    string _key24;
                                    string _val25;
                                    _key24 = iprot.ReadString();
                                    _val25 = iprot.ReadString();
                                    TaskAttributes[_key24] = _val25;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Map)
                        {
                            {
                                TaskCounters = new Dictionary<string, long>();
                                TMap _map26 = iprot.ReadMapBegin();
                                for (int _i27 = 0; _i27 < _map26.Count; ++_i27)
                                {
                                    string _key28;
                                    long _val29;
                                    _key28 = iprot.ReadString();
                                    _val29 = iprot.ReadI64();
                                    TaskCounters[_key28] = _val29;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Struct)
                        {
                            OperatorGraph = new Graph();
                            OperatorGraph.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.List)
                        {
                            {
                                OperatorList = new List<Operator>();
                                TList _list30 = iprot.ReadListBegin();
                                for (int _i31 = 0; _i31 < _list30.Count; ++_i31)
                                {
                                    Operator _elem32 = new Operator();
                                    _elem32 = new Operator();
                                    _elem32.Read(iprot);
                                    OperatorList.Add(_elem32);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.Bool)
                        {
                            Done = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.Bool)
                        {
                            Started = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Task");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (TaskId != null && __isset.taskId)
            {
                field.Name = "taskId";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(TaskId);
                oprot.WriteFieldEnd();
            }
            if (__isset.taskType)
            {
                field.Name = "taskType";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)TaskType);
                oprot.WriteFieldEnd();
            }
            if (TaskAttributes != null && __isset.taskAttributes)
            {
                field.Name = "taskAttributes";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, TaskAttributes.Count));
                    foreach (string _iter33 in TaskAttributes.Keys)
                    {
                        oprot.WriteString(_iter33);
                        oprot.WriteString(TaskAttributes[_iter33]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (TaskCounters != null && __isset.taskCounters)
            {
                field.Name = "taskCounters";
                field.Type = TType.Map;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.I64, TaskCounters.Count));
                    foreach (string _iter34 in TaskCounters.Keys)
                    {
                        oprot.WriteString(_iter34);
                        oprot.WriteI64(TaskCounters[_iter34]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (OperatorGraph != null && __isset.operatorGraph)
            {
                field.Name = "operatorGraph";
                field.Type = TType.Struct;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                OperatorGraph.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (OperatorList != null && __isset.operatorList)
            {
                field.Name = "operatorList";
                field.Type = TType.List;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, OperatorList.Count));
                    foreach (Operator _iter35 in OperatorList)
                    {
                        _iter35.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (__isset.done)
            {
                field.Name = "done";
                field.Type = TType.Bool;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Done);
                oprot.WriteFieldEnd();
            }
            if (__isset.started)
            {
                field.Name = "started";
                field.Type = TType.Bool;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Started);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Task(");
            sb.Append("TaskId: ");
            sb.Append(TaskId);
            sb.Append(",TaskType: ");
            sb.Append(TaskType);
            sb.Append(",TaskAttributes: ");
            sb.Append(TaskAttributes);
            sb.Append(",TaskCounters: ");
            sb.Append(TaskCounters);
            sb.Append(",OperatorGraph: ");
            sb.Append(OperatorGraph == null ? "<null>" : OperatorGraph.ToString());
            sb.Append(",OperatorList: ");
            sb.Append(OperatorList);
            sb.Append(",Done: ");
            sb.Append(Done);
            sb.Append(",Started: ");
            sb.Append(Started);
            sb.Append(")");
            return sb.ToString();
        }
    }
}