/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class ShowLocksResponseElement : TBase
    {
        private string _tablename;
        private string _partname;
        private long _txnid;
        private long _acquiredat;

        public long Lockid { get; set; }

        public string Dbname { get; set; }

        public string Tablename
        {
            get
            {
                return _tablename;
            }
            set
            {
                __isset.tablename = true;
                this._tablename = value;
            }
        }

        public string Partname
        {
            get
            {
                return _partname;
            }
            set
            {
                __isset.partname = true;
                this._partname = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="LockState"/>
        /// </summary>
        public LockState State { get; set; }

        /// <summary>
        ///
        /// <seealso cref="LockType"/>
        /// </summary>
        public LockType Type { get; set; }

        public long Txnid
        {
            get
            {
                return _txnid;
            }
            set
            {
                __isset.txnid = true;
                this._txnid = value;
            }
        }

        public long Lastheartbeat { get; set; }

        public long Acquiredat
        {
            get
            {
                return _acquiredat;
            }
            set
            {
                __isset.acquiredat = true;
                this._acquiredat = value;
            }
        }

        public string User { get; set; }

        public string Hostname { get; set; }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool tablename;
            public bool partname;
            public bool txnid;
            public bool acquiredat;
        }

        public ShowLocksResponseElement()
        {
        }

        public ShowLocksResponseElement(long lockid, string dbname, LockState state, LockType type, long lastheartbeat, string user, string hostname)
            : this()
        {
            this.Lockid = lockid;
            this.Dbname = dbname;
            this.State = state;
            this.Type = type;
            this.Lastheartbeat = lastheartbeat;
            this.User = user;
            this.Hostname = hostname;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_lockid = false;
            bool isset_dbname = false;
            bool isset_state = false;
            bool isset_type = false;
            bool isset_lastheartbeat = false;
            bool isset_user = false;
            bool isset_hostname = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I64)
                        {
                            Lockid = iprot.ReadI64();
                            isset_lockid = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            Dbname = iprot.ReadString();
                            isset_dbname = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            Tablename = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            Partname = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.I32)
                        {
                            State = (LockState)iprot.ReadI32();
                            isset_state = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.I32)
                        {
                            Type = (LockType)iprot.ReadI32();
                            isset_type = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.I64)
                        {
                            Txnid = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.I64)
                        {
                            Lastheartbeat = iprot.ReadI64();
                            isset_lastheartbeat = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 9:
                        if (field.Type == TType.I64)
                        {
                            Acquiredat = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 10:
                        if (field.Type == TType.String)
                        {
                            User = iprot.ReadString();
                            isset_user = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 11:
                        if (field.Type == TType.String)
                        {
                            Hostname = iprot.ReadString();
                            isset_hostname = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_lockid)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_dbname)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_state)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_type)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_lastheartbeat)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_user)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_hostname)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("ShowLocksResponseElement");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "lockid";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Lockid);
            oprot.WriteFieldEnd();
            field.Name = "dbname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Dbname);
            oprot.WriteFieldEnd();
            if (Tablename != null && __isset.tablename)
            {
                field.Name = "tablename";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Tablename);
                oprot.WriteFieldEnd();
            }
            if (Partname != null && __isset.partname)
            {
                field.Name = "partname";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Partname);
                oprot.WriteFieldEnd();
            }
            field.Name = "state";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)State);
            oprot.WriteFieldEnd();
            field.Name = "type";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Type);
            oprot.WriteFieldEnd();
            if (__isset.txnid)
            {
                field.Name = "txnid";
                field.Type = TType.I64;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(Txnid);
                oprot.WriteFieldEnd();
            }
            field.Name = "lastheartbeat";
            field.Type = TType.I64;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Lastheartbeat);
            oprot.WriteFieldEnd();
            if (__isset.acquiredat)
            {
                field.Name = "acquiredat";
                field.Type = TType.I64;
                field.ID = 9;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(Acquiredat);
                oprot.WriteFieldEnd();
            }
            field.Name = "user";
            field.Type = TType.String;
            field.ID = 10;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(User);
            oprot.WriteFieldEnd();
            field.Name = "hostname";
            field.Type = TType.String;
            field.ID = 11;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hostname);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("ShowLocksResponseElement(");
            sb.Append("Lockid: ");
            sb.Append(Lockid);
            sb.Append(",Dbname: ");
            sb.Append(Dbname);
            sb.Append(",Tablename: ");
            sb.Append(Tablename);
            sb.Append(",Partname: ");
            sb.Append(Partname);
            sb.Append(",State: ");
            sb.Append(State);
            sb.Append(",Type: ");
            sb.Append(Type);
            sb.Append(",Txnid: ");
            sb.Append(Txnid);
            sb.Append(",Lastheartbeat: ");
            sb.Append(Lastheartbeat);
            sb.Append(",Acquiredat: ");
            sb.Append(Acquiredat);
            sb.Append(",User: ");
            sb.Append(User);
            sb.Append(",Hostname: ");
            sb.Append(Hostname);
            sb.Append(")");
            return sb.ToString();
        }
    }
}