/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class Operator : TBase
    {
        private string _operatorId;
        private OperatorType _operatorType;
        private Dictionary<string, string> _operatorAttributes;
        private Dictionary<string, long> _operatorCounters;
        private bool _done;
        private bool _started;

        public string OperatorId
        {
            get
            {
                return _operatorId;
            }
            set
            {
                __isset.operatorId = true;
                this._operatorId = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="OperatorType"/>
        /// </summary>
        public OperatorType OperatorType
        {
            get
            {
                return _operatorType;
            }
            set
            {
                __isset.operatorType = true;
                this._operatorType = value;
            }
        }

        public Dictionary<string, string> OperatorAttributes
        {
            get
            {
                return _operatorAttributes;
            }
            set
            {
                __isset.operatorAttributes = true;
                this._operatorAttributes = value;
            }
        }

        public Dictionary<string, long> OperatorCounters
        {
            get
            {
                return _operatorCounters;
            }
            set
            {
                __isset.operatorCounters = true;
                this._operatorCounters = value;
            }
        }

        public bool Done
        {
            get
            {
                return _done;
            }
            set
            {
                __isset.done = true;
                this._done = value;
            }
        }

        public bool Started
        {
            get
            {
                return _started;
            }
            set
            {
                __isset.started = true;
                this._started = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool operatorId;
            public bool operatorType;
            public bool operatorAttributes;
            public bool operatorCounters;
            public bool done;
            public bool started;
        }

        public Operator()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            OperatorId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            OperatorType = (OperatorType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Map)
                        {
                            {
                                OperatorAttributes = new Dictionary<string, string>();
                                TMap _map12 = iprot.ReadMapBegin();
                                for (int _i13 = 0; _i13 < _map12.Count; ++_i13)
                                {
                                    string _key14;
                                    string _val15;
                                    _key14 = iprot.ReadString();
                                    _val15 = iprot.ReadString();
                                    OperatorAttributes[_key14] = _val15;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Map)
                        {
                            {
                                OperatorCounters = new Dictionary<string, long>();
                                TMap _map16 = iprot.ReadMapBegin();
                                for (int _i17 = 0; _i17 < _map16.Count; ++_i17)
                                {
                                    string _key18;
                                    long _val19;
                                    _key18 = iprot.ReadString();
                                    _val19 = iprot.ReadI64();
                                    OperatorCounters[_key18] = _val19;
                                }
                                iprot.ReadMapEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Bool)
                        {
                            Done = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.Bool)
                        {
                            Started = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Operator");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (OperatorId != null && __isset.operatorId)
            {
                field.Name = "operatorId";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(OperatorId);
                oprot.WriteFieldEnd();
            }
            if (__isset.operatorType)
            {
                field.Name = "operatorType";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)OperatorType);
                oprot.WriteFieldEnd();
            }
            if (OperatorAttributes != null && __isset.operatorAttributes)
            {
                field.Name = "operatorAttributes";
                field.Type = TType.Map;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, OperatorAttributes.Count));
                    foreach (string _iter20 in OperatorAttributes.Keys)
                    {
                        oprot.WriteString(_iter20);
                        oprot.WriteString(OperatorAttributes[_iter20]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (OperatorCounters != null && __isset.operatorCounters)
            {
                field.Name = "operatorCounters";
                field.Type = TType.Map;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.I64, OperatorCounters.Count));
                    foreach (string _iter21 in OperatorCounters.Keys)
                    {
                        oprot.WriteString(_iter21);
                        oprot.WriteI64(OperatorCounters[_iter21]);
                    }
                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (__isset.done)
            {
                field.Name = "done";
                field.Type = TType.Bool;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Done);
                oprot.WriteFieldEnd();
            }
            if (__isset.started)
            {
                field.Name = "started";
                field.Type = TType.Bool;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Started);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Operator(");
            sb.Append("OperatorId: ");
            sb.Append(OperatorId);
            sb.Append(",OperatorType: ");
            sb.Append(OperatorType);
            sb.Append(",OperatorAttributes: ");
            sb.Append(OperatorAttributes);
            sb.Append(",OperatorCounters: ");
            sb.Append(OperatorCounters);
            sb.Append(",Done: ");
            sb.Append(Done);
            sb.Append(",Started: ");
            sb.Append(Started);
            sb.Append(")");
            return sb.ToString();
        }
    }
}