/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Hive
{
#if !SILVERLIGHT

#endif

    public partial class TxnInfo : TBase
    {
        public long Id { get; set; }

        /// <summary>
        ///
        /// <seealso cref="TxnState"/>
        /// </summary>
        public TxnState State { get; set; }

        public string User { get; set; }

        public string Hostname { get; set; }

        public TxnInfo()
        {
        }

        public TxnInfo(long id, TxnState state, string user, string hostname) : this()
        {
            this.Id = id;
            this.State = state;
            this.User = user;
            this.Hostname = hostname;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_id = false;
            bool isset_state = false;
            bool isset_user = false;
            bool isset_hostname = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I64)
                        {
                            Id = iprot.ReadI64();
                            isset_id = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            State = (TxnState)iprot.ReadI32();
                            isset_state = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            User = iprot.ReadString();
                            isset_user = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            Hostname = iprot.ReadString();
                            isset_hostname = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_id)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_state)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_user)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_hostname)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TxnInfo");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "id";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Id);
            oprot.WriteFieldEnd();
            field.Name = "state";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)State);
            oprot.WriteFieldEnd();
            field.Name = "user";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(User);
            oprot.WriteFieldEnd();
            field.Name = "hostname";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hostname);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TxnInfo(");
            sb.Append("Id: ");
            sb.Append(Id);
            sb.Append(",State: ");
            sb.Append(State);
            sb.Append(",User: ");
            sb.Append(User);
            sb.Append(",Hostname: ");
            sb.Append(Hostname);
            sb.Append(")");
            return sb.ToString();
        }
    }
}