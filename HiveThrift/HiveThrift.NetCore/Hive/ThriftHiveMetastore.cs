/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Hive
{
    public partial class ThriftHiveMetastore
    {
        /// <summary>
        /// This interface is live.
        /// </summary>
        public interface Iface : Hive.FacebookService.Iface
        {
            string getMetaConf(string key);

#if SILVERLIGHT
      IAsyncResult Begin_getMetaConf(AsyncCallback callback, object state, string key);
      string End_getMetaConf(IAsyncResult asyncResult);
#endif

            void setMetaConf(string key, string value);

#if SILVERLIGHT
      IAsyncResult Begin_setMetaConf(AsyncCallback callback, object state, string key, string value);
      void End_setMetaConf(IAsyncResult asyncResult);
#endif

            void create_database(Database database);

#if SILVERLIGHT
      IAsyncResult Begin_create_database(AsyncCallback callback, object state, Database database);
      void End_create_database(IAsyncResult asyncResult);
#endif

            Database get_database(string name);

#if SILVERLIGHT
      IAsyncResult Begin_get_database(AsyncCallback callback, object state, string name);
      Database End_get_database(IAsyncResult asyncResult);
#endif

            void drop_database(string name, bool deleteData, bool cascade);

#if SILVERLIGHT
      IAsyncResult Begin_drop_database(AsyncCallback callback, object state, string name, bool deleteData, bool cascade);
      void End_drop_database(IAsyncResult asyncResult);
#endif

            List<string> get_databases(string pattern);

#if SILVERLIGHT
      IAsyncResult Begin_get_databases(AsyncCallback callback, object state, string pattern);
      List<string> End_get_databases(IAsyncResult asyncResult);
#endif

            List<string> get_all_databases();

#if SILVERLIGHT
      IAsyncResult Begin_get_all_databases(AsyncCallback callback, object state);
      List<string> End_get_all_databases(IAsyncResult asyncResult);
#endif

            void alter_database(string dbname, Database db);

#if SILVERLIGHT
      IAsyncResult Begin_alter_database(AsyncCallback callback, object state, string dbname, Database db);
      void End_alter_database(IAsyncResult asyncResult);
#endif

            Type get_type(string name);

#if SILVERLIGHT
      IAsyncResult Begin_get_type(AsyncCallback callback, object state, string name);
      Type End_get_type(IAsyncResult asyncResult);
#endif

            bool create_type(Type type);

#if SILVERLIGHT
      IAsyncResult Begin_create_type(AsyncCallback callback, object state, Type type);
      bool End_create_type(IAsyncResult asyncResult);
#endif

            bool drop_type(string type);

#if SILVERLIGHT
      IAsyncResult Begin_drop_type(AsyncCallback callback, object state, string type);
      bool End_drop_type(IAsyncResult asyncResult);
#endif

            Dictionary<string, Type> get_type_all(string name);

#if SILVERLIGHT
      IAsyncResult Begin_get_type_all(AsyncCallback callback, object state, string name);
      Dictionary<string, Type> End_get_type_all(IAsyncResult asyncResult);
#endif

            List<FieldSchema> get_fields(string db_name, string table_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_fields(AsyncCallback callback, object state, string db_name, string table_name);
      List<FieldSchema> End_get_fields(IAsyncResult asyncResult);
#endif

            List<FieldSchema> get_schema(string db_name, string table_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_schema(AsyncCallback callback, object state, string db_name, string table_name);
      List<FieldSchema> End_get_schema(IAsyncResult asyncResult);
#endif

            void create_table(Table tbl);

#if SILVERLIGHT
      IAsyncResult Begin_create_table(AsyncCallback callback, object state, Table tbl);
      void End_create_table(IAsyncResult asyncResult);
#endif

            void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_create_table_with_environment_context(AsyncCallback callback, object state, Table tbl, EnvironmentContext environment_context);
      void End_create_table_with_environment_context(IAsyncResult asyncResult);
#endif

            void drop_table(string dbname, string name, bool deleteData);

#if SILVERLIGHT
      IAsyncResult Begin_drop_table(AsyncCallback callback, object state, string dbname, string name, bool deleteData);
      void End_drop_table(IAsyncResult asyncResult);
#endif

            void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_drop_table_with_environment_context(AsyncCallback callback, object state, string dbname, string name, bool deleteData, EnvironmentContext environment_context);
      void End_drop_table_with_environment_context(IAsyncResult asyncResult);
#endif

            List<string> get_tables(string db_name, string pattern);

#if SILVERLIGHT
      IAsyncResult Begin_get_tables(AsyncCallback callback, object state, string db_name, string pattern);
      List<string> End_get_tables(IAsyncResult asyncResult);
#endif

            List<string> get_all_tables(string db_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_all_tables(AsyncCallback callback, object state, string db_name);
      List<string> End_get_all_tables(IAsyncResult asyncResult);
#endif

            Table get_table(string dbname, string tbl_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_table(AsyncCallback callback, object state, string dbname, string tbl_name);
      Table End_get_table(IAsyncResult asyncResult);
#endif

            List<Table> get_table_objects_by_name(string dbname, List<string> tbl_names);

#if SILVERLIGHT
      IAsyncResult Begin_get_table_objects_by_name(AsyncCallback callback, object state, string dbname, List<string> tbl_names);
      List<Table> End_get_table_objects_by_name(IAsyncResult asyncResult);
#endif

            List<string> get_table_names_by_filter(string dbname, string filter, short max_tables);

#if SILVERLIGHT
      IAsyncResult Begin_get_table_names_by_filter(AsyncCallback callback, object state, string dbname, string filter, short max_tables);
      List<string> End_get_table_names_by_filter(IAsyncResult asyncResult);
#endif

            void alter_table(string dbname, string tbl_name, Table new_tbl);

#if SILVERLIGHT
      IAsyncResult Begin_alter_table(AsyncCallback callback, object state, string dbname, string tbl_name, Table new_tbl);
      void End_alter_table(IAsyncResult asyncResult);
#endif

            void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_alter_table_with_environment_context(AsyncCallback callback, object state, string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context);
      void End_alter_table_with_environment_context(IAsyncResult asyncResult);
#endif

            Partition add_partition(Partition new_part);

#if SILVERLIGHT
      IAsyncResult Begin_add_partition(AsyncCallback callback, object state, Partition new_part);
      Partition End_add_partition(IAsyncResult asyncResult);
#endif

            Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_add_partition_with_environment_context(AsyncCallback callback, object state, Partition new_part, EnvironmentContext environment_context);
      Partition End_add_partition_with_environment_context(IAsyncResult asyncResult);
#endif

            int add_partitions(List<Partition> new_parts);

#if SILVERLIGHT
      IAsyncResult Begin_add_partitions(AsyncCallback callback, object state, List<Partition> new_parts);
      int End_add_partitions(IAsyncResult asyncResult);
#endif

            Partition append_partition(string db_name, string tbl_name, List<string> part_vals);

#if SILVERLIGHT
      IAsyncResult Begin_append_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals);
      Partition End_append_partition(IAsyncResult asyncResult);
#endif

            AddPartitionsResult add_partitions_req(AddPartitionsRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_add_partitions_req(AsyncCallback callback, object state, AddPartitionsRequest request);
      AddPartitionsResult End_add_partitions_req(IAsyncResult asyncResult);
#endif

            Partition append_partition_with_environment_context(string db_name, string tbl_name, List<string> part_vals, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_append_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, EnvironmentContext environment_context);
      Partition End_append_partition_with_environment_context(IAsyncResult asyncResult);
#endif

            Partition append_partition_by_name(string db_name, string tbl_name, string part_name);

#if SILVERLIGHT
      IAsyncResult Begin_append_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name);
      Partition End_append_partition_by_name(IAsyncResult asyncResult);
#endif

            Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_append_partition_by_name_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, EnvironmentContext environment_context);
      Partition End_append_partition_by_name_with_environment_context(IAsyncResult asyncResult);
#endif

            bool drop_partition(string db_name, string tbl_name, List<string> part_vals, bool deleteData);

#if SILVERLIGHT
      IAsyncResult Begin_drop_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, bool deleteData);
      bool End_drop_partition(IAsyncResult asyncResult);
#endif

            bool drop_partition_with_environment_context(string db_name, string tbl_name, List<string> part_vals, bool deleteData, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_drop_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, bool deleteData, EnvironmentContext environment_context);
      bool End_drop_partition_with_environment_context(IAsyncResult asyncResult);
#endif

            bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData);

#if SILVERLIGHT
      IAsyncResult Begin_drop_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, bool deleteData);
      bool End_drop_partition_by_name(IAsyncResult asyncResult);
#endif

            bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_drop_partition_by_name_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context);
      bool End_drop_partition_by_name_with_environment_context(IAsyncResult asyncResult);
#endif

            DropPartitionsResult drop_partitions_req(DropPartitionsRequest req);

#if SILVERLIGHT
      IAsyncResult Begin_drop_partitions_req(AsyncCallback callback, object state, DropPartitionsRequest req);
      DropPartitionsResult End_drop_partitions_req(IAsyncResult asyncResult);
#endif

            Partition get_partition(string db_name, string tbl_name, List<string> part_vals);

#if SILVERLIGHT
      IAsyncResult Begin_get_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals);
      Partition End_get_partition(IAsyncResult asyncResult);
#endif

            Partition exchange_partition(Dictionary<string, string> partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name);

#if SILVERLIGHT
      IAsyncResult Begin_exchange_partition(AsyncCallback callback, object state, Dictionary<string, string> partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name);
      Partition End_exchange_partition(IAsyncResult asyncResult);
#endif

            Partition get_partition_with_auth(string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names);

#if SILVERLIGHT
      IAsyncResult Begin_get_partition_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names);
      Partition End_get_partition_with_auth(IAsyncResult asyncResult);
#endif

            Partition get_partition_by_name(string db_name, string tbl_name, string part_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name);
      Partition End_get_partition_by_name(IAsyncResult asyncResult);
#endif

            List<Partition> get_partitions(string db_name, string tbl_name, short max_parts);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts);
      List<Partition> End_get_partitions(IAsyncResult asyncResult);
#endif

            List<Partition> get_partitions_with_auth(string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names);
      List<Partition> End_get_partitions_with_auth(IAsyncResult asyncResult);
#endif

            List<string> get_partition_names(string db_name, string tbl_name, short max_parts);

#if SILVERLIGHT
      IAsyncResult Begin_get_partition_names(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts);
      List<string> End_get_partition_names(IAsyncResult asyncResult);
#endif

            List<Partition> get_partitions_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_ps(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts);
      List<Partition> End_get_partitions_ps(IAsyncResult asyncResult);
#endif

            List<Partition> get_partitions_ps_with_auth(string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_ps_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names);
      List<Partition> End_get_partitions_ps_with_auth(IAsyncResult asyncResult);
#endif

            List<string> get_partition_names_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts);

#if SILVERLIGHT
      IAsyncResult Begin_get_partition_names_ps(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts);
      List<string> End_get_partition_names_ps(IAsyncResult asyncResult);
#endif

            List<Partition> get_partitions_by_filter(string db_name, string tbl_name, string filter, short max_parts);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_by_filter(AsyncCallback callback, object state, string db_name, string tbl_name, string filter, short max_parts);
      List<Partition> End_get_partitions_by_filter(IAsyncResult asyncResult);
#endif

            PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_by_expr(AsyncCallback callback, object state, PartitionsByExprRequest req);
      PartitionsByExprResult End_get_partitions_by_expr(IAsyncResult asyncResult);
#endif

            List<Partition> get_partitions_by_names(string db_name, string tbl_name, List<string> names);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_by_names(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> names);
      List<Partition> End_get_partitions_by_names(IAsyncResult asyncResult);
#endif

            void alter_partition(string db_name, string tbl_name, Partition new_part);

#if SILVERLIGHT
      IAsyncResult Begin_alter_partition(AsyncCallback callback, object state, string db_name, string tbl_name, Partition new_part);
      void End_alter_partition(IAsyncResult asyncResult);
#endif

            void alter_partitions(string db_name, string tbl_name, List<Partition> new_parts);

#if SILVERLIGHT
      IAsyncResult Begin_alter_partitions(AsyncCallback callback, object state, string db_name, string tbl_name, List<Partition> new_parts);
      void End_alter_partitions(IAsyncResult asyncResult);
#endif

            void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context);

#if SILVERLIGHT
      IAsyncResult Begin_alter_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context);
      void End_alter_partition_with_environment_context(IAsyncResult asyncResult);
#endif

            void rename_partition(string db_name, string tbl_name, List<string> part_vals, Partition new_part);

#if SILVERLIGHT
      IAsyncResult Begin_rename_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, Partition new_part);
      void End_rename_partition(IAsyncResult asyncResult);
#endif

            bool partition_name_has_valid_characters(List<string> part_vals, bool throw_exception);

#if SILVERLIGHT
      IAsyncResult Begin_partition_name_has_valid_characters(AsyncCallback callback, object state, List<string> part_vals, bool throw_exception);
      bool End_partition_name_has_valid_characters(IAsyncResult asyncResult);
#endif

            string get_config_value(string name, string defaultValue);

#if SILVERLIGHT
      IAsyncResult Begin_get_config_value(AsyncCallback callback, object state, string name, string defaultValue);
      string End_get_config_value(IAsyncResult asyncResult);
#endif

            List<string> partition_name_to_vals(string part_name);

#if SILVERLIGHT
      IAsyncResult Begin_partition_name_to_vals(AsyncCallback callback, object state, string part_name);
      List<string> End_partition_name_to_vals(IAsyncResult asyncResult);
#endif

            Dictionary<string, string> partition_name_to_spec(string part_name);

#if SILVERLIGHT
      IAsyncResult Begin_partition_name_to_spec(AsyncCallback callback, object state, string part_name);
      Dictionary<string, string> End_partition_name_to_spec(IAsyncResult asyncResult);
#endif

            void markPartitionForEvent(string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType);

#if SILVERLIGHT
      IAsyncResult Begin_markPartitionForEvent(AsyncCallback callback, object state, string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType);
      void End_markPartitionForEvent(IAsyncResult asyncResult);
#endif

            bool isPartitionMarkedForEvent(string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType);

#if SILVERLIGHT
      IAsyncResult Begin_isPartitionMarkedForEvent(AsyncCallback callback, object state, string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType);
      bool End_isPartitionMarkedForEvent(IAsyncResult asyncResult);
#endif

            Index add_index(Index new_index, Table index_table);

#if SILVERLIGHT
      IAsyncResult Begin_add_index(AsyncCallback callback, object state, Index new_index, Table index_table);
      Index End_add_index(IAsyncResult asyncResult);
#endif

            void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx);

#if SILVERLIGHT
      IAsyncResult Begin_alter_index(AsyncCallback callback, object state, string dbname, string base_tbl_name, string idx_name, Index new_idx);
      void End_alter_index(IAsyncResult asyncResult);
#endif

            bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData);

#if SILVERLIGHT
      IAsyncResult Begin_drop_index_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string index_name, bool deleteData);
      bool End_drop_index_by_name(IAsyncResult asyncResult);
#endif

            Index get_index_by_name(string db_name, string tbl_name, string index_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_index_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string index_name);
      Index End_get_index_by_name(IAsyncResult asyncResult);
#endif

            List<Index> get_indexes(string db_name, string tbl_name, short max_indexes);

#if SILVERLIGHT
      IAsyncResult Begin_get_indexes(AsyncCallback callback, object state, string db_name, string tbl_name, short max_indexes);
      List<Index> End_get_indexes(IAsyncResult asyncResult);
#endif

            List<string> get_index_names(string db_name, string tbl_name, short max_indexes);

#if SILVERLIGHT
      IAsyncResult Begin_get_index_names(AsyncCallback callback, object state, string db_name, string tbl_name, short max_indexes);
      List<string> End_get_index_names(IAsyncResult asyncResult);
#endif

            bool update_table_column_statistics(ColumnStatistics stats_obj);

#if SILVERLIGHT
      IAsyncResult Begin_update_table_column_statistics(AsyncCallback callback, object state, ColumnStatistics stats_obj);
      bool End_update_table_column_statistics(IAsyncResult asyncResult);
#endif

            bool update_partition_column_statistics(ColumnStatistics stats_obj);

#if SILVERLIGHT
      IAsyncResult Begin_update_partition_column_statistics(AsyncCallback callback, object state, ColumnStatistics stats_obj);
      bool End_update_partition_column_statistics(IAsyncResult asyncResult);
#endif

            ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_table_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string col_name);
      ColumnStatistics End_get_table_column_statistics(IAsyncResult asyncResult);
#endif

            ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_partition_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, string col_name);
      ColumnStatistics End_get_partition_column_statistics(IAsyncResult asyncResult);
#endif

            TableStatsResult get_table_statistics_req(TableStatsRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_get_table_statistics_req(AsyncCallback callback, object state, TableStatsRequest request);
      TableStatsResult End_get_table_statistics_req(IAsyncResult asyncResult);
#endif

            PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_get_partitions_statistics_req(AsyncCallback callback, object state, PartitionsStatsRequest request);
      PartitionsStatsResult End_get_partitions_statistics_req(IAsyncResult asyncResult);
#endif

            AggrStats get_aggr_stats_for(PartitionsStatsRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_get_aggr_stats_for(AsyncCallback callback, object state, PartitionsStatsRequest request);
      AggrStats End_get_aggr_stats_for(IAsyncResult asyncResult);
#endif

            bool set_aggr_stats_for(SetPartitionsStatsRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_set_aggr_stats_for(AsyncCallback callback, object state, SetPartitionsStatsRequest request);
      bool End_set_aggr_stats_for(IAsyncResult asyncResult);
#endif

            bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name);

#if SILVERLIGHT
      IAsyncResult Begin_delete_partition_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, string col_name);
      bool End_delete_partition_column_statistics(IAsyncResult asyncResult);
#endif

            bool delete_table_column_statistics(string db_name, string tbl_name, string col_name);

#if SILVERLIGHT
      IAsyncResult Begin_delete_table_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string col_name);
      bool End_delete_table_column_statistics(IAsyncResult asyncResult);
#endif

            void create_function(Function func);

#if SILVERLIGHT
      IAsyncResult Begin_create_function(AsyncCallback callback, object state, Function func);
      void End_create_function(IAsyncResult asyncResult);
#endif

            void drop_function(string dbName, string funcName);

#if SILVERLIGHT
      IAsyncResult Begin_drop_function(AsyncCallback callback, object state, string dbName, string funcName);
      void End_drop_function(IAsyncResult asyncResult);
#endif

            void alter_function(string dbName, string funcName, Function newFunc);

#if SILVERLIGHT
      IAsyncResult Begin_alter_function(AsyncCallback callback, object state, string dbName, string funcName, Function newFunc);
      void End_alter_function(IAsyncResult asyncResult);
#endif

            List<string> get_functions(string dbName, string pattern);

#if SILVERLIGHT
      IAsyncResult Begin_get_functions(AsyncCallback callback, object state, string dbName, string pattern);
      List<string> End_get_functions(IAsyncResult asyncResult);
#endif

            Function get_function(string dbName, string funcName);

#if SILVERLIGHT
      IAsyncResult Begin_get_function(AsyncCallback callback, object state, string dbName, string funcName);
      Function End_get_function(IAsyncResult asyncResult);
#endif

            bool create_role(Role role);

#if SILVERLIGHT
      IAsyncResult Begin_create_role(AsyncCallback callback, object state, Role role);
      bool End_create_role(IAsyncResult asyncResult);
#endif

            bool drop_role(string role_name);

#if SILVERLIGHT
      IAsyncResult Begin_drop_role(AsyncCallback callback, object state, string role_name);
      bool End_drop_role(IAsyncResult asyncResult);
#endif

            List<string> get_role_names();

#if SILVERLIGHT
      IAsyncResult Begin_get_role_names(AsyncCallback callback, object state);
      List<string> End_get_role_names(IAsyncResult asyncResult);
#endif

            bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option);

#if SILVERLIGHT
      IAsyncResult Begin_grant_role(AsyncCallback callback, object state, string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option);
      bool End_grant_role(IAsyncResult asyncResult);
#endif

            bool revoke_role(string role_name, string principal_name, PrincipalType principal_type);

#if SILVERLIGHT
      IAsyncResult Begin_revoke_role(AsyncCallback callback, object state, string role_name, string principal_name, PrincipalType principal_type);
      bool End_revoke_role(IAsyncResult asyncResult);
#endif

            List<Role> list_roles(string principal_name, PrincipalType principal_type);

#if SILVERLIGHT
      IAsyncResult Begin_list_roles(AsyncCallback callback, object state, string principal_name, PrincipalType principal_type);
      List<Role> End_list_roles(IAsyncResult asyncResult);
#endif

            GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_grant_revoke_role(AsyncCallback callback, object state, GrantRevokeRoleRequest request);
      GrantRevokeRoleResponse End_grant_revoke_role(IAsyncResult asyncResult);
#endif

            GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_get_principals_in_role(AsyncCallback callback, object state, GetPrincipalsInRoleRequest request);
      GetPrincipalsInRoleResponse End_get_principals_in_role(IAsyncResult asyncResult);
#endif

            GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_get_role_grants_for_principal(AsyncCallback callback, object state, GetRoleGrantsForPrincipalRequest request);
      GetRoleGrantsForPrincipalResponse End_get_role_grants_for_principal(IAsyncResult asyncResult);
#endif

            PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name, List<string> group_names);

#if SILVERLIGHT
      IAsyncResult Begin_get_privilege_set(AsyncCallback callback, object state, HiveObjectRef hiveObject, string user_name, List<string> group_names);
      PrincipalPrivilegeSet End_get_privilege_set(IAsyncResult asyncResult);
#endif

            List<HiveObjectPrivilege> list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject);

#if SILVERLIGHT
      IAsyncResult Begin_list_privileges(AsyncCallback callback, object state, string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject);
      List<HiveObjectPrivilege> End_list_privileges(IAsyncResult asyncResult);
#endif

            bool grant_privileges(PrivilegeBag privileges);

#if SILVERLIGHT
      IAsyncResult Begin_grant_privileges(AsyncCallback callback, object state, PrivilegeBag privileges);
      bool End_grant_privileges(IAsyncResult asyncResult);
#endif

            bool revoke_privileges(PrivilegeBag privileges);

#if SILVERLIGHT
      IAsyncResult Begin_revoke_privileges(AsyncCallback callback, object state, PrivilegeBag privileges);
      bool End_revoke_privileges(IAsyncResult asyncResult);
#endif

            GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request);

#if SILVERLIGHT
      IAsyncResult Begin_grant_revoke_privileges(AsyncCallback callback, object state, GrantRevokePrivilegeRequest request);
      GrantRevokePrivilegeResponse End_grant_revoke_privileges(IAsyncResult asyncResult);
#endif

            List<string> set_ugi(string user_name, List<string> group_names);

#if SILVERLIGHT
      IAsyncResult Begin_set_ugi(AsyncCallback callback, object state, string user_name, List<string> group_names);
      List<string> End_set_ugi(IAsyncResult asyncResult);
#endif

            string get_delegation_token(string token_owner, string renewer_kerberos_principal_name);

#if SILVERLIGHT
      IAsyncResult Begin_get_delegation_token(AsyncCallback callback, object state, string token_owner, string renewer_kerberos_principal_name);
      string End_get_delegation_token(IAsyncResult asyncResult);
#endif

            long renew_delegation_token(string token_str_form);

#if SILVERLIGHT
      IAsyncResult Begin_renew_delegation_token(AsyncCallback callback, object state, string token_str_form);
      long End_renew_delegation_token(IAsyncResult asyncResult);
#endif

            void cancel_delegation_token(string token_str_form);

#if SILVERLIGHT
      IAsyncResult Begin_cancel_delegation_token(AsyncCallback callback, object state, string token_str_form);
      void End_cancel_delegation_token(IAsyncResult asyncResult);
#endif

            GetOpenTxnsResponse get_open_txns();

#if SILVERLIGHT
      IAsyncResult Begin_get_open_txns(AsyncCallback callback, object state);
      GetOpenTxnsResponse End_get_open_txns(IAsyncResult asyncResult);
#endif

            GetOpenTxnsInfoResponse get_open_txns_info();

#if SILVERLIGHT
      IAsyncResult Begin_get_open_txns_info(AsyncCallback callback, object state);
      GetOpenTxnsInfoResponse End_get_open_txns_info(IAsyncResult asyncResult);
#endif

            OpenTxnsResponse open_txns(OpenTxnRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_open_txns(AsyncCallback callback, object state, OpenTxnRequest rqst);
      OpenTxnsResponse End_open_txns(IAsyncResult asyncResult);
#endif

            void abort_txn(AbortTxnRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_abort_txn(AsyncCallback callback, object state, AbortTxnRequest rqst);
      void End_abort_txn(IAsyncResult asyncResult);
#endif

            void commit_txn(CommitTxnRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_commit_txn(AsyncCallback callback, object state, CommitTxnRequest rqst);
      void End_commit_txn(IAsyncResult asyncResult);
#endif

            LockResponse Lock(LockRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_lock(AsyncCallback callback, object state, LockRequest rqst);
      LockResponse End_lock(IAsyncResult asyncResult);
#endif

            LockResponse check_lock(CheckLockRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_check_lock(AsyncCallback callback, object state, CheckLockRequest rqst);
      LockResponse End_check_lock(IAsyncResult asyncResult);
#endif

            void unlock(UnlockRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_unlock(AsyncCallback callback, object state, UnlockRequest rqst);
      void End_unlock(IAsyncResult asyncResult);
#endif

            ShowLocksResponse show_locks(ShowLocksRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_show_locks(AsyncCallback callback, object state, ShowLocksRequest rqst);
      ShowLocksResponse End_show_locks(IAsyncResult asyncResult);
#endif

            void heartbeat(HeartbeatRequest ids);

#if SILVERLIGHT
      IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, HeartbeatRequest ids);
      void End_heartbeat(IAsyncResult asyncResult);
#endif

            HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns);

#if SILVERLIGHT
      IAsyncResult Begin_heartbeat_txn_range(AsyncCallback callback, object state, HeartbeatTxnRangeRequest txns);
      HeartbeatTxnRangeResponse End_heartbeat_txn_range(IAsyncResult asyncResult);
#endif

            void compact(CompactionRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_compact(AsyncCallback callback, object state, CompactionRequest rqst);
      void End_compact(IAsyncResult asyncResult);
#endif

            ShowCompactResponse show_compact(ShowCompactRequest rqst);

#if SILVERLIGHT
      IAsyncResult Begin_show_compact(AsyncCallback callback, object state, ShowCompactRequest rqst);
      ShowCompactResponse End_show_compact(IAsyncResult asyncResult);
#endif
        }

        /// <summary>
        /// This interface is live.
        /// </summary>
        public class Client : Hive.FacebookService.Client, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
            {
            }

#if SILVERLIGHT
      public IAsyncResult Begin_getMetaConf(AsyncCallback callback, object state, string key)
      {
        return send_getMetaConf(callback, state, key);
      }

      public string End_getMetaConf(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMetaConf();
      }

#endif

            public string getMetaConf(string key)
            {
#if !SILVERLIGHT
                send_getMetaConf(key);
                return recv_getMetaConf();

#else
        var asyncResult = Begin_getMetaConf(null, null, key);
        return End_getMetaConf(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_getMetaConf(AsyncCallback callback, object state, string key)
#else

            public void send_getMetaConf(string key)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getMetaConf", TMessageType.Call, seqid_));
                getMetaConf_args args = new getMetaConf_args();
                args.Key = key;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_getMetaConf()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getMetaConf_result result = new getMetaConf_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMetaConf failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_setMetaConf(AsyncCallback callback, object state, string key, string value)
      {
        return send_setMetaConf(callback, state, key, value);
      }

      public void End_setMetaConf(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setMetaConf();
      }

#endif

            public void setMetaConf(string key, string value)
            {
#if !SILVERLIGHT
                send_setMetaConf(key, value);
                recv_setMetaConf();

#else
        var asyncResult = Begin_setMetaConf(null, null, key, value);
        End_setMetaConf(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_setMetaConf(AsyncCallback callback, object state, string key, string value)
#else

            public void send_setMetaConf(string key, string value)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("setMetaConf", TMessageType.Call, seqid_));
                setMetaConf_args args = new setMetaConf_args();
                args.Key = key;
                args.Value = value;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_setMetaConf()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                setMetaConf_result result = new setMetaConf_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_create_database(AsyncCallback callback, object state, Database database)
      {
        return send_create_database(callback, state, database);
      }

      public void End_create_database(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_create_database();
      }

#endif

            public void create_database(Database database)
            {
#if !SILVERLIGHT
                send_create_database(database);
                recv_create_database();

#else
        var asyncResult = Begin_create_database(null, null, database);
        End_create_database(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_create_database(AsyncCallback callback, object state, Database database)
#else

            public void send_create_database(Database database)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("create_database", TMessageType.Call, seqid_));
                create_database_args args = new create_database_args();
                args.Database = database;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_create_database()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                create_database_result result = new create_database_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_database(AsyncCallback callback, object state, string name)
      {
        return send_get_database(callback, state, name);
      }

      public Database End_get_database(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_database();
      }

#endif

            public Database get_database(string name)
            {
#if !SILVERLIGHT
                send_get_database(name);
                return recv_get_database();

#else
        var asyncResult = Begin_get_database(null, null, name);
        return End_get_database(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_database(AsyncCallback callback, object state, string name)
#else

            public void send_get_database(string name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_database", TMessageType.Call, seqid_));
                get_database_args args = new get_database_args();
                args.Name = name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Database recv_get_database()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_database_result result = new get_database_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_database failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_database(AsyncCallback callback, object state, string name, bool deleteData, bool cascade)
      {
        return send_drop_database(callback, state, name, deleteData, cascade);
      }

      public void End_drop_database(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_drop_database();
      }

#endif

            public void drop_database(string name, bool deleteData, bool cascade)
            {
#if !SILVERLIGHT
                send_drop_database(name, deleteData, cascade);
                recv_drop_database();

#else
        var asyncResult = Begin_drop_database(null, null, name, deleteData, cascade);
        End_drop_database(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_database(AsyncCallback callback, object state, string name, bool deleteData, bool cascade)
#else

            public void send_drop_database(string name, bool deleteData, bool cascade)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_database", TMessageType.Call, seqid_));
                drop_database_args args = new drop_database_args();
                args.Name = name;
                args.DeleteData = deleteData;
                args.Cascade = cascade;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_drop_database()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_database_result result = new drop_database_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_databases(AsyncCallback callback, object state, string pattern)
      {
        return send_get_databases(callback, state, pattern);
      }

      public List<string> End_get_databases(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_databases();
      }

#endif

            public List<string> get_databases(string pattern)
            {
#if !SILVERLIGHT
                send_get_databases(pattern);
                return recv_get_databases();

#else
        var asyncResult = Begin_get_databases(null, null, pattern);
        return End_get_databases(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_databases(AsyncCallback callback, object state, string pattern)
#else

            public void send_get_databases(string pattern)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_databases", TMessageType.Call, seqid_));
                get_databases_args args = new get_databases_args();
                args.Pattern = pattern;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_databases()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_databases_result result = new get_databases_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_databases failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_all_databases(AsyncCallback callback, object state)
      {
        return send_get_all_databases(callback, state);
      }

      public List<string> End_get_all_databases(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_all_databases();
      }

#endif

            public List<string> get_all_databases()
            {
#if !SILVERLIGHT
                send_get_all_databases();
                return recv_get_all_databases();

#else
        var asyncResult = Begin_get_all_databases(null, null);
        return End_get_all_databases(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_all_databases(AsyncCallback callback, object state)
#else

            public void send_get_all_databases()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_all_databases", TMessageType.Call, seqid_));
                get_all_databases_args args = new get_all_databases_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_all_databases()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_all_databases_result result = new get_all_databases_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_all_databases failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_database(AsyncCallback callback, object state, string dbname, Database db)
      {
        return send_alter_database(callback, state, dbname, db);
      }

      public void End_alter_database(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_database();
      }

#endif

            public void alter_database(string dbname, Database db)
            {
#if !SILVERLIGHT
                send_alter_database(dbname, db);
                recv_alter_database();

#else
        var asyncResult = Begin_alter_database(null, null, dbname, db);
        End_alter_database(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_database(AsyncCallback callback, object state, string dbname, Database db)
#else

            public void send_alter_database(string dbname, Database db)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_database", TMessageType.Call, seqid_));
                alter_database_args args = new alter_database_args();
                args.Dbname = dbname;
                args.Db = db;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_database()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_database_result result = new alter_database_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_type(AsyncCallback callback, object state, string name)
      {
        return send_get_type(callback, state, name);
      }

      public Type End_get_type(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_type();
      }

#endif

            public Type get_type(string name)
            {
#if !SILVERLIGHT
                send_get_type(name);
                return recv_get_type();

#else
        var asyncResult = Begin_get_type(null, null, name);
        return End_get_type(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_type(AsyncCallback callback, object state, string name)
#else

            public void send_get_type(string name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_type", TMessageType.Call, seqid_));
                get_type_args args = new get_type_args();
                args.Name = name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Type recv_get_type()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_type_result result = new get_type_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_type failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_create_type(AsyncCallback callback, object state, Type type)
      {
        return send_create_type(callback, state, type);
      }

      public bool End_create_type(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_create_type();
      }

#endif

            public bool create_type(Type type)
            {
#if !SILVERLIGHT
                send_create_type(type);
                return recv_create_type();

#else
        var asyncResult = Begin_create_type(null, null, type);
        return End_create_type(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_create_type(AsyncCallback callback, object state, Type type)
#else

            public void send_create_type(Type type)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("create_type", TMessageType.Call, seqid_));
                create_type_args args = new create_type_args();
                args.Type = type;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_create_type()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                create_type_result result = new create_type_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_type failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_type(AsyncCallback callback, object state, string type)
      {
        return send_drop_type(callback, state, type);
      }

      public bool End_drop_type(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_type();
      }

#endif

            public bool drop_type(string type)
            {
#if !SILVERLIGHT
                send_drop_type(type);
                return recv_drop_type();

#else
        var asyncResult = Begin_drop_type(null, null, type);
        return End_drop_type(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_type(AsyncCallback callback, object state, string type)
#else

            public void send_drop_type(string type)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_type", TMessageType.Call, seqid_));
                drop_type_args args = new drop_type_args();
                args.Type = type;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_type()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_type_result result = new drop_type_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_type failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_type_all(AsyncCallback callback, object state, string name)
      {
        return send_get_type_all(callback, state, name);
      }

      public Dictionary<string, Type> End_get_type_all(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_type_all();
      }

#endif

            public Dictionary<string, Type> get_type_all(string name)
            {
#if !SILVERLIGHT
                send_get_type_all(name);
                return recv_get_type_all();

#else
        var asyncResult = Begin_get_type_all(null, null, name);
        return End_get_type_all(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_type_all(AsyncCallback callback, object state, string name)
#else

            public void send_get_type_all(string name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_type_all", TMessageType.Call, seqid_));
                get_type_all_args args = new get_type_all_args();
                args.Name = name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Dictionary<string, Type> recv_get_type_all()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_type_all_result result = new get_type_all_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_type_all failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_fields(AsyncCallback callback, object state, string db_name, string table_name)
      {
        return send_get_fields(callback, state, db_name, table_name);
      }

      public List<FieldSchema> End_get_fields(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_fields();
      }

#endif

            public List<FieldSchema> get_fields(string db_name, string table_name)
            {
#if !SILVERLIGHT
                send_get_fields(db_name, table_name);
                return recv_get_fields();

#else
        var asyncResult = Begin_get_fields(null, null, db_name, table_name);
        return End_get_fields(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_fields(AsyncCallback callback, object state, string db_name, string table_name)
#else

            public void send_get_fields(string db_name, string table_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_fields", TMessageType.Call, seqid_));
                get_fields_args args = new get_fields_args();
                args.Db_name = db_name;
                args.Table_name = table_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<FieldSchema> recv_get_fields()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_fields_result result = new get_fields_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_fields failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_schema(AsyncCallback callback, object state, string db_name, string table_name)
      {
        return send_get_schema(callback, state, db_name, table_name);
      }

      public List<FieldSchema> End_get_schema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_schema();
      }

#endif

            public List<FieldSchema> get_schema(string db_name, string table_name)
            {
#if !SILVERLIGHT
                send_get_schema(db_name, table_name);
                return recv_get_schema();

#else
        var asyncResult = Begin_get_schema(null, null, db_name, table_name);
        return End_get_schema(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_schema(AsyncCallback callback, object state, string db_name, string table_name)
#else

            public void send_get_schema(string db_name, string table_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_schema", TMessageType.Call, seqid_));
                get_schema_args args = new get_schema_args();
                args.Db_name = db_name;
                args.Table_name = table_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<FieldSchema> recv_get_schema()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_schema_result result = new get_schema_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_create_table(AsyncCallback callback, object state, Table tbl)
      {
        return send_create_table(callback, state, tbl);
      }

      public void End_create_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_create_table();
      }

#endif

            public void create_table(Table tbl)
            {
#if !SILVERLIGHT
                send_create_table(tbl);
                recv_create_table();

#else
        var asyncResult = Begin_create_table(null, null, tbl);
        End_create_table(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_create_table(AsyncCallback callback, object state, Table tbl)
#else

            public void send_create_table(Table tbl)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("create_table", TMessageType.Call, seqid_));
                create_table_args args = new create_table_args();
                args.Tbl = tbl;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_create_table()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                create_table_result result = new create_table_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_create_table_with_environment_context(AsyncCallback callback, object state, Table tbl, EnvironmentContext environment_context)
      {
        return send_create_table_with_environment_context(callback, state, tbl, environment_context);
      }

      public void End_create_table_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_create_table_with_environment_context();
      }

#endif

            public void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_create_table_with_environment_context(tbl, environment_context);
                recv_create_table_with_environment_context();

#else
        var asyncResult = Begin_create_table_with_environment_context(null, null, tbl, environment_context);
        End_create_table_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_create_table_with_environment_context(AsyncCallback callback, object state, Table tbl, EnvironmentContext environment_context)
#else

            public void send_create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("create_table_with_environment_context", TMessageType.Call, seqid_));
                create_table_with_environment_context_args args = new create_table_with_environment_context_args();
                args.Tbl = tbl;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_create_table_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                create_table_with_environment_context_result result = new create_table_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_table(AsyncCallback callback, object state, string dbname, string name, bool deleteData)
      {
        return send_drop_table(callback, state, dbname, name, deleteData);
      }

      public void End_drop_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_drop_table();
      }

#endif

            public void drop_table(string dbname, string name, bool deleteData)
            {
#if !SILVERLIGHT
                send_drop_table(dbname, name, deleteData);
                recv_drop_table();

#else
        var asyncResult = Begin_drop_table(null, null, dbname, name, deleteData);
        End_drop_table(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_table(AsyncCallback callback, object state, string dbname, string name, bool deleteData)
#else

            public void send_drop_table(string dbname, string name, bool deleteData)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_table", TMessageType.Call, seqid_));
                drop_table_args args = new drop_table_args();
                args.Dbname = dbname;
                args.Name = name;
                args.DeleteData = deleteData;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_drop_table()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_table_result result = new drop_table_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_table_with_environment_context(AsyncCallback callback, object state, string dbname, string name, bool deleteData, EnvironmentContext environment_context)
      {
        return send_drop_table_with_environment_context(callback, state, dbname, name, deleteData, environment_context);
      }

      public void End_drop_table_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_drop_table_with_environment_context();
      }

#endif

            public void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_drop_table_with_environment_context(dbname, name, deleteData, environment_context);
                recv_drop_table_with_environment_context();

#else
        var asyncResult = Begin_drop_table_with_environment_context(null, null, dbname, name, deleteData, environment_context);
        End_drop_table_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_table_with_environment_context(AsyncCallback callback, object state, string dbname, string name, bool deleteData, EnvironmentContext environment_context)
#else

            public void send_drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_table_with_environment_context", TMessageType.Call, seqid_));
                drop_table_with_environment_context_args args = new drop_table_with_environment_context_args();
                args.Dbname = dbname;
                args.Name = name;
                args.DeleteData = deleteData;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_drop_table_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_table_with_environment_context_result result = new drop_table_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_tables(AsyncCallback callback, object state, string db_name, string pattern)
      {
        return send_get_tables(callback, state, db_name, pattern);
      }

      public List<string> End_get_tables(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_tables();
      }

#endif

            public List<string> get_tables(string db_name, string pattern)
            {
#if !SILVERLIGHT
                send_get_tables(db_name, pattern);
                return recv_get_tables();

#else
        var asyncResult = Begin_get_tables(null, null, db_name, pattern);
        return End_get_tables(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_tables(AsyncCallback callback, object state, string db_name, string pattern)
#else

            public void send_get_tables(string db_name, string pattern)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_tables", TMessageType.Call, seqid_));
                get_tables_args args = new get_tables_args();
                args.Db_name = db_name;
                args.Pattern = pattern;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_tables()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_tables_result result = new get_tables_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tables failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_all_tables(AsyncCallback callback, object state, string db_name)
      {
        return send_get_all_tables(callback, state, db_name);
      }

      public List<string> End_get_all_tables(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_all_tables();
      }

#endif

            public List<string> get_all_tables(string db_name)
            {
#if !SILVERLIGHT
                send_get_all_tables(db_name);
                return recv_get_all_tables();

#else
        var asyncResult = Begin_get_all_tables(null, null, db_name);
        return End_get_all_tables(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_all_tables(AsyncCallback callback, object state, string db_name)
#else

            public void send_get_all_tables(string db_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_all_tables", TMessageType.Call, seqid_));
                get_all_tables_args args = new get_all_tables_args();
                args.Db_name = db_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_all_tables()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_all_tables_result result = new get_all_tables_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_all_tables failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_table(AsyncCallback callback, object state, string dbname, string tbl_name)
      {
        return send_get_table(callback, state, dbname, tbl_name);
      }

      public Table End_get_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table();
      }

#endif

            public Table get_table(string dbname, string tbl_name)
            {
#if !SILVERLIGHT
                send_get_table(dbname, tbl_name);
                return recv_get_table();

#else
        var asyncResult = Begin_get_table(null, null, dbname, tbl_name);
        return End_get_table(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_table(AsyncCallback callback, object state, string dbname, string tbl_name)
#else

            public void send_get_table(string dbname, string tbl_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_table", TMessageType.Call, seqid_));
                get_table_args args = new get_table_args();
                args.Dbname = dbname;
                args.Tbl_name = tbl_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Table recv_get_table()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_table_result result = new get_table_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_table_objects_by_name(AsyncCallback callback, object state, string dbname, List<string> tbl_names)
      {
        return send_get_table_objects_by_name(callback, state, dbname, tbl_names);
      }

      public List<Table> End_get_table_objects_by_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table_objects_by_name();
      }

#endif

            public List<Table> get_table_objects_by_name(string dbname, List<string> tbl_names)
            {
#if !SILVERLIGHT
                send_get_table_objects_by_name(dbname, tbl_names);
                return recv_get_table_objects_by_name();

#else
        var asyncResult = Begin_get_table_objects_by_name(null, null, dbname, tbl_names);
        return End_get_table_objects_by_name(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_table_objects_by_name(AsyncCallback callback, object state, string dbname, List<string> tbl_names)
#else

            public void send_get_table_objects_by_name(string dbname, List<string> tbl_names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_table_objects_by_name", TMessageType.Call, seqid_));
                get_table_objects_by_name_args args = new get_table_objects_by_name_args();
                args.Dbname = dbname;
                args.Tbl_names = tbl_names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Table> recv_get_table_objects_by_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_table_objects_by_name_result result = new get_table_objects_by_name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_objects_by_name failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_table_names_by_filter(AsyncCallback callback, object state, string dbname, string filter, short max_tables)
      {
        return send_get_table_names_by_filter(callback, state, dbname, filter, max_tables);
      }

      public List<string> End_get_table_names_by_filter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table_names_by_filter();
      }

#endif

            public List<string> get_table_names_by_filter(string dbname, string filter, short max_tables)
            {
#if !SILVERLIGHT
                send_get_table_names_by_filter(dbname, filter, max_tables);
                return recv_get_table_names_by_filter();

#else
        var asyncResult = Begin_get_table_names_by_filter(null, null, dbname, filter, max_tables);
        return End_get_table_names_by_filter(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_table_names_by_filter(AsyncCallback callback, object state, string dbname, string filter, short max_tables)
#else

            public void send_get_table_names_by_filter(string dbname, string filter, short max_tables)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_table_names_by_filter", TMessageType.Call, seqid_));
                get_table_names_by_filter_args args = new get_table_names_by_filter_args();
                args.Dbname = dbname;
                args.Filter = filter;
                args.Max_tables = max_tables;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_table_names_by_filter()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_table_names_by_filter_result result = new get_table_names_by_filter_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_names_by_filter failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_table(AsyncCallback callback, object state, string dbname, string tbl_name, Table new_tbl)
      {
        return send_alter_table(callback, state, dbname, tbl_name, new_tbl);
      }

      public void End_alter_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_table();
      }

#endif

            public void alter_table(string dbname, string tbl_name, Table new_tbl)
            {
#if !SILVERLIGHT
                send_alter_table(dbname, tbl_name, new_tbl);
                recv_alter_table();

#else
        var asyncResult = Begin_alter_table(null, null, dbname, tbl_name, new_tbl);
        End_alter_table(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_table(AsyncCallback callback, object state, string dbname, string tbl_name, Table new_tbl)
#else

            public void send_alter_table(string dbname, string tbl_name, Table new_tbl)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_table", TMessageType.Call, seqid_));
                alter_table_args args = new alter_table_args();
                args.Dbname = dbname;
                args.Tbl_name = tbl_name;
                args.New_tbl = new_tbl;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_table()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_table_result result = new alter_table_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_table_with_environment_context(AsyncCallback callback, object state, string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)
      {
        return send_alter_table_with_environment_context(callback, state, dbname, tbl_name, new_tbl, environment_context);
      }

      public void End_alter_table_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_table_with_environment_context();
      }

#endif

            public void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
                recv_alter_table_with_environment_context();

#else
        var asyncResult = Begin_alter_table_with_environment_context(null, null, dbname, tbl_name, new_tbl, environment_context);
        End_alter_table_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_table_with_environment_context(AsyncCallback callback, object state, string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)
#else

            public void send_alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_table_with_environment_context", TMessageType.Call, seqid_));
                alter_table_with_environment_context_args args = new alter_table_with_environment_context_args();
                args.Dbname = dbname;
                args.Tbl_name = tbl_name;
                args.New_tbl = new_tbl;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_table_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_table_with_environment_context_result result = new alter_table_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_add_partition(AsyncCallback callback, object state, Partition new_part)
      {
        return send_add_partition(callback, state, new_part);
      }

      public Partition End_add_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add_partition();
      }

#endif

            public Partition add_partition(Partition new_part)
            {
#if !SILVERLIGHT
                send_add_partition(new_part);
                return recv_add_partition();

#else
        var asyncResult = Begin_add_partition(null, null, new_part);
        return End_add_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_add_partition(AsyncCallback callback, object state, Partition new_part)
#else

            public void send_add_partition(Partition new_part)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("add_partition", TMessageType.Call, seqid_));
                add_partition_args args = new add_partition_args();
                args.New_part = new_part;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_add_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                add_partition_result result = new add_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_partition failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_add_partition_with_environment_context(AsyncCallback callback, object state, Partition new_part, EnvironmentContext environment_context)
      {
        return send_add_partition_with_environment_context(callback, state, new_part, environment_context);
      }

      public Partition End_add_partition_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add_partition_with_environment_context();
      }

#endif

            public Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_add_partition_with_environment_context(new_part, environment_context);
                return recv_add_partition_with_environment_context();

#else
        var asyncResult = Begin_add_partition_with_environment_context(null, null, new_part, environment_context);
        return End_add_partition_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_add_partition_with_environment_context(AsyncCallback callback, object state, Partition new_part, EnvironmentContext environment_context)
#else

            public void send_add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("add_partition_with_environment_context", TMessageType.Call, seqid_));
                add_partition_with_environment_context_args args = new add_partition_with_environment_context_args();
                args.New_part = new_part;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_add_partition_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                add_partition_with_environment_context_result result = new add_partition_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_partition_with_environment_context failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_add_partitions(AsyncCallback callback, object state, List<Partition> new_parts)
      {
        return send_add_partitions(callback, state, new_parts);
      }

      public int End_add_partitions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add_partitions();
      }

#endif

            public int add_partitions(List<Partition> new_parts)
            {
#if !SILVERLIGHT
                send_add_partitions(new_parts);
                return recv_add_partitions();

#else
        var asyncResult = Begin_add_partitions(null, null, new_parts);
        return End_add_partitions(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_add_partitions(AsyncCallback callback, object state, List<Partition> new_parts)
#else

            public void send_add_partitions(List<Partition> new_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("add_partitions", TMessageType.Call, seqid_));
                add_partitions_args args = new add_partitions_args();
                args.New_parts = new_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public int recv_add_partitions()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                add_partitions_result result = new add_partitions_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_partitions failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_append_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals)
      {
        return send_append_partition(callback, state, db_name, tbl_name, part_vals);
      }

      public Partition End_append_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_append_partition();
      }

#endif

            public Partition append_partition(string db_name, string tbl_name, List<string> part_vals)
            {
#if !SILVERLIGHT
                send_append_partition(db_name, tbl_name, part_vals);
                return recv_append_partition();

#else
        var asyncResult = Begin_append_partition(null, null, db_name, tbl_name, part_vals);
        return End_append_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_append_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals)
#else

            public void send_append_partition(string db_name, string tbl_name, List<string> part_vals)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("append_partition", TMessageType.Call, seqid_));
                append_partition_args args = new append_partition_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_append_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                append_partition_result result = new append_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append_partition failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_add_partitions_req(AsyncCallback callback, object state, AddPartitionsRequest request)
      {
        return send_add_partitions_req(callback, state, request);
      }

      public AddPartitionsResult End_add_partitions_req(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add_partitions_req();
      }

#endif

            public AddPartitionsResult add_partitions_req(AddPartitionsRequest request)
            {
#if !SILVERLIGHT
                send_add_partitions_req(request);
                return recv_add_partitions_req();

#else
        var asyncResult = Begin_add_partitions_req(null, null, request);
        return End_add_partitions_req(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_add_partitions_req(AsyncCallback callback, object state, AddPartitionsRequest request)
#else

            public void send_add_partitions_req(AddPartitionsRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("add_partitions_req", TMessageType.Call, seqid_));
                add_partitions_req_args args = new add_partitions_req_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public AddPartitionsResult recv_add_partitions_req()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                add_partitions_req_result result = new add_partitions_req_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_partitions_req failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_append_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, EnvironmentContext environment_context)
      {
        return send_append_partition_with_environment_context(callback, state, db_name, tbl_name, part_vals, environment_context);
      }

      public Partition End_append_partition_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_append_partition_with_environment_context();
      }

#endif

            public Partition append_partition_with_environment_context(string db_name, string tbl_name, List<string> part_vals, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context);
                return recv_append_partition_with_environment_context();

#else
        var asyncResult = Begin_append_partition_with_environment_context(null, null, db_name, tbl_name, part_vals, environment_context);
        return End_append_partition_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_append_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, EnvironmentContext environment_context)
#else

            public void send_append_partition_with_environment_context(string db_name, string tbl_name, List<string> part_vals, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("append_partition_with_environment_context", TMessageType.Call, seqid_));
                append_partition_with_environment_context_args args = new append_partition_with_environment_context_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_append_partition_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                append_partition_with_environment_context_result result = new append_partition_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append_partition_with_environment_context failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_append_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name)
      {
        return send_append_partition_by_name(callback, state, db_name, tbl_name, part_name);
      }

      public Partition End_append_partition_by_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_append_partition_by_name();
      }

#endif

            public Partition append_partition_by_name(string db_name, string tbl_name, string part_name)
            {
#if !SILVERLIGHT
                send_append_partition_by_name(db_name, tbl_name, part_name);
                return recv_append_partition_by_name();

#else
        var asyncResult = Begin_append_partition_by_name(null, null, db_name, tbl_name, part_name);
        return End_append_partition_by_name(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_append_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name)
#else

            public void send_append_partition_by_name(string db_name, string tbl_name, string part_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("append_partition_by_name", TMessageType.Call, seqid_));
                append_partition_by_name_args args = new append_partition_by_name_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_append_partition_by_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                append_partition_by_name_result result = new append_partition_by_name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append_partition_by_name failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_append_partition_by_name_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)
      {
        return send_append_partition_by_name_with_environment_context(callback, state, db_name, tbl_name, part_name, environment_context);
      }

      public Partition End_append_partition_by_name_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_append_partition_by_name_with_environment_context();
      }

#endif

            public Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context);
                return recv_append_partition_by_name_with_environment_context();

#else
        var asyncResult = Begin_append_partition_by_name_with_environment_context(null, null, db_name, tbl_name, part_name, environment_context);
        return End_append_partition_by_name_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_append_partition_by_name_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)
#else

            public void send_append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("append_partition_by_name_with_environment_context", TMessageType.Call, seqid_));
                append_partition_by_name_with_environment_context_args args = new append_partition_by_name_with_environment_context_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_append_partition_by_name_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                append_partition_by_name_with_environment_context_result result = new append_partition_by_name_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append_partition_by_name_with_environment_context failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, bool deleteData)
      {
        return send_drop_partition(callback, state, db_name, tbl_name, part_vals, deleteData);
      }

      public bool End_drop_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_partition();
      }

#endif

            public bool drop_partition(string db_name, string tbl_name, List<string> part_vals, bool deleteData)
            {
#if !SILVERLIGHT
                send_drop_partition(db_name, tbl_name, part_vals, deleteData);
                return recv_drop_partition();

#else
        var asyncResult = Begin_drop_partition(null, null, db_name, tbl_name, part_vals, deleteData);
        return End_drop_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, bool deleteData)
#else

            public void send_drop_partition(string db_name, string tbl_name, List<string> part_vals, bool deleteData)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_partition", TMessageType.Call, seqid_));
                drop_partition_args args = new drop_partition_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.DeleteData = deleteData;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_partition_result result = new drop_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partition failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, bool deleteData, EnvironmentContext environment_context)
      {
        return send_drop_partition_with_environment_context(callback, state, db_name, tbl_name, part_vals, deleteData, environment_context);
      }

      public bool End_drop_partition_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_partition_with_environment_context();
      }

#endif

            public bool drop_partition_with_environment_context(string db_name, string tbl_name, List<string> part_vals, bool deleteData, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context);
                return recv_drop_partition_with_environment_context();

#else
        var asyncResult = Begin_drop_partition_with_environment_context(null, null, db_name, tbl_name, part_vals, deleteData, environment_context);
        return End_drop_partition_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, bool deleteData, EnvironmentContext environment_context)
#else

            public void send_drop_partition_with_environment_context(string db_name, string tbl_name, List<string> part_vals, bool deleteData, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_partition_with_environment_context", TMessageType.Call, seqid_));
                drop_partition_with_environment_context_args args = new drop_partition_with_environment_context_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.DeleteData = deleteData;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_partition_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_partition_with_environment_context_result result = new drop_partition_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partition_with_environment_context failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, bool deleteData)
      {
        return send_drop_partition_by_name(callback, state, db_name, tbl_name, part_name, deleteData);
      }

      public bool End_drop_partition_by_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_partition_by_name();
      }

#endif

            public bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)
            {
#if !SILVERLIGHT
                send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
                return recv_drop_partition_by_name();

#else
        var asyncResult = Begin_drop_partition_by_name(null, null, db_name, tbl_name, part_name, deleteData);
        return End_drop_partition_by_name(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, bool deleteData)
#else

            public void send_drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_partition_by_name", TMessageType.Call, seqid_));
                drop_partition_by_name_args args = new drop_partition_by_name_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.DeleteData = deleteData;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_partition_by_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_partition_by_name_result result = new drop_partition_by_name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partition_by_name failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_partition_by_name_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)
      {
        return send_drop_partition_by_name_with_environment_context(callback, state, db_name, tbl_name, part_name, deleteData, environment_context);
      }

      public bool End_drop_partition_by_name_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_partition_by_name_with_environment_context();
      }

#endif

            public bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context);
                return recv_drop_partition_by_name_with_environment_context();

#else
        var asyncResult = Begin_drop_partition_by_name_with_environment_context(null, null, db_name, tbl_name, part_name, deleteData, environment_context);
        return End_drop_partition_by_name_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_partition_by_name_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)
#else

            public void send_drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_partition_by_name_with_environment_context", TMessageType.Call, seqid_));
                drop_partition_by_name_with_environment_context_args args = new drop_partition_by_name_with_environment_context_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.DeleteData = deleteData;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_partition_by_name_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_partition_by_name_with_environment_context_result result = new drop_partition_by_name_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partition_by_name_with_environment_context failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_partitions_req(AsyncCallback callback, object state, DropPartitionsRequest req)
      {
        return send_drop_partitions_req(callback, state, req);
      }

      public DropPartitionsResult End_drop_partitions_req(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_partitions_req();
      }

#endif

            public DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)
            {
#if !SILVERLIGHT
                send_drop_partitions_req(req);
                return recv_drop_partitions_req();

#else
        var asyncResult = Begin_drop_partitions_req(null, null, req);
        return End_drop_partitions_req(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_partitions_req(AsyncCallback callback, object state, DropPartitionsRequest req)
#else

            public void send_drop_partitions_req(DropPartitionsRequest req)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_partitions_req", TMessageType.Call, seqid_));
                drop_partitions_req_args args = new drop_partitions_req_args();
                args.Req = req;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public DropPartitionsResult recv_drop_partitions_req()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_partitions_req_result result = new drop_partitions_req_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partitions_req failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals)
      {
        return send_get_partition(callback, state, db_name, tbl_name, part_vals);
      }

      public Partition End_get_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partition();
      }

#endif

            public Partition get_partition(string db_name, string tbl_name, List<string> part_vals)
            {
#if !SILVERLIGHT
                send_get_partition(db_name, tbl_name, part_vals);
                return recv_get_partition();

#else
        var asyncResult = Begin_get_partition(null, null, db_name, tbl_name, part_vals);
        return End_get_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals)
#else

            public void send_get_partition(string db_name, string tbl_name, List<string> part_vals)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partition", TMessageType.Call, seqid_));
                get_partition_args args = new get_partition_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_get_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partition_result result = new get_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_exchange_partition(AsyncCallback callback, object state, Dictionary<string, string> partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)
      {
        return send_exchange_partition(callback, state, partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
      }

      public Partition End_exchange_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_exchange_partition();
      }

#endif

            public Partition exchange_partition(Dictionary<string, string> partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)
            {
#if !SILVERLIGHT
                send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
                return recv_exchange_partition();

#else
        var asyncResult = Begin_exchange_partition(null, null, partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
        return End_exchange_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_exchange_partition(AsyncCallback callback, object state, Dictionary<string, string> partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)
#else

            public void send_exchange_partition(Dictionary<string, string> partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("exchange_partition", TMessageType.Call, seqid_));
                exchange_partition_args args = new exchange_partition_args();
                args.PartitionSpecs = partitionSpecs;
                args.Source_db = source_db;
                args.Source_table_name = source_table_name;
                args.Dest_db = dest_db;
                args.Dest_table_name = dest_table_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_exchange_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                exchange_partition_result result = new exchange_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exchange_partition failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partition_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names)
      {
        return send_get_partition_with_auth(callback, state, db_name, tbl_name, part_vals, user_name, group_names);
      }

      public Partition End_get_partition_with_auth(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partition_with_auth();
      }

#endif

            public Partition get_partition_with_auth(string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names)
            {
#if !SILVERLIGHT
                send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
                return recv_get_partition_with_auth();

#else
        var asyncResult = Begin_get_partition_with_auth(null, null, db_name, tbl_name, part_vals, user_name, group_names);
        return End_get_partition_with_auth(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partition_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names)
#else

            public void send_get_partition_with_auth(string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partition_with_auth", TMessageType.Call, seqid_));
                get_partition_with_auth_args args = new get_partition_with_auth_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.User_name = user_name;
                args.Group_names = group_names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_get_partition_with_auth()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partition_with_auth_result result = new get_partition_with_auth_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_with_auth failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name)
      {
        return send_get_partition_by_name(callback, state, db_name, tbl_name, part_name);
      }

      public Partition End_get_partition_by_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partition_by_name();
      }

#endif

            public Partition get_partition_by_name(string db_name, string tbl_name, string part_name)
            {
#if !SILVERLIGHT
                send_get_partition_by_name(db_name, tbl_name, part_name);
                return recv_get_partition_by_name();

#else
        var asyncResult = Begin_get_partition_by_name(null, null, db_name, tbl_name, part_name);
        return End_get_partition_by_name(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partition_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name)
#else

            public void send_get_partition_by_name(string db_name, string tbl_name, string part_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partition_by_name", TMessageType.Call, seqid_));
                get_partition_by_name_args args = new get_partition_by_name_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Partition recv_get_partition_by_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partition_by_name_result result = new get_partition_by_name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_by_name failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts)
      {
        return send_get_partitions(callback, state, db_name, tbl_name, max_parts);
      }

      public List<Partition> End_get_partitions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions();
      }

#endif

            public List<Partition> get_partitions(string db_name, string tbl_name, short max_parts)
            {
#if !SILVERLIGHT
                send_get_partitions(db_name, tbl_name, max_parts);
                return recv_get_partitions();

#else
        var asyncResult = Begin_get_partitions(null, null, db_name, tbl_name, max_parts);
        return End_get_partitions(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts)
#else

            public void send_get_partitions(string db_name, string tbl_name, short max_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions", TMessageType.Call, seqid_));
                get_partitions_args args = new get_partitions_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Max_parts = max_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Partition> recv_get_partitions()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_result result = new get_partitions_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names)
      {
        return send_get_partitions_with_auth(callback, state, db_name, tbl_name, max_parts, user_name, group_names);
      }

      public List<Partition> End_get_partitions_with_auth(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_with_auth();
      }

#endif

            public List<Partition> get_partitions_with_auth(string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names)
            {
#if !SILVERLIGHT
                send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
                return recv_get_partitions_with_auth();

#else
        var asyncResult = Begin_get_partitions_with_auth(null, null, db_name, tbl_name, max_parts, user_name, group_names);
        return End_get_partitions_with_auth(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names)
#else

            public void send_get_partitions_with_auth(string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_with_auth", TMessageType.Call, seqid_));
                get_partitions_with_auth_args args = new get_partitions_with_auth_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Max_parts = max_parts;
                args.User_name = user_name;
                args.Group_names = group_names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Partition> recv_get_partitions_with_auth()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_with_auth_result result = new get_partitions_with_auth_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_with_auth failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partition_names(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts)
      {
        return send_get_partition_names(callback, state, db_name, tbl_name, max_parts);
      }

      public List<string> End_get_partition_names(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partition_names();
      }

#endif

            public List<string> get_partition_names(string db_name, string tbl_name, short max_parts)
            {
#if !SILVERLIGHT
                send_get_partition_names(db_name, tbl_name, max_parts);
                return recv_get_partition_names();

#else
        var asyncResult = Begin_get_partition_names(null, null, db_name, tbl_name, max_parts);
        return End_get_partition_names(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partition_names(AsyncCallback callback, object state, string db_name, string tbl_name, short max_parts)
#else

            public void send_get_partition_names(string db_name, string tbl_name, short max_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partition_names", TMessageType.Call, seqid_));
                get_partition_names_args args = new get_partition_names_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Max_parts = max_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_partition_names()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partition_names_result result = new get_partition_names_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_names failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_ps(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts)
      {
        return send_get_partitions_ps(callback, state, db_name, tbl_name, part_vals, max_parts);
      }

      public List<Partition> End_get_partitions_ps(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_ps();
      }

#endif

            public List<Partition> get_partitions_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
            {
#if !SILVERLIGHT
                send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
                return recv_get_partitions_ps();

#else
        var asyncResult = Begin_get_partitions_ps(null, null, db_name, tbl_name, part_vals, max_parts);
        return End_get_partitions_ps(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_ps(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts)
#else

            public void send_get_partitions_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_ps", TMessageType.Call, seqid_));
                get_partitions_ps_args args = new get_partitions_ps_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.Max_parts = max_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Partition> recv_get_partitions_ps()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_ps_result result = new get_partitions_ps_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_ps failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_ps_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names)
      {
        return send_get_partitions_ps_with_auth(callback, state, db_name, tbl_name, part_vals, max_parts, user_name, group_names);
      }

      public List<Partition> End_get_partitions_ps_with_auth(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_ps_with_auth();
      }

#endif

            public List<Partition> get_partitions_ps_with_auth(string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names)
            {
#if !SILVERLIGHT
                send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
                return recv_get_partitions_ps_with_auth();

#else
        var asyncResult = Begin_get_partitions_ps_with_auth(null, null, db_name, tbl_name, part_vals, max_parts, user_name, group_names);
        return End_get_partitions_ps_with_auth(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_ps_with_auth(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names)
#else

            public void send_get_partitions_ps_with_auth(string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_ps_with_auth", TMessageType.Call, seqid_));
                get_partitions_ps_with_auth_args args = new get_partitions_ps_with_auth_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.Max_parts = max_parts;
                args.User_name = user_name;
                args.Group_names = group_names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Partition> recv_get_partitions_ps_with_auth()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_ps_with_auth_result result = new get_partitions_ps_with_auth_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_ps_with_auth failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partition_names_ps(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts)
      {
        return send_get_partition_names_ps(callback, state, db_name, tbl_name, part_vals, max_parts);
      }

      public List<string> End_get_partition_names_ps(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partition_names_ps();
      }

#endif

            public List<string> get_partition_names_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
            {
#if !SILVERLIGHT
                send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
                return recv_get_partition_names_ps();

#else
        var asyncResult = Begin_get_partition_names_ps(null, null, db_name, tbl_name, part_vals, max_parts);
        return End_get_partition_names_ps(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partition_names_ps(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, short max_parts)
#else

            public void send_get_partition_names_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partition_names_ps", TMessageType.Call, seqid_));
                get_partition_names_ps_args args = new get_partition_names_ps_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.Max_parts = max_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_partition_names_ps()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partition_names_ps_result result = new get_partition_names_ps_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_names_ps failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_by_filter(AsyncCallback callback, object state, string db_name, string tbl_name, string filter, short max_parts)
      {
        return send_get_partitions_by_filter(callback, state, db_name, tbl_name, filter, max_parts);
      }

      public List<Partition> End_get_partitions_by_filter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_by_filter();
      }

#endif

            public List<Partition> get_partitions_by_filter(string db_name, string tbl_name, string filter, short max_parts)
            {
#if !SILVERLIGHT
                send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
                return recv_get_partitions_by_filter();

#else
        var asyncResult = Begin_get_partitions_by_filter(null, null, db_name, tbl_name, filter, max_parts);
        return End_get_partitions_by_filter(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_by_filter(AsyncCallback callback, object state, string db_name, string tbl_name, string filter, short max_parts)
#else

            public void send_get_partitions_by_filter(string db_name, string tbl_name, string filter, short max_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.Call, seqid_));
                get_partitions_by_filter_args args = new get_partitions_by_filter_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Filter = filter;
                args.Max_parts = max_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Partition> recv_get_partitions_by_filter()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_by_filter_result result = new get_partitions_by_filter_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_by_filter failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_by_expr(AsyncCallback callback, object state, PartitionsByExprRequest req)
      {
        return send_get_partitions_by_expr(callback, state, req);
      }

      public PartitionsByExprResult End_get_partitions_by_expr(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_by_expr();
      }

#endif

            public PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)
            {
#if !SILVERLIGHT
                send_get_partitions_by_expr(req);
                return recv_get_partitions_by_expr();

#else
        var asyncResult = Begin_get_partitions_by_expr(null, null, req);
        return End_get_partitions_by_expr(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_by_expr(AsyncCallback callback, object state, PartitionsByExprRequest req)
#else

            public void send_get_partitions_by_expr(PartitionsByExprRequest req)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_by_expr", TMessageType.Call, seqid_));
                get_partitions_by_expr_args args = new get_partitions_by_expr_args();
                args.Req = req;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public PartitionsByExprResult recv_get_partitions_by_expr()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_by_expr_result result = new get_partitions_by_expr_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_by_expr failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_by_names(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> names)
      {
        return send_get_partitions_by_names(callback, state, db_name, tbl_name, names);
      }

      public List<Partition> End_get_partitions_by_names(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_by_names();
      }

#endif

            public List<Partition> get_partitions_by_names(string db_name, string tbl_name, List<string> names)
            {
#if !SILVERLIGHT
                send_get_partitions_by_names(db_name, tbl_name, names);
                return recv_get_partitions_by_names();

#else
        var asyncResult = Begin_get_partitions_by_names(null, null, db_name, tbl_name, names);
        return End_get_partitions_by_names(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_by_names(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> names)
#else

            public void send_get_partitions_by_names(string db_name, string tbl_name, List<string> names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_by_names", TMessageType.Call, seqid_));
                get_partitions_by_names_args args = new get_partitions_by_names_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Names = names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Partition> recv_get_partitions_by_names()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_by_names_result result = new get_partitions_by_names_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_by_names failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_partition(AsyncCallback callback, object state, string db_name, string tbl_name, Partition new_part)
      {
        return send_alter_partition(callback, state, db_name, tbl_name, new_part);
      }

      public void End_alter_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_partition();
      }

#endif

            public void alter_partition(string db_name, string tbl_name, Partition new_part)
            {
#if !SILVERLIGHT
                send_alter_partition(db_name, tbl_name, new_part);
                recv_alter_partition();

#else
        var asyncResult = Begin_alter_partition(null, null, db_name, tbl_name, new_part);
        End_alter_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_partition(AsyncCallback callback, object state, string db_name, string tbl_name, Partition new_part)
#else

            public void send_alter_partition(string db_name, string tbl_name, Partition new_part)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_partition", TMessageType.Call, seqid_));
                alter_partition_args args = new alter_partition_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.New_part = new_part;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_partition_result result = new alter_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_partitions(AsyncCallback callback, object state, string db_name, string tbl_name, List<Partition> new_parts)
      {
        return send_alter_partitions(callback, state, db_name, tbl_name, new_parts);
      }

      public void End_alter_partitions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_partitions();
      }

#endif

            public void alter_partitions(string db_name, string tbl_name, List<Partition> new_parts)
            {
#if !SILVERLIGHT
                send_alter_partitions(db_name, tbl_name, new_parts);
                recv_alter_partitions();

#else
        var asyncResult = Begin_alter_partitions(null, null, db_name, tbl_name, new_parts);
        End_alter_partitions(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_partitions(AsyncCallback callback, object state, string db_name, string tbl_name, List<Partition> new_parts)
#else

            public void send_alter_partitions(string db_name, string tbl_name, List<Partition> new_parts)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_partitions", TMessageType.Call, seqid_));
                alter_partitions_args args = new alter_partitions_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.New_parts = new_parts;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_partitions()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_partitions_result result = new alter_partitions_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)
      {
        return send_alter_partition_with_environment_context(callback, state, db_name, tbl_name, new_part, environment_context);
      }

      public void End_alter_partition_with_environment_context(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_partition_with_environment_context();
      }

#endif

            public void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)
            {
#if !SILVERLIGHT
                send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
                recv_alter_partition_with_environment_context();

#else
        var asyncResult = Begin_alter_partition_with_environment_context(null, null, db_name, tbl_name, new_part, environment_context);
        End_alter_partition_with_environment_context(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_partition_with_environment_context(AsyncCallback callback, object state, string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)
#else

            public void send_alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_partition_with_environment_context", TMessageType.Call, seqid_));
                alter_partition_with_environment_context_args args = new alter_partition_with_environment_context_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.New_part = new_part;
                args.Environment_context = environment_context;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_partition_with_environment_context()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_partition_with_environment_context_result result = new alter_partition_with_environment_context_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_rename_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, Partition new_part)
      {
        return send_rename_partition(callback, state, db_name, tbl_name, part_vals, new_part);
      }

      public void End_rename_partition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rename_partition();
      }

#endif

            public void rename_partition(string db_name, string tbl_name, List<string> part_vals, Partition new_part)
            {
#if !SILVERLIGHT
                send_rename_partition(db_name, tbl_name, part_vals, new_part);
                recv_rename_partition();

#else
        var asyncResult = Begin_rename_partition(null, null, db_name, tbl_name, part_vals, new_part);
        End_rename_partition(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_rename_partition(AsyncCallback callback, object state, string db_name, string tbl_name, List<string> part_vals, Partition new_part)
#else

            public void send_rename_partition(string db_name, string tbl_name, List<string> part_vals, Partition new_part)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("rename_partition", TMessageType.Call, seqid_));
                rename_partition_args args = new rename_partition_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.New_part = new_part;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_rename_partition()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                rename_partition_result result = new rename_partition_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_partition_name_has_valid_characters(AsyncCallback callback, object state, List<string> part_vals, bool throw_exception)
      {
        return send_partition_name_has_valid_characters(callback, state, part_vals, throw_exception);
      }

      public bool End_partition_name_has_valid_characters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_partition_name_has_valid_characters();
      }

#endif

            public bool partition_name_has_valid_characters(List<string> part_vals, bool throw_exception)
            {
#if !SILVERLIGHT
                send_partition_name_has_valid_characters(part_vals, throw_exception);
                return recv_partition_name_has_valid_characters();

#else
        var asyncResult = Begin_partition_name_has_valid_characters(null, null, part_vals, throw_exception);
        return End_partition_name_has_valid_characters(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_partition_name_has_valid_characters(AsyncCallback callback, object state, List<string> part_vals, bool throw_exception)
#else

            public void send_partition_name_has_valid_characters(List<string> part_vals, bool throw_exception)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("partition_name_has_valid_characters", TMessageType.Call, seqid_));
                partition_name_has_valid_characters_args args = new partition_name_has_valid_characters_args();
                args.Part_vals = part_vals;
                args.Throw_exception = throw_exception;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_partition_name_has_valid_characters()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                partition_name_has_valid_characters_result result = new partition_name_has_valid_characters_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "partition_name_has_valid_characters failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_config_value(AsyncCallback callback, object state, string name, string defaultValue)
      {
        return send_get_config_value(callback, state, name, defaultValue);
      }

      public string End_get_config_value(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_config_value();
      }

#endif

            public string get_config_value(string name, string defaultValue)
            {
#if !SILVERLIGHT
                send_get_config_value(name, defaultValue);
                return recv_get_config_value();

#else
        var asyncResult = Begin_get_config_value(null, null, name, defaultValue);
        return End_get_config_value(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_config_value(AsyncCallback callback, object state, string name, string defaultValue)
#else

            public void send_get_config_value(string name, string defaultValue)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_config_value", TMessageType.Call, seqid_));
                get_config_value_args args = new get_config_value_args();
                args.Name = name;
                args.DefaultValue = defaultValue;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_get_config_value()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_config_value_result result = new get_config_value_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_config_value failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_partition_name_to_vals(AsyncCallback callback, object state, string part_name)
      {
        return send_partition_name_to_vals(callback, state, part_name);
      }

      public List<string> End_partition_name_to_vals(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_partition_name_to_vals();
      }

#endif

            public List<string> partition_name_to_vals(string part_name)
            {
#if !SILVERLIGHT
                send_partition_name_to_vals(part_name);
                return recv_partition_name_to_vals();

#else
        var asyncResult = Begin_partition_name_to_vals(null, null, part_name);
        return End_partition_name_to_vals(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_partition_name_to_vals(AsyncCallback callback, object state, string part_name)
#else

            public void send_partition_name_to_vals(string part_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("partition_name_to_vals", TMessageType.Call, seqid_));
                partition_name_to_vals_args args = new partition_name_to_vals_args();
                args.Part_name = part_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_partition_name_to_vals()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                partition_name_to_vals_result result = new partition_name_to_vals_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "partition_name_to_vals failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_partition_name_to_spec(AsyncCallback callback, object state, string part_name)
      {
        return send_partition_name_to_spec(callback, state, part_name);
      }

      public Dictionary<string, string> End_partition_name_to_spec(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_partition_name_to_spec();
      }

#endif

            public Dictionary<string, string> partition_name_to_spec(string part_name)
            {
#if !SILVERLIGHT
                send_partition_name_to_spec(part_name);
                return recv_partition_name_to_spec();

#else
        var asyncResult = Begin_partition_name_to_spec(null, null, part_name);
        return End_partition_name_to_spec(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_partition_name_to_spec(AsyncCallback callback, object state, string part_name)
#else

            public void send_partition_name_to_spec(string part_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("partition_name_to_spec", TMessageType.Call, seqid_));
                partition_name_to_spec_args args = new partition_name_to_spec_args();
                args.Part_name = part_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Dictionary<string, string> recv_partition_name_to_spec()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                partition_name_to_spec_result result = new partition_name_to_spec_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "partition_name_to_spec failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_markPartitionForEvent(AsyncCallback callback, object state, string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
      {
        return send_markPartitionForEvent(callback, state, db_name, tbl_name, part_vals, eventType);
      }

      public void End_markPartitionForEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_markPartitionForEvent();
      }

#endif

            public void markPartitionForEvent(string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
            {
#if !SILVERLIGHT
                send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
                recv_markPartitionForEvent();

#else
        var asyncResult = Begin_markPartitionForEvent(null, null, db_name, tbl_name, part_vals, eventType);
        End_markPartitionForEvent(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_markPartitionForEvent(AsyncCallback callback, object state, string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
#else

            public void send_markPartitionForEvent(string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("markPartitionForEvent", TMessageType.Call, seqid_));
                markPartitionForEvent_args args = new markPartitionForEvent_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.EventType = eventType;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_markPartitionForEvent()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                markPartitionForEvent_result result = new markPartitionForEvent_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                if (result.__isset.o5)
                {
                    throw result.O5;
                }
                if (result.__isset.o6)
                {
                    throw result.O6;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_isPartitionMarkedForEvent(AsyncCallback callback, object state, string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
      {
        return send_isPartitionMarkedForEvent(callback, state, db_name, tbl_name, part_vals, eventType);
      }

      public bool End_isPartitionMarkedForEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isPartitionMarkedForEvent();
      }

#endif

            public bool isPartitionMarkedForEvent(string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
            {
#if !SILVERLIGHT
                send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
                return recv_isPartitionMarkedForEvent();

#else
        var asyncResult = Begin_isPartitionMarkedForEvent(null, null, db_name, tbl_name, part_vals, eventType);
        return End_isPartitionMarkedForEvent(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_isPartitionMarkedForEvent(AsyncCallback callback, object state, string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
#else

            public void send_isPartitionMarkedForEvent(string db_name, string tbl_name, Dictionary<string, string> part_vals, PartitionEventType eventType)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("isPartitionMarkedForEvent", TMessageType.Call, seqid_));
                isPartitionMarkedForEvent_args args = new isPartitionMarkedForEvent_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_vals = part_vals;
                args.EventType = eventType;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_isPartitionMarkedForEvent()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                isPartitionMarkedForEvent_result result = new isPartitionMarkedForEvent_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                if (result.__isset.o5)
                {
                    throw result.O5;
                }
                if (result.__isset.o6)
                {
                    throw result.O6;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isPartitionMarkedForEvent failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_add_index(AsyncCallback callback, object state, Index new_index, Table index_table)
      {
        return send_add_index(callback, state, new_index, index_table);
      }

      public Index End_add_index(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add_index();
      }

#endif

            public Index add_index(Index new_index, Table index_table)
            {
#if !SILVERLIGHT
                send_add_index(new_index, index_table);
                return recv_add_index();

#else
        var asyncResult = Begin_add_index(null, null, new_index, index_table);
        return End_add_index(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_add_index(AsyncCallback callback, object state, Index new_index, Table index_table)
#else

            public void send_add_index(Index new_index, Table index_table)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("add_index", TMessageType.Call, seqid_));
                add_index_args args = new add_index_args();
                args.New_index = new_index;
                args.Index_table = index_table;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Index recv_add_index()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                add_index_result result = new add_index_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_index failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_index(AsyncCallback callback, object state, string dbname, string base_tbl_name, string idx_name, Index new_idx)
      {
        return send_alter_index(callback, state, dbname, base_tbl_name, idx_name, new_idx);
      }

      public void End_alter_index(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_index();
      }

#endif

            public void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)
            {
#if !SILVERLIGHT
                send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
                recv_alter_index();

#else
        var asyncResult = Begin_alter_index(null, null, dbname, base_tbl_name, idx_name, new_idx);
        End_alter_index(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_index(AsyncCallback callback, object state, string dbname, string base_tbl_name, string idx_name, Index new_idx)
#else

            public void send_alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_index", TMessageType.Call, seqid_));
                alter_index_args args = new alter_index_args();
                args.Dbname = dbname;
                args.Base_tbl_name = base_tbl_name;
                args.Idx_name = idx_name;
                args.New_idx = new_idx;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_index()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_index_result result = new alter_index_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_index_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string index_name, bool deleteData)
      {
        return send_drop_index_by_name(callback, state, db_name, tbl_name, index_name, deleteData);
      }

      public bool End_drop_index_by_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_index_by_name();
      }

#endif

            public bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)
            {
#if !SILVERLIGHT
                send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
                return recv_drop_index_by_name();

#else
        var asyncResult = Begin_drop_index_by_name(null, null, db_name, tbl_name, index_name, deleteData);
        return End_drop_index_by_name(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_index_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string index_name, bool deleteData)
#else

            public void send_drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_index_by_name", TMessageType.Call, seqid_));
                drop_index_by_name_args args = new drop_index_by_name_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Index_name = index_name;
                args.DeleteData = deleteData;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_index_by_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_index_by_name_result result = new drop_index_by_name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_index_by_name failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_index_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string index_name)
      {
        return send_get_index_by_name(callback, state, db_name, tbl_name, index_name);
      }

      public Index End_get_index_by_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_index_by_name();
      }

#endif

            public Index get_index_by_name(string db_name, string tbl_name, string index_name)
            {
#if !SILVERLIGHT
                send_get_index_by_name(db_name, tbl_name, index_name);
                return recv_get_index_by_name();

#else
        var asyncResult = Begin_get_index_by_name(null, null, db_name, tbl_name, index_name);
        return End_get_index_by_name(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_index_by_name(AsyncCallback callback, object state, string db_name, string tbl_name, string index_name)
#else

            public void send_get_index_by_name(string db_name, string tbl_name, string index_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_index_by_name", TMessageType.Call, seqid_));
                get_index_by_name_args args = new get_index_by_name_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Index_name = index_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Index recv_get_index_by_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_index_by_name_result result = new get_index_by_name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_index_by_name failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_indexes(AsyncCallback callback, object state, string db_name, string tbl_name, short max_indexes)
      {
        return send_get_indexes(callback, state, db_name, tbl_name, max_indexes);
      }

      public List<Index> End_get_indexes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_indexes();
      }

#endif

            public List<Index> get_indexes(string db_name, string tbl_name, short max_indexes)
            {
#if !SILVERLIGHT
                send_get_indexes(db_name, tbl_name, max_indexes);
                return recv_get_indexes();

#else
        var asyncResult = Begin_get_indexes(null, null, db_name, tbl_name, max_indexes);
        return End_get_indexes(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_indexes(AsyncCallback callback, object state, string db_name, string tbl_name, short max_indexes)
#else

            public void send_get_indexes(string db_name, string tbl_name, short max_indexes)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_indexes", TMessageType.Call, seqid_));
                get_indexes_args args = new get_indexes_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Max_indexes = max_indexes;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Index> recv_get_indexes()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_indexes_result result = new get_indexes_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_indexes failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_index_names(AsyncCallback callback, object state, string db_name, string tbl_name, short max_indexes)
      {
        return send_get_index_names(callback, state, db_name, tbl_name, max_indexes);
      }

      public List<string> End_get_index_names(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_index_names();
      }

#endif

            public List<string> get_index_names(string db_name, string tbl_name, short max_indexes)
            {
#if !SILVERLIGHT
                send_get_index_names(db_name, tbl_name, max_indexes);
                return recv_get_index_names();

#else
        var asyncResult = Begin_get_index_names(null, null, db_name, tbl_name, max_indexes);
        return End_get_index_names(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_index_names(AsyncCallback callback, object state, string db_name, string tbl_name, short max_indexes)
#else

            public void send_get_index_names(string db_name, string tbl_name, short max_indexes)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_index_names", TMessageType.Call, seqid_));
                get_index_names_args args = new get_index_names_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Max_indexes = max_indexes;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_index_names()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_index_names_result result = new get_index_names_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_index_names failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_update_table_column_statistics(AsyncCallback callback, object state, ColumnStatistics stats_obj)
      {
        return send_update_table_column_statistics(callback, state, stats_obj);
      }

      public bool End_update_table_column_statistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_update_table_column_statistics();
      }

#endif

            public bool update_table_column_statistics(ColumnStatistics stats_obj)
            {
#if !SILVERLIGHT
                send_update_table_column_statistics(stats_obj);
                return recv_update_table_column_statistics();

#else
        var asyncResult = Begin_update_table_column_statistics(null, null, stats_obj);
        return End_update_table_column_statistics(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_update_table_column_statistics(AsyncCallback callback, object state, ColumnStatistics stats_obj)
#else

            public void send_update_table_column_statistics(ColumnStatistics stats_obj)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("update_table_column_statistics", TMessageType.Call, seqid_));
                update_table_column_statistics_args args = new update_table_column_statistics_args();
                args.Stats_obj = stats_obj;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_update_table_column_statistics()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                update_table_column_statistics_result result = new update_table_column_statistics_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "update_table_column_statistics failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_update_partition_column_statistics(AsyncCallback callback, object state, ColumnStatistics stats_obj)
      {
        return send_update_partition_column_statistics(callback, state, stats_obj);
      }

      public bool End_update_partition_column_statistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_update_partition_column_statistics();
      }

#endif

            public bool update_partition_column_statistics(ColumnStatistics stats_obj)
            {
#if !SILVERLIGHT
                send_update_partition_column_statistics(stats_obj);
                return recv_update_partition_column_statistics();

#else
        var asyncResult = Begin_update_partition_column_statistics(null, null, stats_obj);
        return End_update_partition_column_statistics(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_update_partition_column_statistics(AsyncCallback callback, object state, ColumnStatistics stats_obj)
#else

            public void send_update_partition_column_statistics(ColumnStatistics stats_obj)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("update_partition_column_statistics", TMessageType.Call, seqid_));
                update_partition_column_statistics_args args = new update_partition_column_statistics_args();
                args.Stats_obj = stats_obj;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_update_partition_column_statistics()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                update_partition_column_statistics_result result = new update_partition_column_statistics_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "update_partition_column_statistics failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_table_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string col_name)
      {
        return send_get_table_column_statistics(callback, state, db_name, tbl_name, col_name);
      }

      public ColumnStatistics End_get_table_column_statistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table_column_statistics();
      }

#endif

            public ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)
            {
#if !SILVERLIGHT
                send_get_table_column_statistics(db_name, tbl_name, col_name);
                return recv_get_table_column_statistics();

#else
        var asyncResult = Begin_get_table_column_statistics(null, null, db_name, tbl_name, col_name);
        return End_get_table_column_statistics(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_table_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string col_name)
#else

            public void send_get_table_column_statistics(string db_name, string tbl_name, string col_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_table_column_statistics", TMessageType.Call, seqid_));
                get_table_column_statistics_args args = new get_table_column_statistics_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Col_name = col_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public ColumnStatistics recv_get_table_column_statistics()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_table_column_statistics_result result = new get_table_column_statistics_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_column_statistics failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partition_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, string col_name)
      {
        return send_get_partition_column_statistics(callback, state, db_name, tbl_name, part_name, col_name);
      }

      public ColumnStatistics End_get_partition_column_statistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partition_column_statistics();
      }

#endif

            public ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)
            {
#if !SILVERLIGHT
                send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
                return recv_get_partition_column_statistics();

#else
        var asyncResult = Begin_get_partition_column_statistics(null, null, db_name, tbl_name, part_name, col_name);
        return End_get_partition_column_statistics(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partition_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, string col_name)
#else

            public void send_get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partition_column_statistics", TMessageType.Call, seqid_));
                get_partition_column_statistics_args args = new get_partition_column_statistics_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.Col_name = col_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public ColumnStatistics recv_get_partition_column_statistics()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partition_column_statistics_result result = new get_partition_column_statistics_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_column_statistics failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_table_statistics_req(AsyncCallback callback, object state, TableStatsRequest request)
      {
        return send_get_table_statistics_req(callback, state, request);
      }

      public TableStatsResult End_get_table_statistics_req(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table_statistics_req();
      }

#endif

            public TableStatsResult get_table_statistics_req(TableStatsRequest request)
            {
#if !SILVERLIGHT
                send_get_table_statistics_req(request);
                return recv_get_table_statistics_req();

#else
        var asyncResult = Begin_get_table_statistics_req(null, null, request);
        return End_get_table_statistics_req(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_table_statistics_req(AsyncCallback callback, object state, TableStatsRequest request)
#else

            public void send_get_table_statistics_req(TableStatsRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_table_statistics_req", TMessageType.Call, seqid_));
                get_table_statistics_req_args args = new get_table_statistics_req_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public TableStatsResult recv_get_table_statistics_req()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_table_statistics_req_result result = new get_table_statistics_req_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_statistics_req failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_partitions_statistics_req(AsyncCallback callback, object state, PartitionsStatsRequest request)
      {
        return send_get_partitions_statistics_req(callback, state, request);
      }

      public PartitionsStatsResult End_get_partitions_statistics_req(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_partitions_statistics_req();
      }

#endif

            public PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)
            {
#if !SILVERLIGHT
                send_get_partitions_statistics_req(request);
                return recv_get_partitions_statistics_req();

#else
        var asyncResult = Begin_get_partitions_statistics_req(null, null, request);
        return End_get_partitions_statistics_req(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_partitions_statistics_req(AsyncCallback callback, object state, PartitionsStatsRequest request)
#else

            public void send_get_partitions_statistics_req(PartitionsStatsRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_partitions_statistics_req", TMessageType.Call, seqid_));
                get_partitions_statistics_req_args args = new get_partitions_statistics_req_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public PartitionsStatsResult recv_get_partitions_statistics_req()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_partitions_statistics_req_result result = new get_partitions_statistics_req_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_statistics_req failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_aggr_stats_for(AsyncCallback callback, object state, PartitionsStatsRequest request)
      {
        return send_get_aggr_stats_for(callback, state, request);
      }

      public AggrStats End_get_aggr_stats_for(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_aggr_stats_for();
      }

#endif

            public AggrStats get_aggr_stats_for(PartitionsStatsRequest request)
            {
#if !SILVERLIGHT
                send_get_aggr_stats_for(request);
                return recv_get_aggr_stats_for();

#else
        var asyncResult = Begin_get_aggr_stats_for(null, null, request);
        return End_get_aggr_stats_for(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_aggr_stats_for(AsyncCallback callback, object state, PartitionsStatsRequest request)
#else

            public void send_get_aggr_stats_for(PartitionsStatsRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_aggr_stats_for", TMessageType.Call, seqid_));
                get_aggr_stats_for_args args = new get_aggr_stats_for_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public AggrStats recv_get_aggr_stats_for()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_aggr_stats_for_result result = new get_aggr_stats_for_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_aggr_stats_for failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_set_aggr_stats_for(AsyncCallback callback, object state, SetPartitionsStatsRequest request)
      {
        return send_set_aggr_stats_for(callback, state, request);
      }

      public bool End_set_aggr_stats_for(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_set_aggr_stats_for();
      }

#endif

            public bool set_aggr_stats_for(SetPartitionsStatsRequest request)
            {
#if !SILVERLIGHT
                send_set_aggr_stats_for(request);
                return recv_set_aggr_stats_for();

#else
        var asyncResult = Begin_set_aggr_stats_for(null, null, request);
        return End_set_aggr_stats_for(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_set_aggr_stats_for(AsyncCallback callback, object state, SetPartitionsStatsRequest request)
#else

            public void send_set_aggr_stats_for(SetPartitionsStatsRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("set_aggr_stats_for", TMessageType.Call, seqid_));
                set_aggr_stats_for_args args = new set_aggr_stats_for_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_set_aggr_stats_for()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                set_aggr_stats_for_result result = new set_aggr_stats_for_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_aggr_stats_for failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_delete_partition_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, string col_name)
      {
        return send_delete_partition_column_statistics(callback, state, db_name, tbl_name, part_name, col_name);
      }

      public bool End_delete_partition_column_statistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_delete_partition_column_statistics();
      }

#endif

            public bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)
            {
#if !SILVERLIGHT
                send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
                return recv_delete_partition_column_statistics();

#else
        var asyncResult = Begin_delete_partition_column_statistics(null, null, db_name, tbl_name, part_name, col_name);
        return End_delete_partition_column_statistics(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_delete_partition_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string part_name, string col_name)
#else

            public void send_delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("delete_partition_column_statistics", TMessageType.Call, seqid_));
                delete_partition_column_statistics_args args = new delete_partition_column_statistics_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Part_name = part_name;
                args.Col_name = col_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_delete_partition_column_statistics()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                delete_partition_column_statistics_result result = new delete_partition_column_statistics_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "delete_partition_column_statistics failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_delete_table_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string col_name)
      {
        return send_delete_table_column_statistics(callback, state, db_name, tbl_name, col_name);
      }

      public bool End_delete_table_column_statistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_delete_table_column_statistics();
      }

#endif

            public bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)
            {
#if !SILVERLIGHT
                send_delete_table_column_statistics(db_name, tbl_name, col_name);
                return recv_delete_table_column_statistics();

#else
        var asyncResult = Begin_delete_table_column_statistics(null, null, db_name, tbl_name, col_name);
        return End_delete_table_column_statistics(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_delete_table_column_statistics(AsyncCallback callback, object state, string db_name, string tbl_name, string col_name)
#else

            public void send_delete_table_column_statistics(string db_name, string tbl_name, string col_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("delete_table_column_statistics", TMessageType.Call, seqid_));
                delete_table_column_statistics_args args = new delete_table_column_statistics_args();
                args.Db_name = db_name;
                args.Tbl_name = tbl_name;
                args.Col_name = col_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_delete_table_column_statistics()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                delete_table_column_statistics_result result = new delete_table_column_statistics_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "delete_table_column_statistics failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_create_function(AsyncCallback callback, object state, Function func)
      {
        return send_create_function(callback, state, func);
      }

      public void End_create_function(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_create_function();
      }

#endif

            public void create_function(Function func)
            {
#if !SILVERLIGHT
                send_create_function(func);
                recv_create_function();

#else
        var asyncResult = Begin_create_function(null, null, func);
        End_create_function(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_create_function(AsyncCallback callback, object state, Function func)
#else

            public void send_create_function(Function func)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("create_function", TMessageType.Call, seqid_));
                create_function_args args = new create_function_args();
                args.Func = func;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_create_function()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                create_function_result result = new create_function_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                if (result.__isset.o4)
                {
                    throw result.O4;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_function(AsyncCallback callback, object state, string dbName, string funcName)
      {
        return send_drop_function(callback, state, dbName, funcName);
      }

      public void End_drop_function(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_drop_function();
      }

#endif

            public void drop_function(string dbName, string funcName)
            {
#if !SILVERLIGHT
                send_drop_function(dbName, funcName);
                recv_drop_function();

#else
        var asyncResult = Begin_drop_function(null, null, dbName, funcName);
        End_drop_function(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_function(AsyncCallback callback, object state, string dbName, string funcName)
#else

            public void send_drop_function(string dbName, string funcName)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_function", TMessageType.Call, seqid_));
                drop_function_args args = new drop_function_args();
                args.DbName = dbName;
                args.FuncName = funcName;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_drop_function()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_function_result result = new drop_function_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_alter_function(AsyncCallback callback, object state, string dbName, string funcName, Function newFunc)
      {
        return send_alter_function(callback, state, dbName, funcName, newFunc);
      }

      public void End_alter_function(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_alter_function();
      }

#endif

            public void alter_function(string dbName, string funcName, Function newFunc)
            {
#if !SILVERLIGHT
                send_alter_function(dbName, funcName, newFunc);
                recv_alter_function();

#else
        var asyncResult = Begin_alter_function(null, null, dbName, funcName, newFunc);
        End_alter_function(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_alter_function(AsyncCallback callback, object state, string dbName, string funcName, Function newFunc)
#else

            public void send_alter_function(string dbName, string funcName, Function newFunc)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("alter_function", TMessageType.Call, seqid_));
                alter_function_args args = new alter_function_args();
                args.DbName = dbName;
                args.FuncName = funcName;
                args.NewFunc = newFunc;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_alter_function()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                alter_function_result result = new alter_function_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_functions(AsyncCallback callback, object state, string dbName, string pattern)
      {
        return send_get_functions(callback, state, dbName, pattern);
      }

      public List<string> End_get_functions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_functions();
      }

#endif

            public List<string> get_functions(string dbName, string pattern)
            {
#if !SILVERLIGHT
                send_get_functions(dbName, pattern);
                return recv_get_functions();

#else
        var asyncResult = Begin_get_functions(null, null, dbName, pattern);
        return End_get_functions(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_functions(AsyncCallback callback, object state, string dbName, string pattern)
#else

            public void send_get_functions(string dbName, string pattern)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_functions", TMessageType.Call, seqid_));
                get_functions_args args = new get_functions_args();
                args.DbName = dbName;
                args.Pattern = pattern;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_functions()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_functions_result result = new get_functions_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_functions failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_function(AsyncCallback callback, object state, string dbName, string funcName)
      {
        return send_get_function(callback, state, dbName, funcName);
      }

      public Function End_get_function(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_function();
      }

#endif

            public Function get_function(string dbName, string funcName)
            {
#if !SILVERLIGHT
                send_get_function(dbName, funcName);
                return recv_get_function();

#else
        var asyncResult = Begin_get_function(null, null, dbName, funcName);
        return End_get_function(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_function(AsyncCallback callback, object state, string dbName, string funcName)
#else

            public void send_get_function(string dbName, string funcName)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_function", TMessageType.Call, seqid_));
                get_function_args args = new get_function_args();
                args.DbName = dbName;
                args.FuncName = funcName;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public Function recv_get_function()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_function_result result = new get_function_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_function failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_create_role(AsyncCallback callback, object state, Role role)
      {
        return send_create_role(callback, state, role);
      }

      public bool End_create_role(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_create_role();
      }

#endif

            public bool create_role(Role role)
            {
#if !SILVERLIGHT
                send_create_role(role);
                return recv_create_role();

#else
        var asyncResult = Begin_create_role(null, null, role);
        return End_create_role(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_create_role(AsyncCallback callback, object state, Role role)
#else

            public void send_create_role(Role role)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("create_role", TMessageType.Call, seqid_));
                create_role_args args = new create_role_args();
                args.Role = role;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_create_role()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                create_role_result result = new create_role_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_role failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_drop_role(AsyncCallback callback, object state, string role_name)
      {
        return send_drop_role(callback, state, role_name);
      }

      public bool End_drop_role(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_drop_role();
      }

#endif

            public bool drop_role(string role_name)
            {
#if !SILVERLIGHT
                send_drop_role(role_name);
                return recv_drop_role();

#else
        var asyncResult = Begin_drop_role(null, null, role_name);
        return End_drop_role(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_drop_role(AsyncCallback callback, object state, string role_name)
#else

            public void send_drop_role(string role_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("drop_role", TMessageType.Call, seqid_));
                drop_role_args args = new drop_role_args();
                args.Role_name = role_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_drop_role()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                drop_role_result result = new drop_role_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_role failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_role_names(AsyncCallback callback, object state)
      {
        return send_get_role_names(callback, state);
      }

      public List<string> End_get_role_names(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_role_names();
      }

#endif

            public List<string> get_role_names()
            {
#if !SILVERLIGHT
                send_get_role_names();
                return recv_get_role_names();

#else
        var asyncResult = Begin_get_role_names(null, null);
        return End_get_role_names(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_role_names(AsyncCallback callback, object state)
#else

            public void send_get_role_names()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_role_names", TMessageType.Call, seqid_));
                get_role_names_args args = new get_role_names_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_get_role_names()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_role_names_result result = new get_role_names_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_role_names failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_grant_role(AsyncCallback callback, object state, string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)
      {
        return send_grant_role(callback, state, role_name, principal_name, principal_type, grantor, grantorType, grant_option);
      }

      public bool End_grant_role(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_grant_role();
      }

#endif

            public bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)
            {
#if !SILVERLIGHT
                send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
                return recv_grant_role();

#else
        var asyncResult = Begin_grant_role(null, null, role_name, principal_name, principal_type, grantor, grantorType, grant_option);
        return End_grant_role(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_grant_role(AsyncCallback callback, object state, string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)
#else

            public void send_grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("grant_role", TMessageType.Call, seqid_));
                grant_role_args args = new grant_role_args();
                args.Role_name = role_name;
                args.Principal_name = principal_name;
                args.Principal_type = principal_type;
                args.Grantor = grantor;
                args.GrantorType = grantorType;
                args.Grant_option = grant_option;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_grant_role()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                grant_role_result result = new grant_role_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grant_role failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_revoke_role(AsyncCallback callback, object state, string role_name, string principal_name, PrincipalType principal_type)
      {
        return send_revoke_role(callback, state, role_name, principal_name, principal_type);
      }

      public bool End_revoke_role(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_revoke_role();
      }

#endif

            public bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)
            {
#if !SILVERLIGHT
                send_revoke_role(role_name, principal_name, principal_type);
                return recv_revoke_role();

#else
        var asyncResult = Begin_revoke_role(null, null, role_name, principal_name, principal_type);
        return End_revoke_role(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_revoke_role(AsyncCallback callback, object state, string role_name, string principal_name, PrincipalType principal_type)
#else

            public void send_revoke_role(string role_name, string principal_name, PrincipalType principal_type)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("revoke_role", TMessageType.Call, seqid_));
                revoke_role_args args = new revoke_role_args();
                args.Role_name = role_name;
                args.Principal_name = principal_name;
                args.Principal_type = principal_type;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_revoke_role()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                revoke_role_result result = new revoke_role_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "revoke_role failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_list_roles(AsyncCallback callback, object state, string principal_name, PrincipalType principal_type)
      {
        return send_list_roles(callback, state, principal_name, principal_type);
      }

      public List<Role> End_list_roles(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_list_roles();
      }

#endif

            public List<Role> list_roles(string principal_name, PrincipalType principal_type)
            {
#if !SILVERLIGHT
                send_list_roles(principal_name, principal_type);
                return recv_list_roles();

#else
        var asyncResult = Begin_list_roles(null, null, principal_name, principal_type);
        return End_list_roles(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_list_roles(AsyncCallback callback, object state, string principal_name, PrincipalType principal_type)
#else

            public void send_list_roles(string principal_name, PrincipalType principal_type)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("list_roles", TMessageType.Call, seqid_));
                list_roles_args args = new list_roles_args();
                args.Principal_name = principal_name;
                args.Principal_type = principal_type;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Role> recv_list_roles()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                list_roles_result result = new list_roles_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_roles failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_grant_revoke_role(AsyncCallback callback, object state, GrantRevokeRoleRequest request)
      {
        return send_grant_revoke_role(callback, state, request);
      }

      public GrantRevokeRoleResponse End_grant_revoke_role(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_grant_revoke_role();
      }

#endif

            public GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)
            {
#if !SILVERLIGHT
                send_grant_revoke_role(request);
                return recv_grant_revoke_role();

#else
        var asyncResult = Begin_grant_revoke_role(null, null, request);
        return End_grant_revoke_role(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_grant_revoke_role(AsyncCallback callback, object state, GrantRevokeRoleRequest request)
#else

            public void send_grant_revoke_role(GrantRevokeRoleRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("grant_revoke_role", TMessageType.Call, seqid_));
                grant_revoke_role_args args = new grant_revoke_role_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public GrantRevokeRoleResponse recv_grant_revoke_role()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                grant_revoke_role_result result = new grant_revoke_role_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grant_revoke_role failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_principals_in_role(AsyncCallback callback, object state, GetPrincipalsInRoleRequest request)
      {
        return send_get_principals_in_role(callback, state, request);
      }

      public GetPrincipalsInRoleResponse End_get_principals_in_role(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_principals_in_role();
      }

#endif

            public GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)
            {
#if !SILVERLIGHT
                send_get_principals_in_role(request);
                return recv_get_principals_in_role();

#else
        var asyncResult = Begin_get_principals_in_role(null, null, request);
        return End_get_principals_in_role(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_principals_in_role(AsyncCallback callback, object state, GetPrincipalsInRoleRequest request)
#else

            public void send_get_principals_in_role(GetPrincipalsInRoleRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_principals_in_role", TMessageType.Call, seqid_));
                get_principals_in_role_args args = new get_principals_in_role_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public GetPrincipalsInRoleResponse recv_get_principals_in_role()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_principals_in_role_result result = new get_principals_in_role_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_principals_in_role failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_role_grants_for_principal(AsyncCallback callback, object state, GetRoleGrantsForPrincipalRequest request)
      {
        return send_get_role_grants_for_principal(callback, state, request);
      }

      public GetRoleGrantsForPrincipalResponse End_get_role_grants_for_principal(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_role_grants_for_principal();
      }

#endif

            public GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)
            {
#if !SILVERLIGHT
                send_get_role_grants_for_principal(request);
                return recv_get_role_grants_for_principal();

#else
        var asyncResult = Begin_get_role_grants_for_principal(null, null, request);
        return End_get_role_grants_for_principal(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_role_grants_for_principal(AsyncCallback callback, object state, GetRoleGrantsForPrincipalRequest request)
#else

            public void send_get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_role_grants_for_principal", TMessageType.Call, seqid_));
                get_role_grants_for_principal_args args = new get_role_grants_for_principal_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public GetRoleGrantsForPrincipalResponse recv_get_role_grants_for_principal()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_role_grants_for_principal_result result = new get_role_grants_for_principal_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_role_grants_for_principal failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_privilege_set(AsyncCallback callback, object state, HiveObjectRef hiveObject, string user_name, List<string> group_names)
      {
        return send_get_privilege_set(callback, state, hiveObject, user_name, group_names);
      }

      public PrincipalPrivilegeSet End_get_privilege_set(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_privilege_set();
      }

#endif

            public PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name, List<string> group_names)
            {
#if !SILVERLIGHT
                send_get_privilege_set(hiveObject, user_name, group_names);
                return recv_get_privilege_set();

#else
        var asyncResult = Begin_get_privilege_set(null, null, hiveObject, user_name, group_names);
        return End_get_privilege_set(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_privilege_set(AsyncCallback callback, object state, HiveObjectRef hiveObject, string user_name, List<string> group_names)
#else

            public void send_get_privilege_set(HiveObjectRef hiveObject, string user_name, List<string> group_names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_privilege_set", TMessageType.Call, seqid_));
                get_privilege_set_args args = new get_privilege_set_args();
                args.HiveObject = hiveObject;
                args.User_name = user_name;
                args.Group_names = group_names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public PrincipalPrivilegeSet recv_get_privilege_set()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_privilege_set_result result = new get_privilege_set_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_privilege_set failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_list_privileges(AsyncCallback callback, object state, string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)
      {
        return send_list_privileges(callback, state, principal_name, principal_type, hiveObject);
      }

      public List<HiveObjectPrivilege> End_list_privileges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_list_privileges();
      }

#endif

            public List<HiveObjectPrivilege> list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)
            {
#if !SILVERLIGHT
                send_list_privileges(principal_name, principal_type, hiveObject);
                return recv_list_privileges();

#else
        var asyncResult = Begin_list_privileges(null, null, principal_name, principal_type, hiveObject);
        return End_list_privileges(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_list_privileges(AsyncCallback callback, object state, string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)
#else

            public void send_list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("list_privileges", TMessageType.Call, seqid_));
                list_privileges_args args = new list_privileges_args();
                args.Principal_name = principal_name;
                args.Principal_type = principal_type;
                args.HiveObject = hiveObject;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<HiveObjectPrivilege> recv_list_privileges()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                list_privileges_result result = new list_privileges_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_privileges failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_grant_privileges(AsyncCallback callback, object state, PrivilegeBag privileges)
      {
        return send_grant_privileges(callback, state, privileges);
      }

      public bool End_grant_privileges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_grant_privileges();
      }

#endif

            public bool grant_privileges(PrivilegeBag privileges)
            {
#if !SILVERLIGHT
                send_grant_privileges(privileges);
                return recv_grant_privileges();

#else
        var asyncResult = Begin_grant_privileges(null, null, privileges);
        return End_grant_privileges(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_grant_privileges(AsyncCallback callback, object state, PrivilegeBag privileges)
#else

            public void send_grant_privileges(PrivilegeBag privileges)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("grant_privileges", TMessageType.Call, seqid_));
                grant_privileges_args args = new grant_privileges_args();
                args.Privileges = privileges;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_grant_privileges()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                grant_privileges_result result = new grant_privileges_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grant_privileges failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_revoke_privileges(AsyncCallback callback, object state, PrivilegeBag privileges)
      {
        return send_revoke_privileges(callback, state, privileges);
      }

      public bool End_revoke_privileges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_revoke_privileges();
      }

#endif

            public bool revoke_privileges(PrivilegeBag privileges)
            {
#if !SILVERLIGHT
                send_revoke_privileges(privileges);
                return recv_revoke_privileges();

#else
        var asyncResult = Begin_revoke_privileges(null, null, privileges);
        return End_revoke_privileges(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_revoke_privileges(AsyncCallback callback, object state, PrivilegeBag privileges)
#else

            public void send_revoke_privileges(PrivilegeBag privileges)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("revoke_privileges", TMessageType.Call, seqid_));
                revoke_privileges_args args = new revoke_privileges_args();
                args.Privileges = privileges;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_revoke_privileges()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                revoke_privileges_result result = new revoke_privileges_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "revoke_privileges failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_grant_revoke_privileges(AsyncCallback callback, object state, GrantRevokePrivilegeRequest request)
      {
        return send_grant_revoke_privileges(callback, state, request);
      }

      public GrantRevokePrivilegeResponse End_grant_revoke_privileges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_grant_revoke_privileges();
      }

#endif

            public GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)
            {
#if !SILVERLIGHT
                send_grant_revoke_privileges(request);
                return recv_grant_revoke_privileges();

#else
        var asyncResult = Begin_grant_revoke_privileges(null, null, request);
        return End_grant_revoke_privileges(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_grant_revoke_privileges(AsyncCallback callback, object state, GrantRevokePrivilegeRequest request)
#else

            public void send_grant_revoke_privileges(GrantRevokePrivilegeRequest request)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("grant_revoke_privileges", TMessageType.Call, seqid_));
                grant_revoke_privileges_args args = new grant_revoke_privileges_args();
                args.Request = request;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public GrantRevokePrivilegeResponse recv_grant_revoke_privileges()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                grant_revoke_privileges_result result = new grant_revoke_privileges_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grant_revoke_privileges failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_set_ugi(AsyncCallback callback, object state, string user_name, List<string> group_names)
      {
        return send_set_ugi(callback, state, user_name, group_names);
      }

      public List<string> End_set_ugi(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_set_ugi();
      }

#endif

            public List<string> set_ugi(string user_name, List<string> group_names)
            {
#if !SILVERLIGHT
                send_set_ugi(user_name, group_names);
                return recv_set_ugi();

#else
        var asyncResult = Begin_set_ugi(null, null, user_name, group_names);
        return End_set_ugi(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_set_ugi(AsyncCallback callback, object state, string user_name, List<string> group_names)
#else

            public void send_set_ugi(string user_name, List<string> group_names)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("set_ugi", TMessageType.Call, seqid_));
                set_ugi_args args = new set_ugi_args();
                args.User_name = user_name;
                args.Group_names = group_names;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_set_ugi()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                set_ugi_result result = new set_ugi_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_ugi failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_delegation_token(AsyncCallback callback, object state, string token_owner, string renewer_kerberos_principal_name)
      {
        return send_get_delegation_token(callback, state, token_owner, renewer_kerberos_principal_name);
      }

      public string End_get_delegation_token(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_delegation_token();
      }

#endif

            public string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)
            {
#if !SILVERLIGHT
                send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
                return recv_get_delegation_token();

#else
        var asyncResult = Begin_get_delegation_token(null, null, token_owner, renewer_kerberos_principal_name);
        return End_get_delegation_token(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_delegation_token(AsyncCallback callback, object state, string token_owner, string renewer_kerberos_principal_name)
#else

            public void send_get_delegation_token(string token_owner, string renewer_kerberos_principal_name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_delegation_token", TMessageType.Call, seqid_));
                get_delegation_token_args args = new get_delegation_token_args();
                args.Token_owner = token_owner;
                args.Renewer_kerberos_principal_name = renewer_kerberos_principal_name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_get_delegation_token()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_delegation_token_result result = new get_delegation_token_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_delegation_token failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_renew_delegation_token(AsyncCallback callback, object state, string token_str_form)
      {
        return send_renew_delegation_token(callback, state, token_str_form);
      }

      public long End_renew_delegation_token(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_renew_delegation_token();
      }

#endif

            public long renew_delegation_token(string token_str_form)
            {
#if !SILVERLIGHT
                send_renew_delegation_token(token_str_form);
                return recv_renew_delegation_token();

#else
        var asyncResult = Begin_renew_delegation_token(null, null, token_str_form);
        return End_renew_delegation_token(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_renew_delegation_token(AsyncCallback callback, object state, string token_str_form)
#else

            public void send_renew_delegation_token(string token_str_form)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("renew_delegation_token", TMessageType.Call, seqid_));
                renew_delegation_token_args args = new renew_delegation_token_args();
                args.Token_str_form = token_str_form;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public long recv_renew_delegation_token()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                renew_delegation_token_result result = new renew_delegation_token_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "renew_delegation_token failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_cancel_delegation_token(AsyncCallback callback, object state, string token_str_form)
      {
        return send_cancel_delegation_token(callback, state, token_str_form);
      }

      public void End_cancel_delegation_token(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancel_delegation_token();
      }

#endif

            public void cancel_delegation_token(string token_str_form)
            {
#if !SILVERLIGHT
                send_cancel_delegation_token(token_str_form);
                recv_cancel_delegation_token();

#else
        var asyncResult = Begin_cancel_delegation_token(null, null, token_str_form);
        End_cancel_delegation_token(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_cancel_delegation_token(AsyncCallback callback, object state, string token_str_form)
#else

            public void send_cancel_delegation_token(string token_str_form)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("cancel_delegation_token", TMessageType.Call, seqid_));
                cancel_delegation_token_args args = new cancel_delegation_token_args();
                args.Token_str_form = token_str_form;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_cancel_delegation_token()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                cancel_delegation_token_result result = new cancel_delegation_token_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_open_txns(AsyncCallback callback, object state)
      {
        return send_get_open_txns(callback, state);
      }

      public GetOpenTxnsResponse End_get_open_txns(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_open_txns();
      }

#endif

            public GetOpenTxnsResponse get_open_txns()
            {
#if !SILVERLIGHT
                send_get_open_txns();
                return recv_get_open_txns();

#else
        var asyncResult = Begin_get_open_txns(null, null);
        return End_get_open_txns(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_open_txns(AsyncCallback callback, object state)
#else

            public void send_get_open_txns()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_open_txns", TMessageType.Call, seqid_));
                get_open_txns_args args = new get_open_txns_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public GetOpenTxnsResponse recv_get_open_txns()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_open_txns_result result = new get_open_txns_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_open_txns failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_get_open_txns_info(AsyncCallback callback, object state)
      {
        return send_get_open_txns_info(callback, state);
      }

      public GetOpenTxnsInfoResponse End_get_open_txns_info(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_open_txns_info();
      }

#endif

            public GetOpenTxnsInfoResponse get_open_txns_info()
            {
#if !SILVERLIGHT
                send_get_open_txns_info();
                return recv_get_open_txns_info();

#else
        var asyncResult = Begin_get_open_txns_info(null, null);
        return End_get_open_txns_info(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_get_open_txns_info(AsyncCallback callback, object state)
#else

            public void send_get_open_txns_info()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("get_open_txns_info", TMessageType.Call, seqid_));
                get_open_txns_info_args args = new get_open_txns_info_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public GetOpenTxnsInfoResponse recv_get_open_txns_info()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                get_open_txns_info_result result = new get_open_txns_info_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_open_txns_info failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_open_txns(AsyncCallback callback, object state, OpenTxnRequest rqst)
      {
        return send_open_txns(callback, state, rqst);
      }

      public OpenTxnsResponse End_open_txns(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_txns();
      }

#endif

            public OpenTxnsResponse open_txns(OpenTxnRequest rqst)
            {
#if !SILVERLIGHT
                send_open_txns(rqst);
                return recv_open_txns();

#else
        var asyncResult = Begin_open_txns(null, null, rqst);
        return End_open_txns(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_open_txns(AsyncCallback callback, object state, OpenTxnRequest rqst)
#else

            public void send_open_txns(OpenTxnRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("open_txns", TMessageType.Call, seqid_));
                open_txns_args args = new open_txns_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public OpenTxnsResponse recv_open_txns()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                open_txns_result result = new open_txns_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_txns failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_abort_txn(AsyncCallback callback, object state, AbortTxnRequest rqst)
      {
        return send_abort_txn(callback, state, rqst);
      }

      public void End_abort_txn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_abort_txn();
      }

#endif

            public void abort_txn(AbortTxnRequest rqst)
            {
#if !SILVERLIGHT
                send_abort_txn(rqst);
                recv_abort_txn();

#else
        var asyncResult = Begin_abort_txn(null, null, rqst);
        End_abort_txn(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_abort_txn(AsyncCallback callback, object state, AbortTxnRequest rqst)
#else

            public void send_abort_txn(AbortTxnRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("abort_txn", TMessageType.Call, seqid_));
                abort_txn_args args = new abort_txn_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_abort_txn()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                abort_txn_result result = new abort_txn_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_commit_txn(AsyncCallback callback, object state, CommitTxnRequest rqst)
      {
        return send_commit_txn(callback, state, rqst);
      }

      public void End_commit_txn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_commit_txn();
      }

#endif

            public void commit_txn(CommitTxnRequest rqst)
            {
#if !SILVERLIGHT
                send_commit_txn(rqst);
                recv_commit_txn();

#else
        var asyncResult = Begin_commit_txn(null, null, rqst);
        End_commit_txn(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_commit_txn(AsyncCallback callback, object state, CommitTxnRequest rqst)
#else

            public void send_commit_txn(CommitTxnRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("commit_txn", TMessageType.Call, seqid_));
                commit_txn_args args = new commit_txn_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_commit_txn()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                commit_txn_result result = new commit_txn_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_lock(AsyncCallback callback, object state, LockRequest rqst)
      {
        return send_lock(callback, state, rqst);
      }

      public LockResponse End_lock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_lock();
      }

#endif

            public LockResponse Lock(LockRequest rqst)
            {
#if !SILVERLIGHT
                send_lock(rqst);
                return recv_lock();

#else
        var asyncResult = Begin_lock(null, null, rqst);
        return End_lock(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_lock(AsyncCallback callback, object state, LockRequest rqst)
#else

            public void send_lock(LockRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("lock", TMessageType.Call, seqid_));
                lock_args args = new lock_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public LockResponse recv_lock()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                lock_result result = new lock_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lock failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_check_lock(AsyncCallback callback, object state, CheckLockRequest rqst)
      {
        return send_check_lock(callback, state, rqst);
      }

      public LockResponse End_check_lock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_check_lock();
      }

#endif

            public LockResponse check_lock(CheckLockRequest rqst)
            {
#if !SILVERLIGHT
                send_check_lock(rqst);
                return recv_check_lock();

#else
        var asyncResult = Begin_check_lock(null, null, rqst);
        return End_check_lock(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_check_lock(AsyncCallback callback, object state, CheckLockRequest rqst)
#else

            public void send_check_lock(CheckLockRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("check_lock", TMessageType.Call, seqid_));
                check_lock_args args = new check_lock_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public LockResponse recv_check_lock()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                check_lock_result result = new check_lock_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "check_lock failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_unlock(AsyncCallback callback, object state, UnlockRequest rqst)
      {
        return send_unlock(callback, state, rqst);
      }

      public void End_unlock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_unlock();
      }

#endif

            public void unlock(UnlockRequest rqst)
            {
#if !SILVERLIGHT
                send_unlock(rqst);
                recv_unlock();

#else
        var asyncResult = Begin_unlock(null, null, rqst);
        End_unlock(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_unlock(AsyncCallback callback, object state, UnlockRequest rqst)
#else

            public void send_unlock(UnlockRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("unlock", TMessageType.Call, seqid_));
                unlock_args args = new unlock_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_unlock()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                unlock_result result = new unlock_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_show_locks(AsyncCallback callback, object state, ShowLocksRequest rqst)
      {
        return send_show_locks(callback, state, rqst);
      }

      public ShowLocksResponse End_show_locks(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_show_locks();
      }

#endif

            public ShowLocksResponse show_locks(ShowLocksRequest rqst)
            {
#if !SILVERLIGHT
                send_show_locks(rqst);
                return recv_show_locks();

#else
        var asyncResult = Begin_show_locks(null, null, rqst);
        return End_show_locks(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_show_locks(AsyncCallback callback, object state, ShowLocksRequest rqst)
#else

            public void send_show_locks(ShowLocksRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("show_locks", TMessageType.Call, seqid_));
                show_locks_args args = new show_locks_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public ShowLocksResponse recv_show_locks()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                show_locks_result result = new show_locks_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "show_locks failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, HeartbeatRequest ids)
      {
        return send_heartbeat(callback, state, ids);
      }

      public void End_heartbeat(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_heartbeat();
      }

#endif

            public void heartbeat(HeartbeatRequest ids)
            {
#if !SILVERLIGHT
                send_heartbeat(ids);
                recv_heartbeat();

#else
        var asyncResult = Begin_heartbeat(null, null, ids);
        End_heartbeat(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_heartbeat(AsyncCallback callback, object state, HeartbeatRequest ids)
#else

            public void send_heartbeat(HeartbeatRequest ids)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Call, seqid_));
                heartbeat_args args = new heartbeat_args();
                args.Ids = ids;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_heartbeat()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                heartbeat_result result = new heartbeat_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.o1)
                {
                    throw result.O1;
                }
                if (result.__isset.o2)
                {
                    throw result.O2;
                }
                if (result.__isset.o3)
                {
                    throw result.O3;
                }
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_heartbeat_txn_range(AsyncCallback callback, object state, HeartbeatTxnRangeRequest txns)
      {
        return send_heartbeat_txn_range(callback, state, txns);
      }

      public HeartbeatTxnRangeResponse End_heartbeat_txn_range(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_heartbeat_txn_range();
      }

#endif

            public HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)
            {
#if !SILVERLIGHT
                send_heartbeat_txn_range(txns);
                return recv_heartbeat_txn_range();

#else
        var asyncResult = Begin_heartbeat_txn_range(null, null, txns);
        return End_heartbeat_txn_range(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_heartbeat_txn_range(AsyncCallback callback, object state, HeartbeatTxnRangeRequest txns)
#else

            public void send_heartbeat_txn_range(HeartbeatTxnRangeRequest txns)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("heartbeat_txn_range", TMessageType.Call, seqid_));
                heartbeat_txn_range_args args = new heartbeat_txn_range_args();
                args.Txns = txns;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public HeartbeatTxnRangeResponse recv_heartbeat_txn_range()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                heartbeat_txn_range_result result = new heartbeat_txn_range_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartbeat_txn_range failed: unknown result");
            }

#if SILVERLIGHT
      public IAsyncResult Begin_compact(AsyncCallback callback, object state, CompactionRequest rqst)
      {
        return send_compact(callback, state, rqst);
      }

      public void End_compact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_compact();
      }

#endif

            public void compact(CompactionRequest rqst)
            {
#if !SILVERLIGHT
                send_compact(rqst);
                recv_compact();

#else
        var asyncResult = Begin_compact(null, null, rqst);
        End_compact(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_compact(AsyncCallback callback, object state, CompactionRequest rqst)
#else

            public void send_compact(CompactionRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("compact", TMessageType.Call, seqid_));
                compact_args args = new compact_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_compact()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                compact_result result = new compact_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

#if SILVERLIGHT
      public IAsyncResult Begin_show_compact(AsyncCallback callback, object state, ShowCompactRequest rqst)
      {
        return send_show_compact(callback, state, rqst);
      }

      public ShowCompactResponse End_show_compact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_show_compact();
      }

#endif

            public ShowCompactResponse show_compact(ShowCompactRequest rqst)
            {
#if !SILVERLIGHT
                send_show_compact(rqst);
                return recv_show_compact();

#else
        var asyncResult = Begin_show_compact(null, null, rqst);
        return End_show_compact(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_show_compact(AsyncCallback callback, object state, ShowCompactRequest rqst)
#else

            public void send_show_compact(ShowCompactRequest rqst)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("show_compact", TMessageType.Call, seqid_));
                show_compact_args args = new show_compact_args();
                args.Rqst = rqst;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public ShowCompactResponse recv_show_compact()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                show_compact_result result = new show_compact_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "show_compact failed: unknown result");
            }
        }

        public class Processor : Hive.FacebookService.Processor, TProcessor
        {
            public Processor(Iface iface) : base(iface)
            {
                iface_ = iface;
                processMap_["getMetaConf"] = getMetaConf_Process;
                processMap_["setMetaConf"] = setMetaConf_Process;
                processMap_["create_database"] = create_database_Process;
                processMap_["get_database"] = get_database_Process;
                processMap_["drop_database"] = drop_database_Process;
                processMap_["get_databases"] = get_databases_Process;
                processMap_["get_all_databases"] = get_all_databases_Process;
                processMap_["alter_database"] = alter_database_Process;
                processMap_["get_type"] = get_type_Process;
                processMap_["create_type"] = create_type_Process;
                processMap_["drop_type"] = drop_type_Process;
                processMap_["get_type_all"] = get_type_all_Process;
                processMap_["get_fields"] = get_fields_Process;
                processMap_["get_schema"] = get_schema_Process;
                processMap_["create_table"] = create_table_Process;
                processMap_["create_table_with_environment_context"] = create_table_with_environment_context_Process;
                processMap_["drop_table"] = drop_table_Process;
                processMap_["drop_table_with_environment_context"] = drop_table_with_environment_context_Process;
                processMap_["get_tables"] = get_tables_Process;
                processMap_["get_all_tables"] = get_all_tables_Process;
                processMap_["get_table"] = get_table_Process;
                processMap_["get_table_objects_by_name"] = get_table_objects_by_name_Process;
                processMap_["get_table_names_by_filter"] = get_table_names_by_filter_Process;
                processMap_["alter_table"] = alter_table_Process;
                processMap_["alter_table_with_environment_context"] = alter_table_with_environment_context_Process;
                processMap_["add_partition"] = add_partition_Process;
                processMap_["add_partition_with_environment_context"] = add_partition_with_environment_context_Process;
                processMap_["add_partitions"] = add_partitions_Process;
                processMap_["append_partition"] = append_partition_Process;
                processMap_["add_partitions_req"] = add_partitions_req_Process;
                processMap_["append_partition_with_environment_context"] = append_partition_with_environment_context_Process;
                processMap_["append_partition_by_name"] = append_partition_by_name_Process;
                processMap_["append_partition_by_name_with_environment_context"] = append_partition_by_name_with_environment_context_Process;
                processMap_["drop_partition"] = drop_partition_Process;
                processMap_["drop_partition_with_environment_context"] = drop_partition_with_environment_context_Process;
                processMap_["drop_partition_by_name"] = drop_partition_by_name_Process;
                processMap_["drop_partition_by_name_with_environment_context"] = drop_partition_by_name_with_environment_context_Process;
                processMap_["drop_partitions_req"] = drop_partitions_req_Process;
                processMap_["get_partition"] = get_partition_Process;
                processMap_["exchange_partition"] = exchange_partition_Process;
                processMap_["get_partition_with_auth"] = get_partition_with_auth_Process;
                processMap_["get_partition_by_name"] = get_partition_by_name_Process;
                processMap_["get_partitions"] = get_partitions_Process;
                processMap_["get_partitions_with_auth"] = get_partitions_with_auth_Process;
                processMap_["get_partition_names"] = get_partition_names_Process;
                processMap_["get_partitions_ps"] = get_partitions_ps_Process;
                processMap_["get_partitions_ps_with_auth"] = get_partitions_ps_with_auth_Process;
                processMap_["get_partition_names_ps"] = get_partition_names_ps_Process;
                processMap_["get_partitions_by_filter"] = get_partitions_by_filter_Process;
                processMap_["get_partitions_by_expr"] = get_partitions_by_expr_Process;
                processMap_["get_partitions_by_names"] = get_partitions_by_names_Process;
                processMap_["alter_partition"] = alter_partition_Process;
                processMap_["alter_partitions"] = alter_partitions_Process;
                processMap_["alter_partition_with_environment_context"] = alter_partition_with_environment_context_Process;
                processMap_["rename_partition"] = rename_partition_Process;
                processMap_["partition_name_has_valid_characters"] = partition_name_has_valid_characters_Process;
                processMap_["get_config_value"] = get_config_value_Process;
                processMap_["partition_name_to_vals"] = partition_name_to_vals_Process;
                processMap_["partition_name_to_spec"] = partition_name_to_spec_Process;
                processMap_["markPartitionForEvent"] = markPartitionForEvent_Process;
                processMap_["isPartitionMarkedForEvent"] = isPartitionMarkedForEvent_Process;
                processMap_["add_index"] = add_index_Process;
                processMap_["alter_index"] = alter_index_Process;
                processMap_["drop_index_by_name"] = drop_index_by_name_Process;
                processMap_["get_index_by_name"] = get_index_by_name_Process;
                processMap_["get_indexes"] = get_indexes_Process;
                processMap_["get_index_names"] = get_index_names_Process;
                processMap_["update_table_column_statistics"] = update_table_column_statistics_Process;
                processMap_["update_partition_column_statistics"] = update_partition_column_statistics_Process;
                processMap_["get_table_column_statistics"] = get_table_column_statistics_Process;
                processMap_["get_partition_column_statistics"] = get_partition_column_statistics_Process;
                processMap_["get_table_statistics_req"] = get_table_statistics_req_Process;
                processMap_["get_partitions_statistics_req"] = get_partitions_statistics_req_Process;
                processMap_["get_aggr_stats_for"] = get_aggr_stats_for_Process;
                processMap_["set_aggr_stats_for"] = set_aggr_stats_for_Process;
                processMap_["delete_partition_column_statistics"] = delete_partition_column_statistics_Process;
                processMap_["delete_table_column_statistics"] = delete_table_column_statistics_Process;
                processMap_["create_function"] = create_function_Process;
                processMap_["drop_function"] = drop_function_Process;
                processMap_["alter_function"] = alter_function_Process;
                processMap_["get_functions"] = get_functions_Process;
                processMap_["get_function"] = get_function_Process;
                processMap_["create_role"] = create_role_Process;
                processMap_["drop_role"] = drop_role_Process;
                processMap_["get_role_names"] = get_role_names_Process;
                processMap_["grant_role"] = grant_role_Process;
                processMap_["revoke_role"] = revoke_role_Process;
                processMap_["list_roles"] = list_roles_Process;
                processMap_["grant_revoke_role"] = grant_revoke_role_Process;
                processMap_["get_principals_in_role"] = get_principals_in_role_Process;
                processMap_["get_role_grants_for_principal"] = get_role_grants_for_principal_Process;
                processMap_["get_privilege_set"] = get_privilege_set_Process;
                processMap_["list_privileges"] = list_privileges_Process;
                processMap_["grant_privileges"] = grant_privileges_Process;
                processMap_["revoke_privileges"] = revoke_privileges_Process;
                processMap_["grant_revoke_privileges"] = grant_revoke_privileges_Process;
                processMap_["set_ugi"] = set_ugi_Process;
                processMap_["get_delegation_token"] = get_delegation_token_Process;
                processMap_["renew_delegation_token"] = renew_delegation_token_Process;
                processMap_["cancel_delegation_token"] = cancel_delegation_token_Process;
                processMap_["get_open_txns"] = get_open_txns_Process;
                processMap_["get_open_txns_info"] = get_open_txns_info_Process;
                processMap_["open_txns"] = open_txns_Process;
                processMap_["abort_txn"] = abort_txn_Process;
                processMap_["commit_txn"] = commit_txn_Process;
                processMap_["lock"] = lock_Process;
                processMap_["check_lock"] = check_lock_Process;
                processMap_["unlock"] = unlock_Process;
                processMap_["show_locks"] = show_locks_Process;
                processMap_["heartbeat"] = heartbeat_Process;
                processMap_["heartbeat_txn_range"] = heartbeat_txn_range_Process;
                processMap_["compact"] = compact_Process;
                processMap_["show_compact"] = show_compact_Process;
            }

            private Iface iface_;

            public new bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void getMetaConf_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getMetaConf_args args = new getMetaConf_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getMetaConf_result result = new getMetaConf_result();
                try
                {
                    result.Success = iface_.getMetaConf(args.Key);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("getMetaConf", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void setMetaConf_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                setMetaConf_args args = new setMetaConf_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                setMetaConf_result result = new setMetaConf_result();
                try
                {
                    iface_.setMetaConf(args.Key, args.Value);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("setMetaConf", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void create_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                create_database_args args = new create_database_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                create_database_result result = new create_database_result();
                try
                {
                    iface_.create_database(args.Database);
                }
                catch (AlreadyExistsException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("create_database", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_database_args args = new get_database_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_database_result result = new get_database_result();
                try
                {
                    result.Success = iface_.get_database(args.Name);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_database", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_database_args args = new drop_database_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_database_result result = new drop_database_result();
                try
                {
                    iface_.drop_database(args.Name, args.DeleteData, args.Cascade);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidOperationException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("drop_database", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_databases_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_databases_args args = new get_databases_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_databases_result result = new get_databases_result();
                try
                {
                    result.Success = iface_.get_databases(args.Pattern);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_databases", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_all_databases_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_all_databases_args args = new get_all_databases_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_all_databases_result result = new get_all_databases_result();
                try
                {
                    result.Success = iface_.get_all_databases();
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_all_databases", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_database_args args = new alter_database_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_database_result result = new alter_database_result();
                try
                {
                    iface_.alter_database(args.Dbname, args.Db);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_database", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_type_args args = new get_type_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_type_result result = new get_type_result();
                try
                {
                    result.Success = iface_.get_type(args.Name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_type", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void create_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                create_type_args args = new create_type_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                create_type_result result = new create_type_result();
                try
                {
                    result.Success = iface_.create_type(args.Type);
                }
                catch (AlreadyExistsException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("create_type", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_type_args args = new drop_type_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_type_result result = new drop_type_result();
                try
                {
                    result.Success = iface_.drop_type(args.Type);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_type", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_type_all_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_type_all_args args = new get_type_all_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_type_all_result result = new get_type_all_result();
                try
                {
                    result.Success = iface_.get_type_all(args.Name);
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_type_all", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_fields_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_fields_args args = new get_fields_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_fields_result result = new get_fields_result();
                try
                {
                    result.Success = iface_.get_fields(args.Db_name, args.Table_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (UnknownTableException o2)
                {
                    result.O2 = o2;
                }
                catch (UnknownDBException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("get_fields", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_schema_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_schema_args args = new get_schema_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_schema_result result = new get_schema_result();
                try
                {
                    result.Success = iface_.get_schema(args.Db_name, args.Table_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (UnknownTableException o2)
                {
                    result.O2 = o2;
                }
                catch (UnknownDBException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("get_schema", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void create_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                create_table_args args = new create_table_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                create_table_result result = new create_table_result();
                try
                {
                    iface_.create_table(args.Tbl);
                }
                catch (AlreadyExistsException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                catch (NoSuchObjectException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("create_table", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void create_table_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                create_table_with_environment_context_args args = new create_table_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                create_table_with_environment_context_result result = new create_table_with_environment_context_result();
                try
                {
                    iface_.create_table_with_environment_context(args.Tbl, args.Environment_context);
                }
                catch (AlreadyExistsException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                catch (NoSuchObjectException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("create_table_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_table_args args = new drop_table_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_table_result result = new drop_table_result();
                try
                {
                    iface_.drop_table(args.Dbname, args.Name, args.DeleteData);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("drop_table", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_table_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_table_with_environment_context_args args = new drop_table_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_table_with_environment_context_result result = new drop_table_with_environment_context_result();
                try
                {
                    iface_.drop_table_with_environment_context(args.Dbname, args.Name, args.DeleteData, args.Environment_context);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("drop_table_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_tables_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_tables_args args = new get_tables_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_tables_result result = new get_tables_result();
                try
                {
                    result.Success = iface_.get_tables(args.Db_name, args.Pattern);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_tables", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_all_tables_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_all_tables_args args = new get_all_tables_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_all_tables_result result = new get_all_tables_result();
                try
                {
                    result.Success = iface_.get_all_tables(args.Db_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_all_tables", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_table_args args = new get_table_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_table_result result = new get_table_result();
                try
                {
                    result.Success = iface_.get_table(args.Dbname, args.Tbl_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_table", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_table_objects_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_table_objects_by_name_args args = new get_table_objects_by_name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_table_objects_by_name_result result = new get_table_objects_by_name_result();
                try
                {
                    result.Success = iface_.get_table_objects_by_name(args.Dbname, args.Tbl_names);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidOperationException o2)
                {
                    result.O2 = o2;
                }
                catch (UnknownDBException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("get_table_objects_by_name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_table_names_by_filter_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_table_names_by_filter_args args = new get_table_names_by_filter_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_table_names_by_filter_result result = new get_table_names_by_filter_result();
                try
                {
                    result.Success = iface_.get_table_names_by_filter(args.Dbname, args.Filter, args.Max_tables);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidOperationException o2)
                {
                    result.O2 = o2;
                }
                catch (UnknownDBException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("get_table_names_by_filter", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_table_args args = new alter_table_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_table_result result = new alter_table_result();
                try
                {
                    iface_.alter_table(args.Dbname, args.Tbl_name, args.New_tbl);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_table", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_table_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_table_with_environment_context_args args = new alter_table_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_table_with_environment_context_result result = new alter_table_with_environment_context_result();
                try
                {
                    iface_.alter_table_with_environment_context(args.Dbname, args.Tbl_name, args.New_tbl, args.Environment_context);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_table_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void add_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                add_partition_args args = new add_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                add_partition_result result = new add_partition_result();
                try
                {
                    result.Success = iface_.add_partition(args.New_part);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("add_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void add_partition_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                add_partition_with_environment_context_args args = new add_partition_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                add_partition_with_environment_context_result result = new add_partition_with_environment_context_result();
                try
                {
                    result.Success = iface_.add_partition_with_environment_context(args.New_part, args.Environment_context);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("add_partition_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void add_partitions_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                add_partitions_args args = new add_partitions_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                add_partitions_result result = new add_partitions_result();
                try
                {
                    result.Success = iface_.add_partitions(args.New_parts);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("add_partitions", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void append_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                append_partition_args args = new append_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                append_partition_result result = new append_partition_result();
                try
                {
                    result.Success = iface_.append_partition(args.Db_name, args.Tbl_name, args.Part_vals);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("append_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void add_partitions_req_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                add_partitions_req_args args = new add_partitions_req_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                add_partitions_req_result result = new add_partitions_req_result();
                try
                {
                    result.Success = iface_.add_partitions_req(args.Request);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("add_partitions_req", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void append_partition_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                append_partition_with_environment_context_args args = new append_partition_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                append_partition_with_environment_context_result result = new append_partition_with_environment_context_result();
                try
                {
                    result.Success = iface_.append_partition_with_environment_context(args.Db_name, args.Tbl_name, args.Part_vals, args.Environment_context);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("append_partition_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void append_partition_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                append_partition_by_name_args args = new append_partition_by_name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                append_partition_by_name_result result = new append_partition_by_name_result();
                try
                {
                    result.Success = iface_.append_partition_by_name(args.Db_name, args.Tbl_name, args.Part_name);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("append_partition_by_name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void append_partition_by_name_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                append_partition_by_name_with_environment_context_args args = new append_partition_by_name_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                append_partition_by_name_with_environment_context_result result = new append_partition_by_name_with_environment_context_result();
                try
                {
                    result.Success = iface_.append_partition_by_name_with_environment_context(args.Db_name, args.Tbl_name, args.Part_name, args.Environment_context);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("append_partition_by_name_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_partition_args args = new drop_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_partition_result result = new drop_partition_result();
                try
                {
                    result.Success = iface_.drop_partition(args.Db_name, args.Tbl_name, args.Part_vals, args.DeleteData);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_partition_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_partition_with_environment_context_args args = new drop_partition_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_partition_with_environment_context_result result = new drop_partition_with_environment_context_result();
                try
                {
                    result.Success = iface_.drop_partition_with_environment_context(args.Db_name, args.Tbl_name, args.Part_vals, args.DeleteData, args.Environment_context);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_partition_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_partition_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_partition_by_name_args args = new drop_partition_by_name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_partition_by_name_result result = new drop_partition_by_name_result();
                try
                {
                    result.Success = iface_.drop_partition_by_name(args.Db_name, args.Tbl_name, args.Part_name, args.DeleteData);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_partition_by_name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_partition_by_name_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_partition_by_name_with_environment_context_args args = new drop_partition_by_name_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_partition_by_name_with_environment_context_result result = new drop_partition_by_name_with_environment_context_result();
                try
                {
                    result.Success = iface_.drop_partition_by_name_with_environment_context(args.Db_name, args.Tbl_name, args.Part_name, args.DeleteData, args.Environment_context);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_partition_by_name_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_partitions_req_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_partitions_req_args args = new drop_partitions_req_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_partitions_req_result result = new drop_partitions_req_result();
                try
                {
                    result.Success = iface_.drop_partitions_req(args.Req);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_partitions_req", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partition_args args = new get_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partition_result result = new get_partition_result();
                try
                {
                    result.Success = iface_.get_partition(args.Db_name, args.Tbl_name, args.Part_vals);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void exchange_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                exchange_partition_args args = new exchange_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                exchange_partition_result result = new exchange_partition_result();
                try
                {
                    result.Success = iface_.exchange_partition(args.PartitionSpecs, args.Source_db, args.Source_table_name, args.Dest_db, args.Dest_table_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (InvalidObjectException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidInputException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("exchange_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partition_with_auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partition_with_auth_args args = new get_partition_with_auth_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partition_with_auth_result result = new get_partition_with_auth_result();
                try
                {
                    result.Success = iface_.get_partition_with_auth(args.Db_name, args.Tbl_name, args.Part_vals, args.User_name, args.Group_names);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partition_with_auth", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partition_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partition_by_name_args args = new get_partition_by_name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partition_by_name_result result = new get_partition_by_name_result();
                try
                {
                    result.Success = iface_.get_partition_by_name(args.Db_name, args.Tbl_name, args.Part_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partition_by_name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_args args = new get_partitions_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_result result = new get_partitions_result();
                try
                {
                    result.Success = iface_.get_partitions(args.Db_name, args.Tbl_name, args.Max_parts);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_with_auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_with_auth_args args = new get_partitions_with_auth_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_with_auth_result result = new get_partitions_with_auth_result();
                try
                {
                    result.Success = iface_.get_partitions_with_auth(args.Db_name, args.Tbl_name, args.Max_parts, args.User_name, args.Group_names);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_with_auth", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partition_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partition_names_args args = new get_partition_names_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partition_names_result result = new get_partition_names_result();
                try
                {
                    result.Success = iface_.get_partition_names(args.Db_name, args.Tbl_name, args.Max_parts);
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partition_names", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_ps_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_ps_args args = new get_partitions_ps_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_ps_result result = new get_partitions_ps_result();
                try
                {
                    result.Success = iface_.get_partitions_ps(args.Db_name, args.Tbl_name, args.Part_vals, args.Max_parts);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_ps", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_ps_with_auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_ps_with_auth_args args = new get_partitions_ps_with_auth_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_ps_with_auth_result result = new get_partitions_ps_with_auth_result();
                try
                {
                    result.Success = iface_.get_partitions_ps_with_auth(args.Db_name, args.Tbl_name, args.Part_vals, args.Max_parts, args.User_name, args.Group_names);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_ps_with_auth", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partition_names_ps_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partition_names_ps_args args = new get_partition_names_ps_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partition_names_ps_result result = new get_partition_names_ps_result();
                try
                {
                    result.Success = iface_.get_partition_names_ps(args.Db_name, args.Tbl_name, args.Part_vals, args.Max_parts);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partition_names_ps", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_by_filter_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_by_filter_args args = new get_partitions_by_filter_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_by_filter_result result = new get_partitions_by_filter_result();
                try
                {
                    result.Success = iface_.get_partitions_by_filter(args.Db_name, args.Tbl_name, args.Filter, args.Max_parts);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_by_expr_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_by_expr_args args = new get_partitions_by_expr_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_by_expr_result result = new get_partitions_by_expr_result();
                try
                {
                    result.Success = iface_.get_partitions_by_expr(args.Req);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_by_expr", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_by_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_by_names_args args = new get_partitions_by_names_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_by_names_result result = new get_partitions_by_names_result();
                try
                {
                    result.Success = iface_.get_partitions_by_names(args.Db_name, args.Tbl_name, args.Names);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_by_names", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_partition_args args = new alter_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_partition_result result = new alter_partition_result();
                try
                {
                    iface_.alter_partition(args.Db_name, args.Tbl_name, args.New_part);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_partitions_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_partitions_args args = new alter_partitions_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_partitions_result result = new alter_partitions_result();
                try
                {
                    iface_.alter_partitions(args.Db_name, args.Tbl_name, args.New_parts);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_partitions", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_partition_with_environment_context_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_partition_with_environment_context_args args = new alter_partition_with_environment_context_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_partition_with_environment_context_result result = new alter_partition_with_environment_context_result();
                try
                {
                    iface_.alter_partition_with_environment_context(args.Db_name, args.Tbl_name, args.New_part, args.Environment_context);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_partition_with_environment_context", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void rename_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                rename_partition_args args = new rename_partition_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                rename_partition_result result = new rename_partition_result();
                try
                {
                    iface_.rename_partition(args.Db_name, args.Tbl_name, args.Part_vals, args.New_part);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("rename_partition", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void partition_name_has_valid_characters_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                partition_name_has_valid_characters_args args = new partition_name_has_valid_characters_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                partition_name_has_valid_characters_result result = new partition_name_has_valid_characters_result();
                try
                {
                    result.Success = iface_.partition_name_has_valid_characters(args.Part_vals, args.Throw_exception);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("partition_name_has_valid_characters", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_config_value_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_config_value_args args = new get_config_value_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_config_value_result result = new get_config_value_result();
                try
                {
                    result.Success = iface_.get_config_value(args.Name, args.DefaultValue);
                }
                catch (ConfigValSecurityException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_config_value", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void partition_name_to_vals_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                partition_name_to_vals_args args = new partition_name_to_vals_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                partition_name_to_vals_result result = new partition_name_to_vals_result();
                try
                {
                    result.Success = iface_.partition_name_to_vals(args.Part_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("partition_name_to_vals", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void partition_name_to_spec_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                partition_name_to_spec_args args = new partition_name_to_spec_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                partition_name_to_spec_result result = new partition_name_to_spec_result();
                try
                {
                    result.Success = iface_.partition_name_to_spec(args.Part_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("partition_name_to_spec", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void markPartitionForEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                markPartitionForEvent_args args = new markPartitionForEvent_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                markPartitionForEvent_result result = new markPartitionForEvent_result();
                try
                {
                    iface_.markPartitionForEvent(args.Db_name, args.Tbl_name, args.Part_vals, args.EventType);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (UnknownDBException o3)
                {
                    result.O3 = o3;
                }
                catch (UnknownTableException o4)
                {
                    result.O4 = o4;
                }
                catch (UnknownPartitionException o5)
                {
                    result.O5 = o5;
                }
                catch (InvalidPartitionException o6)
                {
                    result.O6 = o6;
                }
                oprot.WriteMessageBegin(new TMessage("markPartitionForEvent", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void isPartitionMarkedForEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                isPartitionMarkedForEvent_args args = new isPartitionMarkedForEvent_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                isPartitionMarkedForEvent_result result = new isPartitionMarkedForEvent_result();
                try
                {
                    result.Success = iface_.isPartitionMarkedForEvent(args.Db_name, args.Tbl_name, args.Part_vals, args.EventType);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (UnknownDBException o3)
                {
                    result.O3 = o3;
                }
                catch (UnknownTableException o4)
                {
                    result.O4 = o4;
                }
                catch (UnknownPartitionException o5)
                {
                    result.O5 = o5;
                }
                catch (InvalidPartitionException o6)
                {
                    result.O6 = o6;
                }
                oprot.WriteMessageBegin(new TMessage("isPartitionMarkedForEvent", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void add_index_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                add_index_args args = new add_index_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                add_index_result result = new add_index_result();
                try
                {
                    result.Success = iface_.add_index(args.New_index, args.Index_table);
                }
                catch (InvalidObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (AlreadyExistsException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("add_index", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_index_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_index_args args = new alter_index_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_index_result result = new alter_index_result();
                try
                {
                    iface_.alter_index(args.Dbname, args.Base_tbl_name, args.Idx_name, args.New_idx);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_index", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_index_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_index_by_name_args args = new drop_index_by_name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_index_by_name_result result = new drop_index_by_name_result();
                try
                {
                    result.Success = iface_.drop_index_by_name(args.Db_name, args.Tbl_name, args.Index_name, args.DeleteData);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("drop_index_by_name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_index_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_index_by_name_args args = new get_index_by_name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_index_by_name_result result = new get_index_by_name_result();
                try
                {
                    result.Success = iface_.get_index_by_name(args.Db_name, args.Tbl_name, args.Index_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_index_by_name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_indexes_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_indexes_args args = new get_indexes_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_indexes_result result = new get_indexes_result();
                try
                {
                    result.Success = iface_.get_indexes(args.Db_name, args.Tbl_name, args.Max_indexes);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_indexes", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_index_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_index_names_args args = new get_index_names_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_index_names_result result = new get_index_names_result();
                try
                {
                    result.Success = iface_.get_index_names(args.Db_name, args.Tbl_name, args.Max_indexes);
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_index_names", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void update_table_column_statistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                update_table_column_statistics_args args = new update_table_column_statistics_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                update_table_column_statistics_result result = new update_table_column_statistics_result();
                try
                {
                    result.Success = iface_.update_table_column_statistics(args.Stats_obj);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidInputException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("update_table_column_statistics", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void update_partition_column_statistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                update_partition_column_statistics_args args = new update_partition_column_statistics_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                update_partition_column_statistics_result result = new update_partition_column_statistics_result();
                try
                {
                    result.Success = iface_.update_partition_column_statistics(args.Stats_obj);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidInputException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("update_partition_column_statistics", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_table_column_statistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_table_column_statistics_args args = new get_table_column_statistics_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_table_column_statistics_result result = new get_table_column_statistics_result();
                try
                {
                    result.Success = iface_.get_table_column_statistics(args.Db_name, args.Tbl_name, args.Col_name);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                catch (InvalidInputException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidObjectException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("get_table_column_statistics", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partition_column_statistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partition_column_statistics_args args = new get_partition_column_statistics_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partition_column_statistics_result result = new get_partition_column_statistics_result();
                try
                {
                    result.Success = iface_.get_partition_column_statistics(args.Db_name, args.Tbl_name, args.Part_name, args.Col_name);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                catch (InvalidInputException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidObjectException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("get_partition_column_statistics", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_table_statistics_req_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_table_statistics_req_args args = new get_table_statistics_req_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_table_statistics_req_result result = new get_table_statistics_req_result();
                try
                {
                    result.Success = iface_.get_table_statistics_req(args.Request);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_table_statistics_req", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_partitions_statistics_req_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_partitions_statistics_req_args args = new get_partitions_statistics_req_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_partitions_statistics_req_result result = new get_partitions_statistics_req_result();
                try
                {
                    result.Success = iface_.get_partitions_statistics_req(args.Request);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_partitions_statistics_req", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_aggr_stats_for_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_aggr_stats_for_args args = new get_aggr_stats_for_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_aggr_stats_for_result result = new get_aggr_stats_for_result();
                try
                {
                    result.Success = iface_.get_aggr_stats_for(args.Request);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_aggr_stats_for", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void set_aggr_stats_for_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                set_aggr_stats_for_args args = new set_aggr_stats_for_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                set_aggr_stats_for_result result = new set_aggr_stats_for_result();
                try
                {
                    result.Success = iface_.set_aggr_stats_for(args.Request);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidInputException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("set_aggr_stats_for", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void delete_partition_column_statistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                delete_partition_column_statistics_args args = new delete_partition_column_statistics_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                delete_partition_column_statistics_result result = new delete_partition_column_statistics_result();
                try
                {
                    result.Success = iface_.delete_partition_column_statistics(args.Db_name, args.Tbl_name, args.Part_name, args.Col_name);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                catch (InvalidObjectException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidInputException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("delete_partition_column_statistics", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void delete_table_column_statistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                delete_table_column_statistics_args args = new delete_table_column_statistics_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                delete_table_column_statistics_result result = new delete_table_column_statistics_result();
                try
                {
                    result.Success = iface_.delete_table_column_statistics(args.Db_name, args.Tbl_name, args.Col_name);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                catch (InvalidObjectException o3)
                {
                    result.O3 = o3;
                }
                catch (InvalidInputException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("delete_table_column_statistics", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void create_function_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                create_function_args args = new create_function_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                create_function_result result = new create_function_result();
                try
                {
                    iface_.create_function(args.Func);
                }
                catch (AlreadyExistsException o1)
                {
                    result.O1 = o1;
                }
                catch (InvalidObjectException o2)
                {
                    result.O2 = o2;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                catch (NoSuchObjectException o4)
                {
                    result.O4 = o4;
                }
                oprot.WriteMessageBegin(new TMessage("create_function", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_function_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_function_args args = new drop_function_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_function_result result = new drop_function_result();
                try
                {
                    iface_.drop_function(args.DbName, args.FuncName);
                }
                catch (NoSuchObjectException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("drop_function", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void alter_function_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                alter_function_args args = new alter_function_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                alter_function_result result = new alter_function_result();
                try
                {
                    iface_.alter_function(args.DbName, args.FuncName, args.NewFunc);
                }
                catch (InvalidOperationException o1)
                {
                    result.O1 = o1;
                }
                catch (MetaException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("alter_function", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_functions_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_functions_args args = new get_functions_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_functions_result result = new get_functions_result();
                try
                {
                    result.Success = iface_.get_functions(args.DbName, args.Pattern);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_functions", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_function_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_function_args args = new get_function_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_function_result result = new get_function_result();
                try
                {
                    result.Success = iface_.get_function(args.DbName, args.FuncName);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchObjectException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("get_function", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void create_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                create_role_args args = new create_role_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                create_role_result result = new create_role_result();
                try
                {
                    result.Success = iface_.create_role(args.Role);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("create_role", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void drop_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                drop_role_args args = new drop_role_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                drop_role_result result = new drop_role_result();
                try
                {
                    result.Success = iface_.drop_role(args.Role_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("drop_role", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_role_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_role_names_args args = new get_role_names_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_role_names_result result = new get_role_names_result();
                try
                {
                    result.Success = iface_.get_role_names();
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_role_names", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void grant_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                grant_role_args args = new grant_role_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                grant_role_result result = new grant_role_result();
                try
                {
                    result.Success = iface_.grant_role(args.Role_name, args.Principal_name, args.Principal_type, args.Grantor, args.GrantorType, args.Grant_option);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("grant_role", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void revoke_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                revoke_role_args args = new revoke_role_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                revoke_role_result result = new revoke_role_result();
                try
                {
                    result.Success = iface_.revoke_role(args.Role_name, args.Principal_name, args.Principal_type);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("revoke_role", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void list_roles_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                list_roles_args args = new list_roles_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                list_roles_result result = new list_roles_result();
                try
                {
                    result.Success = iface_.list_roles(args.Principal_name, args.Principal_type);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("list_roles", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void grant_revoke_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                grant_revoke_role_args args = new grant_revoke_role_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                grant_revoke_role_result result = new grant_revoke_role_result();
                try
                {
                    result.Success = iface_.grant_revoke_role(args.Request);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("grant_revoke_role", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_principals_in_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_principals_in_role_args args = new get_principals_in_role_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_principals_in_role_result result = new get_principals_in_role_result();
                try
                {
                    result.Success = iface_.get_principals_in_role(args.Request);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_principals_in_role", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_role_grants_for_principal_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_role_grants_for_principal_args args = new get_role_grants_for_principal_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_role_grants_for_principal_result result = new get_role_grants_for_principal_result();
                try
                {
                    result.Success = iface_.get_role_grants_for_principal(args.Request);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_role_grants_for_principal", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_privilege_set_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_privilege_set_args args = new get_privilege_set_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_privilege_set_result result = new get_privilege_set_result();
                try
                {
                    result.Success = iface_.get_privilege_set(args.HiveObject, args.User_name, args.Group_names);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_privilege_set", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void list_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                list_privileges_args args = new list_privileges_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                list_privileges_result result = new list_privileges_result();
                try
                {
                    result.Success = iface_.list_privileges(args.Principal_name, args.Principal_type, args.HiveObject);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("list_privileges", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void grant_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                grant_privileges_args args = new grant_privileges_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                grant_privileges_result result = new grant_privileges_result();
                try
                {
                    result.Success = iface_.grant_privileges(args.Privileges);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("grant_privileges", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void revoke_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                revoke_privileges_args args = new revoke_privileges_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                revoke_privileges_result result = new revoke_privileges_result();
                try
                {
                    result.Success = iface_.revoke_privileges(args.Privileges);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("revoke_privileges", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void grant_revoke_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                grant_revoke_privileges_args args = new grant_revoke_privileges_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                grant_revoke_privileges_result result = new grant_revoke_privileges_result();
                try
                {
                    result.Success = iface_.grant_revoke_privileges(args.Request);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("grant_revoke_privileges", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void set_ugi_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                set_ugi_args args = new set_ugi_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                set_ugi_result result = new set_ugi_result();
                try
                {
                    result.Success = iface_.set_ugi(args.User_name, args.Group_names);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("set_ugi", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_delegation_token_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_delegation_token_args args = new get_delegation_token_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_delegation_token_result result = new get_delegation_token_result();
                try
                {
                    result.Success = iface_.get_delegation_token(args.Token_owner, args.Renewer_kerberos_principal_name);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("get_delegation_token", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void renew_delegation_token_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                renew_delegation_token_args args = new renew_delegation_token_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                renew_delegation_token_result result = new renew_delegation_token_result();
                try
                {
                    result.Success = iface_.renew_delegation_token(args.Token_str_form);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("renew_delegation_token", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void cancel_delegation_token_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                cancel_delegation_token_args args = new cancel_delegation_token_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                cancel_delegation_token_result result = new cancel_delegation_token_result();
                try
                {
                    iface_.cancel_delegation_token(args.Token_str_form);
                }
                catch (MetaException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("cancel_delegation_token", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_open_txns_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_open_txns_args args = new get_open_txns_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_open_txns_result result = new get_open_txns_result();
                result.Success = iface_.get_open_txns();
                oprot.WriteMessageBegin(new TMessage("get_open_txns", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_open_txns_info_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                get_open_txns_info_args args = new get_open_txns_info_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                get_open_txns_info_result result = new get_open_txns_info_result();
                result.Success = iface_.get_open_txns_info();
                oprot.WriteMessageBegin(new TMessage("get_open_txns_info", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void open_txns_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                open_txns_args args = new open_txns_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                open_txns_result result = new open_txns_result();
                result.Success = iface_.open_txns(args.Rqst);
                oprot.WriteMessageBegin(new TMessage("open_txns", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void abort_txn_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                abort_txn_args args = new abort_txn_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                abort_txn_result result = new abort_txn_result();
                try
                {
                    iface_.abort_txn(args.Rqst);
                }
                catch (NoSuchTxnException o1)
                {
                    result.O1 = o1;
                }
                oprot.WriteMessageBegin(new TMessage("abort_txn", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void commit_txn_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                commit_txn_args args = new commit_txn_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                commit_txn_result result = new commit_txn_result();
                try
                {
                    iface_.commit_txn(args.Rqst);
                }
                catch (NoSuchTxnException o1)
                {
                    result.O1 = o1;
                }
                catch (TxnAbortedException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("commit_txn", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void lock_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                lock_args args = new lock_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                lock_result result = new lock_result();
                try
                {
                    result.Success = iface_.Lock(args.Rqst);
                }
                catch (NoSuchTxnException o1)
                {
                    result.O1 = o1;
                }
                catch (TxnAbortedException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("lock", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void check_lock_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                check_lock_args args = new check_lock_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                check_lock_result result = new check_lock_result();
                try
                {
                    result.Success = iface_.check_lock(args.Rqst);
                }
                catch (NoSuchTxnException o1)
                {
                    result.O1 = o1;
                }
                catch (TxnAbortedException o2)
                {
                    result.O2 = o2;
                }
                catch (NoSuchLockException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("check_lock", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void unlock_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                unlock_args args = new unlock_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                unlock_result result = new unlock_result();
                try
                {
                    iface_.unlock(args.Rqst);
                }
                catch (NoSuchLockException o1)
                {
                    result.O1 = o1;
                }
                catch (TxnOpenException o2)
                {
                    result.O2 = o2;
                }
                oprot.WriteMessageBegin(new TMessage("unlock", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void show_locks_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                show_locks_args args = new show_locks_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                show_locks_result result = new show_locks_result();
                result.Success = iface_.show_locks(args.Rqst);
                oprot.WriteMessageBegin(new TMessage("show_locks", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void heartbeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                heartbeat_args args = new heartbeat_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                heartbeat_result result = new heartbeat_result();
                try
                {
                    iface_.heartbeat(args.Ids);
                }
                catch (NoSuchLockException o1)
                {
                    result.O1 = o1;
                }
                catch (NoSuchTxnException o2)
                {
                    result.O2 = o2;
                }
                catch (TxnAbortedException o3)
                {
                    result.O3 = o3;
                }
                oprot.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void heartbeat_txn_range_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                heartbeat_txn_range_args args = new heartbeat_txn_range_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                heartbeat_txn_range_result result = new heartbeat_txn_range_result();
                result.Success = iface_.heartbeat_txn_range(args.Txns);
                oprot.WriteMessageBegin(new TMessage("heartbeat_txn_range", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void compact_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                compact_args args = new compact_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                compact_result result = new compact_result();
                iface_.compact(args.Rqst);
                oprot.WriteMessageBegin(new TMessage("compact", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void show_compact_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                show_compact_args args = new show_compact_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                show_compact_result result = new show_compact_result();
                result.Success = iface_.show_compact(args.Rqst);
                oprot.WriteMessageBegin(new TMessage("show_compact", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getMetaConf_args : TBase
        {
            private string _key;

            public string Key
            {
                get
                {
                    return _key;
                }
                set
                {
                    __isset.key = true;
                    this._key = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool key;
            }

            public getMetaConf_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Key = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getMetaConf_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Key != null && __isset.key)
                {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getMetaConf_args(");
                sb.Append("Key: ");
                sb.Append(Key);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class getMetaConf_result : TBase
        {
            private string _success;
            private MetaException _o1;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public getMetaConf_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("getMetaConf_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("getMetaConf_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class setMetaConf_args : TBase
        {
            private string _key;
            private string _value;

            public string Key
            {
                get
                {
                    return _key;
                }
                set
                {
                    __isset.key = true;
                    this._key = value;
                }
            }

            public string Value
            {
                get
                {
                    return _value;
                }
                set
                {
                    __isset.value = true;
                    this._value = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool key;
                public bool value;
            }

            public setMetaConf_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Key = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Value = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("setMetaConf_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Key != null && __isset.key)
                {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                if (Value != null && __isset.value)
                {
                    field.Name = "value";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Value);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("setMetaConf_args(");
                sb.Append("Key: ");
                sb.Append(Key);
                sb.Append(",Value: ");
                sb.Append(Value);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class setMetaConf_result : TBase
        {
            private MetaException _o1;

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
            }

            public setMetaConf_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("setMetaConf_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("setMetaConf_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_database_args : TBase
        {
            private Database _database;

            public Database Database
            {
                get
                {
                    return _database;
                }
                set
                {
                    __isset.database = true;
                    this._database = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool database;
            }

            public create_database_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Database = new Database();
                                Database.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_database_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Database != null && __isset.database)
                {
                    field.Name = "database";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Database.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_database_args(");
                sb.Append("Database: ");
                sb.Append(Database == null ? "<null>" : Database.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_database_result : TBase
        {
            private AlreadyExistsException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;

            public AlreadyExistsException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public create_database_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new AlreadyExistsException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_database_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_database_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_database_args : TBase
        {
            private string _name;

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool name;
            }

            public get_database_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_database_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_database_args(");
                sb.Append("Name: ");
                sb.Append(Name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_database_result : TBase
        {
            private Database _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public Database Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_database_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Database();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_database_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_database_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_database_args : TBase
        {
            private string _name;
            private bool _deleteData;
            private bool _cascade;

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public bool Cascade
            {
                get
                {
                    return _cascade;
                }
                set
                {
                    __isset.cascade = true;
                    this._cascade = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool name;
                public bool deleteData;
                public bool cascade;
            }

            public drop_database_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Bool)
                            {
                                Cascade = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_database_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                if (__isset.cascade)
                {
                    field.Name = "cascade";
                    field.Type = TType.Bool;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Cascade);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_database_args(");
                sb.Append("Name: ");
                sb.Append(Name);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(",Cascade: ");
                sb.Append(Cascade);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_database_result : TBase
        {
            private NoSuchObjectException _o1;
            private InvalidOperationException _o2;
            private MetaException _o3;

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidOperationException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public drop_database_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidOperationException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_database_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_database_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_databases_args : TBase
        {
            private string _pattern;

            public string Pattern
            {
                get
                {
                    return _pattern;
                }
                set
                {
                    __isset.pattern = true;
                    this._pattern = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool pattern;
            }

            public get_databases_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Pattern = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_databases_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Pattern != null && __isset.pattern)
                {
                    field.Name = "pattern";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Pattern);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_databases_args(");
                sb.Append("Pattern: ");
                sb.Append(Pattern);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_databases_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_databases_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list229 = iprot.ReadListBegin();
                                    for (int _i230 = 0; _i230 < _list229.Count; ++_i230)
                                    {
                                        string _elem231 = null;
                                        _elem231 = iprot.ReadString();
                                        Success.Add(_elem231);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_databases_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter232 in Success)
                            {
                                oprot.WriteString(_iter232);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_databases_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_all_databases_args : TBase
        {
            public get_all_databases_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_all_databases_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_all_databases_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_all_databases_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_all_databases_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list233 = iprot.ReadListBegin();
                                    for (int _i234 = 0; _i234 < _list233.Count; ++_i234)
                                    {
                                        string _elem235 = null;
                                        _elem235 = iprot.ReadString();
                                        Success.Add(_elem235);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_all_databases_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter236 in Success)
                            {
                                oprot.WriteString(_iter236);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_all_databases_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_database_args : TBase
        {
            private string _dbname;
            private Database _db;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public Database Db
            {
                get
                {
                    return _db;
                }
                set
                {
                    __isset.db = true;
                    this._db = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool db;
            }

            public alter_database_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                Db = new Database();
                                Db.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_database_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Db != null && __isset.db)
                {
                    field.Name = "db";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    Db.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_database_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Db: ");
                sb.Append(Db == null ? "<null>" : Db.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_database_result : TBase
        {
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_database_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_database_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_database_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_type_args : TBase
        {
            private string _name;

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool name;
            }

            public get_type_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_type_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_type_args(");
                sb.Append("Name: ");
                sb.Append(Name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_type_result : TBase
        {
            private Type _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Type Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_type_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Type();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_type_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_type_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_type_args : TBase
        {
            private Type _type;

            public Type Type
            {
                get
                {
                    return _type;
                }
                set
                {
                    __isset.type = true;
                    this._type = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool type;
            }

            public create_type_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Type = new Type();
                                Type.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_type_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Type != null && __isset.type)
                {
                    field.Name = "type";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Type.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_type_args(");
                sb.Append("Type: ");
                sb.Append(Type == null ? "<null>" : Type.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_type_result : TBase
        {
            private bool _success;
            private AlreadyExistsException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AlreadyExistsException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public create_type_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new AlreadyExistsException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_type_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_type_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_type_args : TBase
        {
            private string _type;

            public string Type
            {
                get
                {
                    return _type;
                }
                set
                {
                    __isset.type = true;
                    this._type = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool type;
            }

            public drop_type_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Type = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_type_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Type != null && __isset.type)
                {
                    field.Name = "type";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Type);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_type_args(");
                sb.Append("Type: ");
                sb.Append(Type);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_type_result : TBase
        {
            private bool _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_type_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_type_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_type_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_type_all_args : TBase
        {
            private string _name;

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool name;
            }

            public get_type_all_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_type_all_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_type_all_args(");
                sb.Append("Name: ");
                sb.Append(Name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_type_all_result : TBase
        {
            private Dictionary<string, Type> _success;
            private MetaException _o2;

            public Dictionary<string, Type> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o2;
            }

            public get_type_all_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Success = new Dictionary<string, Type>();
                                    TMap _map237 = iprot.ReadMapBegin();
                                    for (int _i238 = 0; _i238 < _map237.Count; ++_i238)
                                    {
                                        string _key239;
                                        Type _val240;
                                        _key239 = iprot.ReadString();
                                        _val240 = new Type();
                                        _val240.Read(iprot);
                                        Success[_key239] = _val240;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_type_all_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Map;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
                            foreach (string _iter241 in Success.Keys)
                            {
                                oprot.WriteString(_iter241);
                                Success[_iter241].Write(oprot);
                            }
                            oprot.WriteMapEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_type_all_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_fields_args : TBase
        {
            private string _db_name;
            private string _table_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Table_name
            {
                get
                {
                    return _table_name;
                }
                set
                {
                    __isset.table_name = true;
                    this._table_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool table_name;
            }

            public get_fields_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Table_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_fields_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Table_name != null && __isset.table_name)
                {
                    field.Name = "table_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Table_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_fields_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Table_name: ");
                sb.Append(Table_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_fields_result : TBase
        {
            private List<FieldSchema> _success;
            private MetaException _o1;
            private UnknownTableException _o2;
            private UnknownDBException _o3;

            public List<FieldSchema> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public UnknownTableException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public UnknownDBException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public get_fields_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<FieldSchema>();
                                    TList _list242 = iprot.ReadListBegin();
                                    for (int _i243 = 0; _i243 < _list242.Count; ++_i243)
                                    {
                                        FieldSchema _elem244 = new FieldSchema();
                                        _elem244 = new FieldSchema();
                                        _elem244.Read(iprot);
                                        Success.Add(_elem244);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new UnknownTableException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new UnknownDBException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_fields_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (FieldSchema _iter245 in Success)
                            {
                                _iter245.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_fields_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_schema_args : TBase
        {
            private string _db_name;
            private string _table_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Table_name
            {
                get
                {
                    return _table_name;
                }
                set
                {
                    __isset.table_name = true;
                    this._table_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool table_name;
            }

            public get_schema_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Table_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_schema_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Table_name != null && __isset.table_name)
                {
                    field.Name = "table_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Table_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_schema_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Table_name: ");
                sb.Append(Table_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_schema_result : TBase
        {
            private List<FieldSchema> _success;
            private MetaException _o1;
            private UnknownTableException _o2;
            private UnknownDBException _o3;

            public List<FieldSchema> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public UnknownTableException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public UnknownDBException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public get_schema_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<FieldSchema>();
                                    TList _list246 = iprot.ReadListBegin();
                                    for (int _i247 = 0; _i247 < _list246.Count; ++_i247)
                                    {
                                        FieldSchema _elem248 = new FieldSchema();
                                        _elem248 = new FieldSchema();
                                        _elem248.Read(iprot);
                                        Success.Add(_elem248);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new UnknownTableException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new UnknownDBException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_schema_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (FieldSchema _iter249 in Success)
                            {
                                _iter249.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_schema_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_table_args : TBase
        {
            private Table _tbl;

            public Table Tbl
            {
                get
                {
                    return _tbl;
                }
                set
                {
                    __isset.tbl = true;
                    this._tbl = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool tbl;
            }

            public create_table_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Tbl = new Table();
                                Tbl.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_table_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Tbl != null && __isset.tbl)
                {
                    field.Name = "tbl";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Tbl.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_table_args(");
                sb.Append("Tbl: ");
                sb.Append(Tbl == null ? "<null>" : Tbl.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_table_result : TBase
        {
            private AlreadyExistsException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;
            private NoSuchObjectException _o4;

            public AlreadyExistsException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public NoSuchObjectException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public create_table_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new AlreadyExistsException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new NoSuchObjectException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_table_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_table_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_table_with_environment_context_args : TBase
        {
            private Table _tbl;
            private EnvironmentContext _environment_context;

            public Table Tbl
            {
                get
                {
                    return _tbl;
                }
                set
                {
                    __isset.tbl = true;
                    this._tbl = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool tbl;
                public bool environment_context;
            }

            public create_table_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Tbl = new Table();
                                Tbl.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_table_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Tbl != null && __isset.tbl)
                {
                    field.Name = "tbl";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Tbl.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_table_with_environment_context_args(");
                sb.Append("Tbl: ");
                sb.Append(Tbl == null ? "<null>" : Tbl.ToString());
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_table_with_environment_context_result : TBase
        {
            private AlreadyExistsException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;
            private NoSuchObjectException _o4;

            public AlreadyExistsException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public NoSuchObjectException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public create_table_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new AlreadyExistsException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new NoSuchObjectException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_table_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_table_with_environment_context_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_table_args : TBase
        {
            private string _dbname;
            private string _name;
            private bool _deleteData;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool name;
                public bool deleteData;
            }

            public drop_table_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_table_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_table_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Name: ");
                sb.Append(Name);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_table_result : TBase
        {
            private NoSuchObjectException _o1;
            private MetaException _o3;

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o3;
            }

            public drop_table_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_table_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_table_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_table_with_environment_context_args : TBase
        {
            private string _dbname;
            private string _name;
            private bool _deleteData;
            private EnvironmentContext _environment_context;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool name;
                public bool deleteData;
                public bool environment_context;
            }

            public drop_table_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_table_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_table_with_environment_context_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Name: ");
                sb.Append(Name);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_table_with_environment_context_result : TBase
        {
            private NoSuchObjectException _o1;
            private MetaException _o3;

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o3;
            }

            public drop_table_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_table_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_table_with_environment_context_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_tables_args : TBase
        {
            private string _db_name;
            private string _pattern;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Pattern
            {
                get
                {
                    return _pattern;
                }
                set
                {
                    __isset.pattern = true;
                    this._pattern = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool pattern;
            }

            public get_tables_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Pattern = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_tables_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Pattern != null && __isset.pattern)
                {
                    field.Name = "pattern";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Pattern);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_tables_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Pattern: ");
                sb.Append(Pattern);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_tables_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_tables_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list250 = iprot.ReadListBegin();
                                    for (int _i251 = 0; _i251 < _list250.Count; ++_i251)
                                    {
                                        string _elem252 = null;
                                        _elem252 = iprot.ReadString();
                                        Success.Add(_elem252);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_tables_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter253 in Success)
                            {
                                oprot.WriteString(_iter253);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_tables_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_all_tables_args : TBase
        {
            private string _db_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
            }

            public get_all_tables_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_all_tables_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_all_tables_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_all_tables_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_all_tables_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list254 = iprot.ReadListBegin();
                                    for (int _i255 = 0; _i255 < _list254.Count; ++_i255)
                                    {
                                        string _elem256 = null;
                                        _elem256 = iprot.ReadString();
                                        Success.Add(_elem256);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_all_tables_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter257 in Success)
                            {
                                oprot.WriteString(_iter257);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_all_tables_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_args : TBase
        {
            private string _dbname;
            private string _tbl_name;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool tbl_name;
            }

            public get_table_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_result : TBase
        {
            private Table _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Table Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_table_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Table();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_objects_by_name_args : TBase
        {
            private string _dbname;
            private List<string> _tbl_names;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public List<string> Tbl_names
            {
                get
                {
                    return _tbl_names;
                }
                set
                {
                    __isset.tbl_names = true;
                    this._tbl_names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool tbl_names;
            }

            public get_table_objects_by_name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    Tbl_names = new List<string>();
                                    TList _list258 = iprot.ReadListBegin();
                                    for (int _i259 = 0; _i259 < _list258.Count; ++_i259)
                                    {
                                        string _elem260 = null;
                                        _elem260 = iprot.ReadString();
                                        Tbl_names.Add(_elem260);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_objects_by_name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_names != null && __isset.tbl_names)
                {
                    field.Name = "tbl_names";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Tbl_names.Count));
                        foreach (string _iter261 in Tbl_names)
                        {
                            oprot.WriteString(_iter261);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_objects_by_name_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Tbl_names: ");
                sb.Append(Tbl_names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_objects_by_name_result : TBase
        {
            private List<Table> _success;
            private MetaException _o1;
            private InvalidOperationException _o2;
            private UnknownDBException _o3;

            public List<Table> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidOperationException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public UnknownDBException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public get_table_objects_by_name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Table>();
                                    TList _list262 = iprot.ReadListBegin();
                                    for (int _i263 = 0; _i263 < _list262.Count; ++_i263)
                                    {
                                        Table _elem264 = new Table();
                                        _elem264 = new Table();
                                        _elem264.Read(iprot);
                                        Success.Add(_elem264);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidOperationException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new UnknownDBException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_objects_by_name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Table _iter265 in Success)
                            {
                                _iter265.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_objects_by_name_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_names_by_filter_args : TBase
        {
            private string _dbname;
            private string _filter;
            private short _max_tables;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Filter
            {
                get
                {
                    return _filter;
                }
                set
                {
                    __isset.filter = true;
                    this._filter = value;
                }
            }

            public short Max_tables
            {
                get
                {
                    return _max_tables;
                }
                set
                {
                    __isset.max_tables = true;
                    this._max_tables = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool filter;
                public bool max_tables;
            }

            public get_table_names_by_filter_args()
            {
                this._max_tables = -1;
                this.__isset.max_tables = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Filter = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I16)
                            {
                                Max_tables = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_names_by_filter_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Filter != null && __isset.filter)
                {
                    field.Name = "filter";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filter);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_tables)
                {
                    field.Name = "max_tables";
                    field.Type = TType.I16;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_tables);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_names_by_filter_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Filter: ");
                sb.Append(Filter);
                sb.Append(",Max_tables: ");
                sb.Append(Max_tables);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_names_by_filter_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;
            private InvalidOperationException _o2;
            private UnknownDBException _o3;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidOperationException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public UnknownDBException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public get_table_names_by_filter_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list266 = iprot.ReadListBegin();
                                    for (int _i267 = 0; _i267 < _list266.Count; ++_i267)
                                    {
                                        string _elem268 = null;
                                        _elem268 = iprot.ReadString();
                                        Success.Add(_elem268);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidOperationException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new UnknownDBException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_names_by_filter_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter269 in Success)
                            {
                                oprot.WriteString(_iter269);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_names_by_filter_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_table_args : TBase
        {
            private string _dbname;
            private string _tbl_name;
            private Table _new_tbl;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Table New_tbl
            {
                get
                {
                    return _new_tbl;
                }
                set
                {
                    __isset.new_tbl = true;
                    this._new_tbl = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool tbl_name;
                public bool new_tbl;
            }

            public alter_table_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                New_tbl = new Table();
                                New_tbl.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_table_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (New_tbl != null && __isset.new_tbl)
                {
                    field.Name = "new_tbl";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    New_tbl.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_table_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",New_tbl: ");
                sb.Append(New_tbl == null ? "<null>" : New_tbl.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_table_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_table_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_table_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_table_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_table_with_environment_context_args : TBase
        {
            private string _dbname;
            private string _tbl_name;
            private Table _new_tbl;
            private EnvironmentContext _environment_context;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Table New_tbl
            {
                get
                {
                    return _new_tbl;
                }
                set
                {
                    __isset.new_tbl = true;
                    this._new_tbl = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool tbl_name;
                public bool new_tbl;
                public bool environment_context;
            }

            public alter_table_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                New_tbl = new Table();
                                New_tbl.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_table_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (New_tbl != null && __isset.new_tbl)
                {
                    field.Name = "new_tbl";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    New_tbl.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_table_with_environment_context_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",New_tbl: ");
                sb.Append(New_tbl == null ? "<null>" : New_tbl.ToString());
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_table_with_environment_context_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_table_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_table_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_table_with_environment_context_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partition_args : TBase
        {
            private Partition _new_part;

            public Partition New_part
            {
                get
                {
                    return _new_part;
                }
                set
                {
                    __isset.new_part = true;
                    this._new_part = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool new_part;
            }

            public add_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                New_part = new Partition();
                                New_part.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (New_part != null && __isset.new_part)
                {
                    field.Name = "new_part";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    New_part.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partition_args(");
                sb.Append("New_part: ");
                sb.Append(New_part == null ? "<null>" : New_part.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partition_result : TBase
        {
            private Partition _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public add_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partition_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partition_with_environment_context_args : TBase
        {
            private Partition _new_part;
            private EnvironmentContext _environment_context;

            public Partition New_part
            {
                get
                {
                    return _new_part;
                }
                set
                {
                    __isset.new_part = true;
                    this._new_part = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool new_part;
                public bool environment_context;
            }

            public add_partition_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                New_part = new Partition();
                                New_part.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partition_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (New_part != null && __isset.new_part)
                {
                    field.Name = "new_part";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    New_part.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partition_with_environment_context_args(");
                sb.Append("New_part: ");
                sb.Append(New_part == null ? "<null>" : New_part.ToString());
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partition_with_environment_context_result : TBase
        {
            private Partition _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public add_partition_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partition_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partition_with_environment_context_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partitions_args : TBase
        {
            private List<Partition> _new_parts;

            public List<Partition> New_parts
            {
                get
                {
                    return _new_parts;
                }
                set
                {
                    __isset.new_parts = true;
                    this._new_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool new_parts;
            }

            public add_partitions_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.List)
                            {
                                {
                                    New_parts = new List<Partition>();
                                    TList _list270 = iprot.ReadListBegin();
                                    for (int _i271 = 0; _i271 < _list270.Count; ++_i271)
                                    {
                                        Partition _elem272 = new Partition();
                                        _elem272 = new Partition();
                                        _elem272.Read(iprot);
                                        New_parts.Add(_elem272);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partitions_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (New_parts != null && __isset.new_parts)
                {
                    field.Name = "new_parts";
                    field.Type = TType.List;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, New_parts.Count));
                        foreach (Partition _iter273 in New_parts)
                        {
                            _iter273.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partitions_args(");
                sb.Append("New_parts: ");
                sb.Append(New_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partitions_result : TBase
        {
            private int _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public int Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public add_partitions_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partitions_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partitions_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
            }

            public append_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list274 = iprot.ReadListBegin();
                                    for (int _i275 = 0; _i275 < _list274.Count; ++_i275)
                                    {
                                        string _elem276 = null;
                                        _elem276 = iprot.ReadString();
                                        Part_vals.Add(_elem276);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter277 in Part_vals)
                        {
                            oprot.WriteString(_iter277);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_result : TBase
        {
            private Partition _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public append_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partitions_req_args : TBase
        {
            private AddPartitionsRequest _request;

            public AddPartitionsRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public add_partitions_req_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new AddPartitionsRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partitions_req_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partitions_req_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_partitions_req_result : TBase
        {
            private AddPartitionsResult _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public AddPartitionsResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public add_partitions_req_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new AddPartitionsResult();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_partitions_req_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_partitions_req_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_with_environment_context_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private EnvironmentContext _environment_context;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool environment_context;
            }

            public append_partition_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list278 = iprot.ReadListBegin();
                                    for (int _i279 = 0; _i279 < _list278.Count; ++_i279)
                                    {
                                        string _elem280 = null;
                                        _elem280 = iprot.ReadString();
                                        Part_vals.Add(_elem280);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter281 in Part_vals)
                        {
                            oprot.WriteString(_iter281);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_with_environment_context_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_with_environment_context_result : TBase
        {
            private Partition _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public append_partition_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_with_environment_context_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_by_name_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
            }

            public append_partition_by_name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_by_name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_by_name_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_by_name_result : TBase
        {
            private Partition _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public append_partition_by_name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_by_name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_by_name_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_by_name_with_environment_context_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;
            private EnvironmentContext _environment_context;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
                public bool environment_context;
            }

            public append_partition_by_name_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_by_name_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_by_name_with_environment_context_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class append_partition_by_name_with_environment_context_result : TBase
        {
            private Partition _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public append_partition_by_name_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("append_partition_by_name_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("append_partition_by_name_with_environment_context_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private bool _deleteData;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool deleteData;
            }

            public drop_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list282 = iprot.ReadListBegin();
                                    for (int _i283 = 0; _i283 < _list282.Count; ++_i283)
                                    {
                                        string _elem284 = null;
                                        _elem284 = iprot.ReadString();
                                        Part_vals.Add(_elem284);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter285 in Part_vals)
                        {
                            oprot.WriteString(_iter285);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_with_environment_context_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private bool _deleteData;
            private EnvironmentContext _environment_context;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool deleteData;
                public bool environment_context;
            }

            public drop_partition_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list286 = iprot.ReadListBegin();
                                    for (int _i287 = 0; _i287 < _list286.Count; ++_i287)
                                    {
                                        string _elem288 = null;
                                        _elem288 = iprot.ReadString();
                                        Part_vals.Add(_elem288);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter289 in Part_vals)
                        {
                            oprot.WriteString(_iter289);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_with_environment_context_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_with_environment_context_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_partition_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_with_environment_context_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_by_name_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;
            private bool _deleteData;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
                public bool deleteData;
            }

            public drop_partition_by_name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_by_name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_by_name_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_by_name_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_partition_by_name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_by_name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_by_name_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_by_name_with_environment_context_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;
            private bool _deleteData;
            private EnvironmentContext _environment_context;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
                public bool deleteData;
                public bool environment_context;
            }

            public drop_partition_by_name_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_by_name_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_by_name_with_environment_context_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partition_by_name_with_environment_context_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_partition_by_name_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partition_by_name_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partition_by_name_with_environment_context_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partitions_req_args : TBase
        {
            private DropPartitionsRequest _req;

            public DropPartitionsRequest Req
            {
                get
                {
                    return _req;
                }
                set
                {
                    __isset.req = true;
                    this._req = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool req;
            }

            public drop_partitions_req_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Req = new DropPartitionsRequest();
                                Req.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partitions_req_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Req != null && __isset.req)
                {
                    field.Name = "req";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Req.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partitions_req_args(");
                sb.Append("Req: ");
                sb.Append(Req == null ? "<null>" : Req.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_partitions_req_result : TBase
        {
            private DropPartitionsResult _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public DropPartitionsResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_partitions_req_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new DropPartitionsResult();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_partitions_req_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_partitions_req_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
            }

            public get_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list290 = iprot.ReadListBegin();
                                    for (int _i291 = 0; _i291 < _list290.Count; ++_i291)
                                    {
                                        string _elem292 = null;
                                        _elem292 = iprot.ReadString();
                                        Part_vals.Add(_elem292);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter293 in Part_vals)
                        {
                            oprot.WriteString(_iter293);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_result : TBase
        {
            private Partition _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class exchange_partition_args : TBase
        {
            private Dictionary<string, string> _partitionSpecs;
            private string _source_db;
            private string _source_table_name;
            private string _dest_db;
            private string _dest_table_name;

            public Dictionary<string, string> PartitionSpecs
            {
                get
                {
                    return _partitionSpecs;
                }
                set
                {
                    __isset.partitionSpecs = true;
                    this._partitionSpecs = value;
                }
            }

            public string Source_db
            {
                get
                {
                    return _source_db;
                }
                set
                {
                    __isset.source_db = true;
                    this._source_db = value;
                }
            }

            public string Source_table_name
            {
                get
                {
                    return _source_table_name;
                }
                set
                {
                    __isset.source_table_name = true;
                    this._source_table_name = value;
                }
            }

            public string Dest_db
            {
                get
                {
                    return _dest_db;
                }
                set
                {
                    __isset.dest_db = true;
                    this._dest_db = value;
                }
            }

            public string Dest_table_name
            {
                get
                {
                    return _dest_table_name;
                }
                set
                {
                    __isset.dest_table_name = true;
                    this._dest_table_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool partitionSpecs;
                public bool source_db;
                public bool source_table_name;
                public bool dest_db;
                public bool dest_table_name;
            }

            public exchange_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Map)
                            {
                                {
                                    PartitionSpecs = new Dictionary<string, string>();
                                    TMap _map294 = iprot.ReadMapBegin();
                                    for (int _i295 = 0; _i295 < _map294.Count; ++_i295)
                                    {
                                        string _key296;
                                        string _val297;
                                        _key296 = iprot.ReadString();
                                        _val297 = iprot.ReadString();
                                        PartitionSpecs[_key296] = _val297;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Source_db = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Source_table_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.String)
                            {
                                Dest_db = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.String)
                            {
                                Dest_table_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("exchange_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (PartitionSpecs != null && __isset.partitionSpecs)
                {
                    field.Name = "partitionSpecs";
                    field.Type = TType.Map;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, PartitionSpecs.Count));
                        foreach (string _iter298 in PartitionSpecs.Keys)
                        {
                            oprot.WriteString(_iter298);
                            oprot.WriteString(PartitionSpecs[_iter298]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (Source_db != null && __isset.source_db)
                {
                    field.Name = "source_db";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Source_db);
                    oprot.WriteFieldEnd();
                }
                if (Source_table_name != null && __isset.source_table_name)
                {
                    field.Name = "source_table_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Source_table_name);
                    oprot.WriteFieldEnd();
                }
                if (Dest_db != null && __isset.dest_db)
                {
                    field.Name = "dest_db";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dest_db);
                    oprot.WriteFieldEnd();
                }
                if (Dest_table_name != null && __isset.dest_table_name)
                {
                    field.Name = "dest_table_name";
                    field.Type = TType.String;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dest_table_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("exchange_partition_args(");
                sb.Append("PartitionSpecs: ");
                sb.Append(PartitionSpecs);
                sb.Append(",Source_db: ");
                sb.Append(Source_db);
                sb.Append(",Source_table_name: ");
                sb.Append(Source_table_name);
                sb.Append(",Dest_db: ");
                sb.Append(Dest_db);
                sb.Append(",Dest_table_name: ");
                sb.Append(Dest_table_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class exchange_partition_result : TBase
        {
            private Partition _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;
            private InvalidObjectException _o3;
            private InvalidInputException _o4;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public InvalidObjectException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidInputException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public exchange_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new InvalidObjectException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidInputException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("exchange_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("exchange_partition_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_with_auth_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private string _user_name;
            private List<string> _group_names;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public string User_name
            {
                get
                {
                    return _user_name;
                }
                set
                {
                    __isset.user_name = true;
                    this._user_name = value;
                }
            }

            public List<string> Group_names
            {
                get
                {
                    return _group_names;
                }
                set
                {
                    __isset.group_names = true;
                    this._group_names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool user_name;
                public bool group_names;
            }

            public get_partition_with_auth_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list299 = iprot.ReadListBegin();
                                    for (int _i300 = 0; _i300 < _list299.Count; ++_i300)
                                    {
                                        string _elem301 = null;
                                        _elem301 = iprot.ReadString();
                                        Part_vals.Add(_elem301);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.String)
                            {
                                User_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.List)
                            {
                                {
                                    Group_names = new List<string>();
                                    TList _list302 = iprot.ReadListBegin();
                                    for (int _i303 = 0; _i303 < _list302.Count; ++_i303)
                                    {
                                        string _elem304 = null;
                                        _elem304 = iprot.ReadString();
                                        Group_names.Add(_elem304);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_with_auth_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter305 in Part_vals)
                        {
                            oprot.WriteString(_iter305);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (User_name != null && __isset.user_name)
                {
                    field.Name = "user_name";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(User_name);
                    oprot.WriteFieldEnd();
                }
                if (Group_names != null && __isset.group_names)
                {
                    field.Name = "group_names";
                    field.Type = TType.List;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
                        foreach (string _iter306 in Group_names)
                        {
                            oprot.WriteString(_iter306);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_with_auth_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",User_name: ");
                sb.Append(User_name);
                sb.Append(",Group_names: ");
                sb.Append(Group_names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_with_auth_result : TBase
        {
            private Partition _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partition_with_auth_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_with_auth_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_with_auth_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_by_name_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
            }

            public get_partition_by_name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_by_name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_by_name_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_by_name_result : TBase
        {
            private Partition _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Partition Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partition_by_name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Partition();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_by_name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_by_name_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private short _max_parts;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool max_parts;
            }

            public get_partitions_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_result : TBase
        {
            private List<Partition> _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public List<Partition> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Partition>();
                                    TList _list307 = iprot.ReadListBegin();
                                    for (int _i308 = 0; _i308 < _list307.Count; ++_i308)
                                    {
                                        Partition _elem309 = new Partition();
                                        _elem309 = new Partition();
                                        _elem309.Read(iprot);
                                        Success.Add(_elem309);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Partition _iter310 in Success)
                            {
                                _iter310.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_with_auth_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private short _max_parts;
            private string _user_name;
            private List<string> _group_names;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public string User_name
            {
                get
                {
                    return _user_name;
                }
                set
                {
                    __isset.user_name = true;
                    this._user_name = value;
                }
            }

            public List<string> Group_names
            {
                get
                {
                    return _group_names;
                }
                set
                {
                    __isset.group_names = true;
                    this._group_names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool max_parts;
                public bool user_name;
                public bool group_names;
            }

            public get_partitions_with_auth_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.String)
                            {
                                User_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.List)
                            {
                                {
                                    Group_names = new List<string>();
                                    TList _list311 = iprot.ReadListBegin();
                                    for (int _i312 = 0; _i312 < _list311.Count; ++_i312)
                                    {
                                        string _elem313 = null;
                                        _elem313 = iprot.ReadString();
                                        Group_names.Add(_elem313);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_with_auth_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                if (User_name != null && __isset.user_name)
                {
                    field.Name = "user_name";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(User_name);
                    oprot.WriteFieldEnd();
                }
                if (Group_names != null && __isset.group_names)
                {
                    field.Name = "group_names";
                    field.Type = TType.List;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
                        foreach (string _iter314 in Group_names)
                        {
                            oprot.WriteString(_iter314);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_with_auth_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(",User_name: ");
                sb.Append(User_name);
                sb.Append(",Group_names: ");
                sb.Append(Group_names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_with_auth_result : TBase
        {
            private List<Partition> _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public List<Partition> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_with_auth_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Partition>();
                                    TList _list315 = iprot.ReadListBegin();
                                    for (int _i316 = 0; _i316 < _list315.Count; ++_i316)
                                    {
                                        Partition _elem317 = new Partition();
                                        _elem317 = new Partition();
                                        _elem317.Read(iprot);
                                        Success.Add(_elem317);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_with_auth_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Partition _iter318 in Success)
                            {
                                _iter318.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_with_auth_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_names_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private short _max_parts;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool max_parts;
            }

            public get_partition_names_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_names_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_names_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_names_result : TBase
        {
            private List<string> _success;
            private MetaException _o2;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o2;
            }

            public get_partition_names_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list319 = iprot.ReadListBegin();
                                    for (int _i320 = 0; _i320 < _list319.Count; ++_i320)
                                    {
                                        string _elem321 = null;
                                        _elem321 = iprot.ReadString();
                                        Success.Add(_elem321);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_names_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter322 in Success)
                            {
                                oprot.WriteString(_iter322);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_names_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_ps_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private short _max_parts;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool max_parts;
            }

            public get_partitions_ps_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list323 = iprot.ReadListBegin();
                                    for (int _i324 = 0; _i324 < _list323.Count; ++_i324)
                                    {
                                        string _elem325 = null;
                                        _elem325 = iprot.ReadString();
                                        Part_vals.Add(_elem325);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_ps_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter326 in Part_vals)
                        {
                            oprot.WriteString(_iter326);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_ps_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_ps_result : TBase
        {
            private List<Partition> _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public List<Partition> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_ps_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Partition>();
                                    TList _list327 = iprot.ReadListBegin();
                                    for (int _i328 = 0; _i328 < _list327.Count; ++_i328)
                                    {
                                        Partition _elem329 = new Partition();
                                        _elem329 = new Partition();
                                        _elem329.Read(iprot);
                                        Success.Add(_elem329);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_ps_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Partition _iter330 in Success)
                            {
                                _iter330.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_ps_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_ps_with_auth_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private short _max_parts;
            private string _user_name;
            private List<string> _group_names;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public string User_name
            {
                get
                {
                    return _user_name;
                }
                set
                {
                    __isset.user_name = true;
                    this._user_name = value;
                }
            }

            public List<string> Group_names
            {
                get
                {
                    return _group_names;
                }
                set
                {
                    __isset.group_names = true;
                    this._group_names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool max_parts;
                public bool user_name;
                public bool group_names;
            }

            public get_partitions_ps_with_auth_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list331 = iprot.ReadListBegin();
                                    for (int _i332 = 0; _i332 < _list331.Count; ++_i332)
                                    {
                                        string _elem333 = null;
                                        _elem333 = iprot.ReadString();
                                        Part_vals.Add(_elem333);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.String)
                            {
                                User_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 6:
                            if (field.Type == TType.List)
                            {
                                {
                                    Group_names = new List<string>();
                                    TList _list334 = iprot.ReadListBegin();
                                    for (int _i335 = 0; _i335 < _list334.Count; ++_i335)
                                    {
                                        string _elem336 = null;
                                        _elem336 = iprot.ReadString();
                                        Group_names.Add(_elem336);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_ps_with_auth_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter337 in Part_vals)
                        {
                            oprot.WriteString(_iter337);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                if (User_name != null && __isset.user_name)
                {
                    field.Name = "user_name";
                    field.Type = TType.String;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(User_name);
                    oprot.WriteFieldEnd();
                }
                if (Group_names != null && __isset.group_names)
                {
                    field.Name = "group_names";
                    field.Type = TType.List;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
                        foreach (string _iter338 in Group_names)
                        {
                            oprot.WriteString(_iter338);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_ps_with_auth_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(",User_name: ");
                sb.Append(User_name);
                sb.Append(",Group_names: ");
                sb.Append(Group_names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_ps_with_auth_result : TBase
        {
            private List<Partition> _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public List<Partition> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_ps_with_auth_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Partition>();
                                    TList _list339 = iprot.ReadListBegin();
                                    for (int _i340 = 0; _i340 < _list339.Count; ++_i340)
                                    {
                                        Partition _elem341 = new Partition();
                                        _elem341 = new Partition();
                                        _elem341.Read(iprot);
                                        Success.Add(_elem341);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_ps_with_auth_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Partition _iter342 in Success)
                            {
                                _iter342.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_ps_with_auth_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_names_ps_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private short _max_parts;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool max_parts;
            }

            public get_partition_names_ps_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list343 = iprot.ReadListBegin();
                                    for (int _i344 = 0; _i344 < _list343.Count; ++_i344)
                                    {
                                        string _elem345 = null;
                                        _elem345 = iprot.ReadString();
                                        Part_vals.Add(_elem345);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_names_ps_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter346 in Part_vals)
                        {
                            oprot.WriteString(_iter346);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_names_ps_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_names_ps_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partition_names_ps_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list347 = iprot.ReadListBegin();
                                    for (int _i348 = 0; _i348 < _list347.Count; ++_i348)
                                    {
                                        string _elem349 = null;
                                        _elem349 = iprot.ReadString();
                                        Success.Add(_elem349);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_names_ps_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter350 in Success)
                            {
                                oprot.WriteString(_iter350);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_names_ps_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_by_filter_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _filter;
            private short _max_parts;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Filter
            {
                get
                {
                    return _filter;
                }
                set
                {
                    __isset.filter = true;
                    this._filter = value;
                }
            }

            public short Max_parts
            {
                get
                {
                    return _max_parts;
                }
                set
                {
                    __isset.max_parts = true;
                    this._max_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool filter;
                public bool max_parts;
            }

            public get_partitions_by_filter_args()
            {
                this._max_parts = -1;
                this.__isset.max_parts = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Filter = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.I16)
                            {
                                Max_parts = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_by_filter_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Filter != null && __isset.filter)
                {
                    field.Name = "filter";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filter);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_parts)
                {
                    field.Name = "max_parts";
                    field.Type = TType.I16;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_parts);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_by_filter_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Filter: ");
                sb.Append(Filter);
                sb.Append(",Max_parts: ");
                sb.Append(Max_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_by_filter_result : TBase
        {
            private List<Partition> _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public List<Partition> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_by_filter_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Partition>();
                                    TList _list351 = iprot.ReadListBegin();
                                    for (int _i352 = 0; _i352 < _list351.Count; ++_i352)
                                    {
                                        Partition _elem353 = new Partition();
                                        _elem353 = new Partition();
                                        _elem353.Read(iprot);
                                        Success.Add(_elem353);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_by_filter_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Partition _iter354 in Success)
                            {
                                _iter354.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_by_filter_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_by_expr_args : TBase
        {
            private PartitionsByExprRequest _req;

            public PartitionsByExprRequest Req
            {
                get
                {
                    return _req;
                }
                set
                {
                    __isset.req = true;
                    this._req = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool req;
            }

            public get_partitions_by_expr_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Req = new PartitionsByExprRequest();
                                Req.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_by_expr_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Req != null && __isset.req)
                {
                    field.Name = "req";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Req.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_by_expr_args(");
                sb.Append("Req: ");
                sb.Append(Req == null ? "<null>" : Req.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_by_expr_result : TBase
        {
            private PartitionsByExprResult _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public PartitionsByExprResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_by_expr_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new PartitionsByExprResult();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_by_expr_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_by_expr_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_by_names_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _names;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Names
            {
                get
                {
                    return _names;
                }
                set
                {
                    __isset.names = true;
                    this._names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool names;
            }

            public get_partitions_by_names_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Names = new List<string>();
                                    TList _list355 = iprot.ReadListBegin();
                                    for (int _i356 = 0; _i356 < _list355.Count; ++_i356)
                                    {
                                        string _elem357 = null;
                                        _elem357 = iprot.ReadString();
                                        Names.Add(_elem357);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_by_names_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Names != null && __isset.names)
                {
                    field.Name = "names";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Names.Count));
                        foreach (string _iter358 in Names)
                        {
                            oprot.WriteString(_iter358);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_by_names_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Names: ");
                sb.Append(Names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_by_names_result : TBase
        {
            private List<Partition> _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public List<Partition> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_by_names_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Partition>();
                                    TList _list359 = iprot.ReadListBegin();
                                    for (int _i360 = 0; _i360 < _list359.Count; ++_i360)
                                    {
                                        Partition _elem361 = new Partition();
                                        _elem361 = new Partition();
                                        _elem361.Read(iprot);
                                        Success.Add(_elem361);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_by_names_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Partition _iter362 in Success)
                            {
                                _iter362.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_by_names_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_partition_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private Partition _new_part;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Partition New_part
            {
                get
                {
                    return _new_part;
                }
                set
                {
                    __isset.new_part = true;
                    this._new_part = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool new_part;
            }

            public alter_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                New_part = new Partition();
                                New_part.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (New_part != null && __isset.new_part)
                {
                    field.Name = "new_part";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    New_part.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_partition_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",New_part: ");
                sb.Append(New_part == null ? "<null>" : New_part.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_partition_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_partition_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_partitions_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<Partition> _new_parts;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<Partition> New_parts
            {
                get
                {
                    return _new_parts;
                }
                set
                {
                    __isset.new_parts = true;
                    this._new_parts = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool new_parts;
            }

            public alter_partitions_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    New_parts = new List<Partition>();
                                    TList _list363 = iprot.ReadListBegin();
                                    for (int _i364 = 0; _i364 < _list363.Count; ++_i364)
                                    {
                                        Partition _elem365 = new Partition();
                                        _elem365 = new Partition();
                                        _elem365.Read(iprot);
                                        New_parts.Add(_elem365);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_partitions_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (New_parts != null && __isset.new_parts)
                {
                    field.Name = "new_parts";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, New_parts.Count));
                        foreach (Partition _iter366 in New_parts)
                        {
                            _iter366.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_partitions_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",New_parts: ");
                sb.Append(New_parts);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_partitions_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_partitions_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_partitions_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_partitions_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_partition_with_environment_context_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private Partition _new_part;
            private EnvironmentContext _environment_context;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Partition New_part
            {
                get
                {
                    return _new_part;
                }
                set
                {
                    __isset.new_part = true;
                    this._new_part = value;
                }
            }

            public EnvironmentContext Environment_context
            {
                get
                {
                    return _environment_context;
                }
                set
                {
                    __isset.environment_context = true;
                    this._environment_context = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool new_part;
                public bool environment_context;
            }

            public alter_partition_with_environment_context_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                New_part = new Partition();
                                New_part.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                Environment_context = new EnvironmentContext();
                                Environment_context.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_partition_with_environment_context_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (New_part != null && __isset.new_part)
                {
                    field.Name = "new_part";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    New_part.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (Environment_context != null && __isset.environment_context)
                {
                    field.Name = "environment_context";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    Environment_context.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_partition_with_environment_context_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",New_part: ");
                sb.Append(New_part == null ? "<null>" : New_part.ToString());
                sb.Append(",Environment_context: ");
                sb.Append(Environment_context == null ? "<null>" : Environment_context.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_partition_with_environment_context_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_partition_with_environment_context_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_partition_with_environment_context_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_partition_with_environment_context_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class rename_partition_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private List<string> _part_vals;
            private Partition _new_part;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public Partition New_part
            {
                get
                {
                    return _new_part;
                }
                set
                {
                    __isset.new_part = true;
                    this._new_part = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool new_part;
            }

            public rename_partition_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list367 = iprot.ReadListBegin();
                                    for (int _i368 = 0; _i368 < _list367.Count; ++_i368)
                                    {
                                        string _elem369 = null;
                                        _elem369 = iprot.ReadString();
                                        Part_vals.Add(_elem369);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                New_part = new Partition();
                                New_part.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("rename_partition_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter370 in Part_vals)
                        {
                            oprot.WriteString(_iter370);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (New_part != null && __isset.new_part)
                {
                    field.Name = "new_part";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    New_part.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("rename_partition_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",New_part: ");
                sb.Append(New_part == null ? "<null>" : New_part.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class rename_partition_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public rename_partition_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("rename_partition_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("rename_partition_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class partition_name_has_valid_characters_args : TBase
        {
            private List<string> _part_vals;
            private bool _throw_exception;

            public List<string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            public bool Throw_exception
            {
                get
                {
                    return _throw_exception;
                }
                set
                {
                    __isset.throw_exception = true;
                    this._throw_exception = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool part_vals;
                public bool throw_exception;
            }

            public partition_name_has_valid_characters_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.List)
                            {
                                {
                                    Part_vals = new List<string>();
                                    TList _list371 = iprot.ReadListBegin();
                                    for (int _i372 = 0; _i372 < _list371.Count; ++_i372)
                                    {
                                        string _elem373 = null;
                                        _elem373 = iprot.ReadString();
                                        Part_vals.Add(_elem373);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Bool)
                            {
                                Throw_exception = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("partition_name_has_valid_characters_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.List;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
                        foreach (string _iter374 in Part_vals)
                        {
                            oprot.WriteString(_iter374);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.throw_exception)
                {
                    field.Name = "throw_exception";
                    field.Type = TType.Bool;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Throw_exception);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("partition_name_has_valid_characters_args(");
                sb.Append("Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",Throw_exception: ");
                sb.Append(Throw_exception);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class partition_name_has_valid_characters_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public partition_name_has_valid_characters_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("partition_name_has_valid_characters_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("partition_name_has_valid_characters_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_config_value_args : TBase
        {
            private string _name;
            private string _defaultValue;

            public string Name
            {
                get
                {
                    return _name;
                }
                set
                {
                    __isset.name = true;
                    this._name = value;
                }
            }

            public string DefaultValue
            {
                get
                {
                    return _defaultValue;
                }
                set
                {
                    __isset.defaultValue = true;
                    this._defaultValue = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool name;
                public bool defaultValue;
            }

            public get_config_value_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                DefaultValue = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_config_value_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                if (DefaultValue != null && __isset.defaultValue)
                {
                    field.Name = "defaultValue";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(DefaultValue);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_config_value_args(");
                sb.Append("Name: ");
                sb.Append(Name);
                sb.Append(",DefaultValue: ");
                sb.Append(DefaultValue);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_config_value_result : TBase
        {
            private string _success;
            private ConfigValSecurityException _o1;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public ConfigValSecurityException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_config_value_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new ConfigValSecurityException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_config_value_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_config_value_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class partition_name_to_vals_args : TBase
        {
            private string _part_name;

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool part_name;
            }

            public partition_name_to_vals_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("partition_name_to_vals_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("partition_name_to_vals_args(");
                sb.Append("Part_name: ");
                sb.Append(Part_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class partition_name_to_vals_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public partition_name_to_vals_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list375 = iprot.ReadListBegin();
                                    for (int _i376 = 0; _i376 < _list375.Count; ++_i376)
                                    {
                                        string _elem377 = null;
                                        _elem377 = iprot.ReadString();
                                        Success.Add(_elem377);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("partition_name_to_vals_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter378 in Success)
                            {
                                oprot.WriteString(_iter378);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("partition_name_to_vals_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class partition_name_to_spec_args : TBase
        {
            private string _part_name;

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool part_name;
            }

            public partition_name_to_spec_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("partition_name_to_spec_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("partition_name_to_spec_args(");
                sb.Append("Part_name: ");
                sb.Append(Part_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class partition_name_to_spec_result : TBase
        {
            private Dictionary<string, string> _success;
            private MetaException _o1;

            public Dictionary<string, string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public partition_name_to_spec_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Success = new Dictionary<string, string>();
                                    TMap _map379 = iprot.ReadMapBegin();
                                    for (int _i380 = 0; _i380 < _map379.Count; ++_i380)
                                    {
                                        string _key381;
                                        string _val382;
                                        _key381 = iprot.ReadString();
                                        _val382 = iprot.ReadString();
                                        Success[_key381] = _val382;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("partition_name_to_spec_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Map;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
                            foreach (string _iter383 in Success.Keys)
                            {
                                oprot.WriteString(_iter383);
                                oprot.WriteString(Success[_iter383]);
                            }
                            oprot.WriteMapEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("partition_name_to_spec_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class markPartitionForEvent_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private Dictionary<string, string> _part_vals;
            private PartitionEventType _eventType;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Dictionary<string, string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PartitionEventType"/>
            /// </summary>
            public PartitionEventType EventType
            {
                get
                {
                    return _eventType;
                }
                set
                {
                    __isset.eventType = true;
                    this._eventType = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool eventType;
            }

            public markPartitionForEvent_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Part_vals = new Dictionary<string, string>();
                                    TMap _map384 = iprot.ReadMapBegin();
                                    for (int _i385 = 0; _i385 < _map384.Count; ++_i385)
                                    {
                                        string _key386;
                                        string _val387;
                                        _key386 = iprot.ReadString();
                                        _val387 = iprot.ReadString();
                                        Part_vals[_key386] = _val387;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.I32)
                            {
                                EventType = (PartitionEventType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("markPartitionForEvent_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.Map;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Part_vals.Count));
                        foreach (string _iter388 in Part_vals.Keys)
                        {
                            oprot.WriteString(_iter388);
                            oprot.WriteString(Part_vals[_iter388]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.eventType)
                {
                    field.Name = "eventType";
                    field.Type = TType.I32;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)EventType);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("markPartitionForEvent_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",EventType: ");
                sb.Append(EventType);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class markPartitionForEvent_result : TBase
        {
            private MetaException _o1;
            private NoSuchObjectException _o2;
            private UnknownDBException _o3;
            private UnknownTableException _o4;
            private UnknownPartitionException _o5;
            private InvalidPartitionException _o6;

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public UnknownDBException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public UnknownTableException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public UnknownPartitionException O5
            {
                get
                {
                    return _o5;
                }
                set
                {
                    __isset.o5 = true;
                    this._o5 = value;
                }
            }

            public InvalidPartitionException O6
            {
                get
                {
                    return _o6;
                }
                set
                {
                    __isset.o6 = true;
                    this._o6 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
                public bool o5;
                public bool o6;
            }

            public markPartitionForEvent_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new UnknownDBException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new UnknownTableException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.Struct)
                            {
                                O5 = new UnknownPartitionException();
                                O5.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 6:
                            if (field.Type == TType.Struct)
                            {
                                O6 = new InvalidPartitionException();
                                O6.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("markPartitionForEvent_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o5)
                {
                    if (O5 != null)
                    {
                        field.Name = "O5";
                        field.Type = TType.Struct;
                        field.ID = 5;
                        oprot.WriteFieldBegin(field);
                        O5.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o6)
                {
                    if (O6 != null)
                    {
                        field.Name = "O6";
                        field.Type = TType.Struct;
                        field.ID = 6;
                        oprot.WriteFieldBegin(field);
                        O6.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("markPartitionForEvent_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(",O5: ");
                sb.Append(O5 == null ? "<null>" : O5.ToString());
                sb.Append(",O6: ");
                sb.Append(O6 == null ? "<null>" : O6.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class isPartitionMarkedForEvent_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private Dictionary<string, string> _part_vals;
            private PartitionEventType _eventType;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public Dictionary<string, string> Part_vals
            {
                get
                {
                    return _part_vals;
                }
                set
                {
                    __isset.part_vals = true;
                    this._part_vals = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PartitionEventType"/>
            /// </summary>
            public PartitionEventType EventType
            {
                get
                {
                    return _eventType;
                }
                set
                {
                    __isset.eventType = true;
                    this._eventType = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_vals;
                public bool eventType;
            }

            public isPartitionMarkedForEvent_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Part_vals = new Dictionary<string, string>();
                                    TMap _map389 = iprot.ReadMapBegin();
                                    for (int _i390 = 0; _i390 < _map389.Count; ++_i390)
                                    {
                                        string _key391;
                                        string _val392;
                                        _key391 = iprot.ReadString();
                                        _val392 = iprot.ReadString();
                                        Part_vals[_key391] = _val392;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.I32)
                            {
                                EventType = (PartitionEventType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("isPartitionMarkedForEvent_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_vals != null && __isset.part_vals)
                {
                    field.Name = "part_vals";
                    field.Type = TType.Map;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Part_vals.Count));
                        foreach (string _iter393 in Part_vals.Keys)
                        {
                            oprot.WriteString(_iter393);
                            oprot.WriteString(Part_vals[_iter393]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.eventType)
                {
                    field.Name = "eventType";
                    field.Type = TType.I32;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)EventType);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("isPartitionMarkedForEvent_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_vals: ");
                sb.Append(Part_vals);
                sb.Append(",EventType: ");
                sb.Append(EventType);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class isPartitionMarkedForEvent_result : TBase
        {
            private bool _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;
            private UnknownDBException _o3;
            private UnknownTableException _o4;
            private UnknownPartitionException _o5;
            private InvalidPartitionException _o6;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public UnknownDBException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public UnknownTableException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public UnknownPartitionException O5
            {
                get
                {
                    return _o5;
                }
                set
                {
                    __isset.o5 = true;
                    this._o5 = value;
                }
            }

            public InvalidPartitionException O6
            {
                get
                {
                    return _o6;
                }
                set
                {
                    __isset.o6 = true;
                    this._o6 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
                public bool o5;
                public bool o6;
            }

            public isPartitionMarkedForEvent_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new UnknownDBException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new UnknownTableException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.Struct)
                            {
                                O5 = new UnknownPartitionException();
                                O5.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 6:
                            if (field.Type == TType.Struct)
                            {
                                O6 = new InvalidPartitionException();
                                O6.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("isPartitionMarkedForEvent_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o5)
                {
                    if (O5 != null)
                    {
                        field.Name = "O5";
                        field.Type = TType.Struct;
                        field.ID = 5;
                        oprot.WriteFieldBegin(field);
                        O5.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o6)
                {
                    if (O6 != null)
                    {
                        field.Name = "O6";
                        field.Type = TType.Struct;
                        field.ID = 6;
                        oprot.WriteFieldBegin(field);
                        O6.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("isPartitionMarkedForEvent_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(",O5: ");
                sb.Append(O5 == null ? "<null>" : O5.ToString());
                sb.Append(",O6: ");
                sb.Append(O6 == null ? "<null>" : O6.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_index_args : TBase
        {
            private Index _new_index;
            private Table _index_table;

            public Index New_index
            {
                get
                {
                    return _new_index;
                }
                set
                {
                    __isset.new_index = true;
                    this._new_index = value;
                }
            }

            public Table Index_table
            {
                get
                {
                    return _index_table;
                }
                set
                {
                    __isset.index_table = true;
                    this._index_table = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool new_index;
                public bool index_table;
            }

            public add_index_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                New_index = new Index();
                                New_index.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                Index_table = new Table();
                                Index_table.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_index_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (New_index != null && __isset.new_index)
                {
                    field.Name = "new_index";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    New_index.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (Index_table != null && __isset.index_table)
                {
                    field.Name = "index_table";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    Index_table.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_index_args(");
                sb.Append("New_index: ");
                sb.Append(New_index == null ? "<null>" : New_index.ToString());
                sb.Append(",Index_table: ");
                sb.Append(Index_table == null ? "<null>" : Index_table.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class add_index_result : TBase
        {
            private Index _success;
            private InvalidObjectException _o1;
            private AlreadyExistsException _o2;
            private MetaException _o3;

            public Index Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public InvalidObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public AlreadyExistsException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public add_index_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Index();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new AlreadyExistsException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("add_index_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("add_index_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_index_args : TBase
        {
            private string _dbname;
            private string _base_tbl_name;
            private string _idx_name;
            private Index _new_idx;

            public string Dbname
            {
                get
                {
                    return _dbname;
                }
                set
                {
                    __isset.dbname = true;
                    this._dbname = value;
                }
            }

            public string Base_tbl_name
            {
                get
                {
                    return _base_tbl_name;
                }
                set
                {
                    __isset.base_tbl_name = true;
                    this._base_tbl_name = value;
                }
            }

            public string Idx_name
            {
                get
                {
                    return _idx_name;
                }
                set
                {
                    __isset.idx_name = true;
                    this._idx_name = value;
                }
            }

            public Index New_idx
            {
                get
                {
                    return _new_idx;
                }
                set
                {
                    __isset.new_idx = true;
                    this._new_idx = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbname;
                public bool base_tbl_name;
                public bool idx_name;
                public bool new_idx;
            }

            public alter_index_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Dbname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Base_tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Idx_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                New_idx = new Index();
                                New_idx.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_index_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Dbname != null && __isset.dbname)
                {
                    field.Name = "dbname";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Dbname);
                    oprot.WriteFieldEnd();
                }
                if (Base_tbl_name != null && __isset.base_tbl_name)
                {
                    field.Name = "base_tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Base_tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Idx_name != null && __isset.idx_name)
                {
                    field.Name = "idx_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Idx_name);
                    oprot.WriteFieldEnd();
                }
                if (New_idx != null && __isset.new_idx)
                {
                    field.Name = "new_idx";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    New_idx.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_index_args(");
                sb.Append("Dbname: ");
                sb.Append(Dbname);
                sb.Append(",Base_tbl_name: ");
                sb.Append(Base_tbl_name);
                sb.Append(",Idx_name: ");
                sb.Append(Idx_name);
                sb.Append(",New_idx: ");
                sb.Append(New_idx == null ? "<null>" : New_idx.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_index_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_index_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_index_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_index_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_index_by_name_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _index_name;
            private bool _deleteData;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Index_name
            {
                get
                {
                    return _index_name;
                }
                set
                {
                    __isset.index_name = true;
                    this._index_name = value;
                }
            }

            public bool DeleteData
            {
                get
                {
                    return _deleteData;
                }
                set
                {
                    __isset.deleteData = true;
                    this._deleteData = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool index_name;
                public bool deleteData;
            }

            public drop_index_by_name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Index_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Bool)
                            {
                                DeleteData = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_index_by_name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Index_name != null && __isset.index_name)
                {
                    field.Name = "index_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Index_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.deleteData)
                {
                    field.Name = "deleteData";
                    field.Type = TType.Bool;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(DeleteData);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_index_by_name_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Index_name: ");
                sb.Append(Index_name);
                sb.Append(",DeleteData: ");
                sb.Append(DeleteData);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_index_by_name_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public drop_index_by_name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_index_by_name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_index_by_name_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_index_by_name_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _index_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Index_name
            {
                get
                {
                    return _index_name;
                }
                set
                {
                    __isset.index_name = true;
                    this._index_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool index_name;
            }

            public get_index_by_name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Index_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_index_by_name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Index_name != null && __isset.index_name)
                {
                    field.Name = "index_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Index_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_index_by_name_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Index_name: ");
                sb.Append(Index_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_index_by_name_result : TBase
        {
            private Index _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Index Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_index_by_name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Index();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_index_by_name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_index_by_name_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_indexes_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private short _max_indexes;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public short Max_indexes
            {
                get
                {
                    return _max_indexes;
                }
                set
                {
                    __isset.max_indexes = true;
                    this._max_indexes = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool max_indexes;
            }

            public get_indexes_args()
            {
                this._max_indexes = -1;
                this.__isset.max_indexes = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I16)
                            {
                                Max_indexes = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_indexes_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_indexes)
                {
                    field.Name = "max_indexes";
                    field.Type = TType.I16;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_indexes);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_indexes_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Max_indexes: ");
                sb.Append(Max_indexes);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_indexes_result : TBase
        {
            private List<Index> _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public List<Index> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_indexes_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Index>();
                                    TList _list394 = iprot.ReadListBegin();
                                    for (int _i395 = 0; _i395 < _list394.Count; ++_i395)
                                    {
                                        Index _elem396 = new Index();
                                        _elem396 = new Index();
                                        _elem396.Read(iprot);
                                        Success.Add(_elem396);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_indexes_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Index _iter397 in Success)
                            {
                                _iter397.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_indexes_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_index_names_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private short _max_indexes;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public short Max_indexes
            {
                get
                {
                    return _max_indexes;
                }
                set
                {
                    __isset.max_indexes = true;
                    this._max_indexes = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool max_indexes;
            }

            public get_index_names_args()
            {
                this._max_indexes = -1;
                this.__isset.max_indexes = true;
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I16)
                            {
                                Max_indexes = iprot.ReadI16();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_index_names_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.max_indexes)
                {
                    field.Name = "max_indexes";
                    field.Type = TType.I16;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI16(Max_indexes);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_index_names_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Max_indexes: ");
                sb.Append(Max_indexes);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_index_names_result : TBase
        {
            private List<string> _success;
            private MetaException _o2;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o2;
            }

            public get_index_names_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list398 = iprot.ReadListBegin();
                                    for (int _i399 = 0; _i399 < _list398.Count; ++_i399)
                                    {
                                        string _elem400 = null;
                                        _elem400 = iprot.ReadString();
                                        Success.Add(_elem400);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_index_names_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter401 in Success)
                            {
                                oprot.WriteString(_iter401);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_index_names_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class update_table_column_statistics_args : TBase
        {
            private ColumnStatistics _stats_obj;

            public ColumnStatistics Stats_obj
            {
                get
                {
                    return _stats_obj;
                }
                set
                {
                    __isset.stats_obj = true;
                    this._stats_obj = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool stats_obj;
            }

            public update_table_column_statistics_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Stats_obj = new ColumnStatistics();
                                Stats_obj.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("update_table_column_statistics_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Stats_obj != null && __isset.stats_obj)
                {
                    field.Name = "stats_obj";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Stats_obj.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("update_table_column_statistics_args(");
                sb.Append("Stats_obj: ");
                sb.Append(Stats_obj == null ? "<null>" : Stats_obj.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class update_table_column_statistics_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;
            private InvalidInputException _o4;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidInputException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public update_table_column_statistics_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidInputException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("update_table_column_statistics_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("update_table_column_statistics_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class update_partition_column_statistics_args : TBase
        {
            private ColumnStatistics _stats_obj;

            public ColumnStatistics Stats_obj
            {
                get
                {
                    return _stats_obj;
                }
                set
                {
                    __isset.stats_obj = true;
                    this._stats_obj = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool stats_obj;
            }

            public update_partition_column_statistics_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Stats_obj = new ColumnStatistics();
                                Stats_obj.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("update_partition_column_statistics_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Stats_obj != null && __isset.stats_obj)
                {
                    field.Name = "stats_obj";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Stats_obj.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("update_partition_column_statistics_args(");
                sb.Append("Stats_obj: ");
                sb.Append(Stats_obj == null ? "<null>" : Stats_obj.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class update_partition_column_statistics_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;
            private InvalidInputException _o4;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidInputException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public update_partition_column_statistics_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidInputException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("update_partition_column_statistics_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("update_partition_column_statistics_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_column_statistics_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _col_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Col_name
            {
                get
                {
                    return _col_name;
                }
                set
                {
                    __isset.col_name = true;
                    this._col_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool col_name;
            }

            public get_table_column_statistics_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Col_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_column_statistics_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Col_name != null && __isset.col_name)
                {
                    field.Name = "col_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Col_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_column_statistics_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Col_name: ");
                sb.Append(Col_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_column_statistics_result : TBase
        {
            private ColumnStatistics _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;
            private InvalidInputException _o3;
            private InvalidObjectException _o4;

            public ColumnStatistics Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public InvalidInputException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidObjectException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public get_table_column_statistics_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new ColumnStatistics();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new InvalidInputException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidObjectException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_column_statistics_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_column_statistics_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_column_statistics_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;
            private string _col_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public string Col_name
            {
                get
                {
                    return _col_name;
                }
                set
                {
                    __isset.col_name = true;
                    this._col_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
                public bool col_name;
            }

            public get_partition_column_statistics_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.String)
                            {
                                Col_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_column_statistics_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                if (Col_name != null && __isset.col_name)
                {
                    field.Name = "col_name";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Col_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_column_statistics_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(",Col_name: ");
                sb.Append(Col_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partition_column_statistics_result : TBase
        {
            private ColumnStatistics _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;
            private InvalidInputException _o3;
            private InvalidObjectException _o4;

            public ColumnStatistics Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public InvalidInputException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidObjectException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public get_partition_column_statistics_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new ColumnStatistics();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new InvalidInputException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidObjectException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partition_column_statistics_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partition_column_statistics_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_statistics_req_args : TBase
        {
            private TableStatsRequest _request;

            public TableStatsRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public get_table_statistics_req_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new TableStatsRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_statistics_req_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_statistics_req_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_table_statistics_req_result : TBase
        {
            private TableStatsResult _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public TableStatsResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_table_statistics_req_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new TableStatsResult();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_table_statistics_req_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_table_statistics_req_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_statistics_req_args : TBase
        {
            private PartitionsStatsRequest _request;

            public PartitionsStatsRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public get_partitions_statistics_req_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new PartitionsStatsRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_statistics_req_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_statistics_req_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_partitions_statistics_req_result : TBase
        {
            private PartitionsStatsResult _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public PartitionsStatsResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_partitions_statistics_req_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new PartitionsStatsResult();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_partitions_statistics_req_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_partitions_statistics_req_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_aggr_stats_for_args : TBase
        {
            private PartitionsStatsRequest _request;

            public PartitionsStatsRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public get_aggr_stats_for_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new PartitionsStatsRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_aggr_stats_for_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_aggr_stats_for_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_aggr_stats_for_result : TBase
        {
            private AggrStats _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;

            public AggrStats Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_aggr_stats_for_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new AggrStats();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_aggr_stats_for_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_aggr_stats_for_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class set_aggr_stats_for_args : TBase
        {
            private SetPartitionsStatsRequest _request;

            public SetPartitionsStatsRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public set_aggr_stats_for_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new SetPartitionsStatsRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("set_aggr_stats_for_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("set_aggr_stats_for_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class set_aggr_stats_for_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;
            private InvalidInputException _o4;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidInputException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public set_aggr_stats_for_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidInputException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("set_aggr_stats_for_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("set_aggr_stats_for_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class delete_partition_column_statistics_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _part_name;
            private string _col_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Part_name
            {
                get
                {
                    return _part_name;
                }
                set
                {
                    __isset.part_name = true;
                    this._part_name = value;
                }
            }

            public string Col_name
            {
                get
                {
                    return _col_name;
                }
                set
                {
                    __isset.col_name = true;
                    this._col_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool part_name;
                public bool col_name;
            }

            public delete_partition_column_statistics_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Part_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.String)
                            {
                                Col_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("delete_partition_column_statistics_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Part_name != null && __isset.part_name)
                {
                    field.Name = "part_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Part_name);
                    oprot.WriteFieldEnd();
                }
                if (Col_name != null && __isset.col_name)
                {
                    field.Name = "col_name";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Col_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("delete_partition_column_statistics_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Part_name: ");
                sb.Append(Part_name);
                sb.Append(",Col_name: ");
                sb.Append(Col_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class delete_partition_column_statistics_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;
            private InvalidObjectException _o3;
            private InvalidInputException _o4;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public InvalidObjectException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidInputException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public delete_partition_column_statistics_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new InvalidObjectException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidInputException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("delete_partition_column_statistics_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("delete_partition_column_statistics_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class delete_table_column_statistics_args : TBase
        {
            private string _db_name;
            private string _tbl_name;
            private string _col_name;

            public string Db_name
            {
                get
                {
                    return _db_name;
                }
                set
                {
                    __isset.db_name = true;
                    this._db_name = value;
                }
            }

            public string Tbl_name
            {
                get
                {
                    return _tbl_name;
                }
                set
                {
                    __isset.tbl_name = true;
                    this._tbl_name = value;
                }
            }

            public string Col_name
            {
                get
                {
                    return _col_name;
                }
                set
                {
                    __isset.col_name = true;
                    this._col_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool db_name;
                public bool tbl_name;
                public bool col_name;
            }

            public delete_table_column_statistics_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Db_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Tbl_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.String)
                            {
                                Col_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("delete_table_column_statistics_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Db_name != null && __isset.db_name)
                {
                    field.Name = "db_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Db_name);
                    oprot.WriteFieldEnd();
                }
                if (Tbl_name != null && __isset.tbl_name)
                {
                    field.Name = "tbl_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Tbl_name);
                    oprot.WriteFieldEnd();
                }
                if (Col_name != null && __isset.col_name)
                {
                    field.Name = "col_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Col_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("delete_table_column_statistics_args(");
                sb.Append("Db_name: ");
                sb.Append(Db_name);
                sb.Append(",Tbl_name: ");
                sb.Append(Tbl_name);
                sb.Append(",Col_name: ");
                sb.Append(Col_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class delete_table_column_statistics_result : TBase
        {
            private bool _success;
            private NoSuchObjectException _o1;
            private MetaException _o2;
            private InvalidObjectException _o3;
            private InvalidInputException _o4;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public InvalidObjectException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public InvalidInputException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public delete_table_column_statistics_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new InvalidObjectException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new InvalidInputException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("delete_table_column_statistics_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("delete_table_column_statistics_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_function_args : TBase
        {
            private Function _func;

            public Function Func
            {
                get
                {
                    return _func;
                }
                set
                {
                    __isset.func = true;
                    this._func = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool func;
            }

            public create_function_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Func = new Function();
                                Func.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_function_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Func != null && __isset.func)
                {
                    field.Name = "func";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Func.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_function_args(");
                sb.Append("Func: ");
                sb.Append(Func == null ? "<null>" : Func.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_function_result : TBase
        {
            private AlreadyExistsException _o1;
            private InvalidObjectException _o2;
            private MetaException _o3;
            private NoSuchObjectException _o4;

            public AlreadyExistsException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public InvalidObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public NoSuchObjectException O4
            {
                get
                {
                    return _o4;
                }
                set
                {
                    __isset.o4 = true;
                    this._o4 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
                public bool o4;
            }

            public create_function_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new AlreadyExistsException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new InvalidObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                O4 = new NoSuchObjectException();
                                O4.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_function_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o4)
                {
                    if (O4 != null)
                    {
                        field.Name = "O4";
                        field.Type = TType.Struct;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        O4.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_function_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(",O4: ");
                sb.Append(O4 == null ? "<null>" : O4.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_function_args : TBase
        {
            private string _dbName;
            private string _funcName;

            public string DbName
            {
                get
                {
                    return _dbName;
                }
                set
                {
                    __isset.dbName = true;
                    this._dbName = value;
                }
            }

            public string FuncName
            {
                get
                {
                    return _funcName;
                }
                set
                {
                    __isset.funcName = true;
                    this._funcName = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbName;
                public bool funcName;
            }

            public drop_function_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                DbName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                FuncName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_function_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (DbName != null && __isset.dbName)
                {
                    field.Name = "dbName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(DbName);
                    oprot.WriteFieldEnd();
                }
                if (FuncName != null && __isset.funcName)
                {
                    field.Name = "funcName";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(FuncName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_function_args(");
                sb.Append("DbName: ");
                sb.Append(DbName);
                sb.Append(",FuncName: ");
                sb.Append(FuncName);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_function_result : TBase
        {
            private NoSuchObjectException _o1;
            private MetaException _o3;

            public NoSuchObjectException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o3;
            }

            public drop_function_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchObjectException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new MetaException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_function_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_function_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_function_args : TBase
        {
            private string _dbName;
            private string _funcName;
            private Function _newFunc;

            public string DbName
            {
                get
                {
                    return _dbName;
                }
                set
                {
                    __isset.dbName = true;
                    this._dbName = value;
                }
            }

            public string FuncName
            {
                get
                {
                    return _funcName;
                }
                set
                {
                    __isset.funcName = true;
                    this._funcName = value;
                }
            }

            public Function NewFunc
            {
                get
                {
                    return _newFunc;
                }
                set
                {
                    __isset.newFunc = true;
                    this._newFunc = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbName;
                public bool funcName;
                public bool newFunc;
            }

            public alter_function_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                DbName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                FuncName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                NewFunc = new Function();
                                NewFunc.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_function_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (DbName != null && __isset.dbName)
                {
                    field.Name = "dbName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(DbName);
                    oprot.WriteFieldEnd();
                }
                if (FuncName != null && __isset.funcName)
                {
                    field.Name = "funcName";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(FuncName);
                    oprot.WriteFieldEnd();
                }
                if (NewFunc != null && __isset.newFunc)
                {
                    field.Name = "newFunc";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    NewFunc.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_function_args(");
                sb.Append("DbName: ");
                sb.Append(DbName);
                sb.Append(",FuncName: ");
                sb.Append(FuncName);
                sb.Append(",NewFunc: ");
                sb.Append(NewFunc == null ? "<null>" : NewFunc.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class alter_function_result : TBase
        {
            private InvalidOperationException _o1;
            private MetaException _o2;

            public InvalidOperationException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public MetaException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public alter_function_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new InvalidOperationException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new MetaException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("alter_function_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("alter_function_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_functions_args : TBase
        {
            private string _dbName;
            private string _pattern;

            public string DbName
            {
                get
                {
                    return _dbName;
                }
                set
                {
                    __isset.dbName = true;
                    this._dbName = value;
                }
            }

            public string Pattern
            {
                get
                {
                    return _pattern;
                }
                set
                {
                    __isset.pattern = true;
                    this._pattern = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbName;
                public bool pattern;
            }

            public get_functions_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                DbName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Pattern = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_functions_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (DbName != null && __isset.dbName)
                {
                    field.Name = "dbName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(DbName);
                    oprot.WriteFieldEnd();
                }
                if (Pattern != null && __isset.pattern)
                {
                    field.Name = "pattern";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Pattern);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_functions_args(");
                sb.Append("DbName: ");
                sb.Append(DbName);
                sb.Append(",Pattern: ");
                sb.Append(Pattern);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_functions_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_functions_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list402 = iprot.ReadListBegin();
                                    for (int _i403 = 0; _i403 < _list402.Count; ++_i403)
                                    {
                                        string _elem404 = null;
                                        _elem404 = iprot.ReadString();
                                        Success.Add(_elem404);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_functions_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter405 in Success)
                            {
                                oprot.WriteString(_iter405);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_functions_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_function_args : TBase
        {
            private string _dbName;
            private string _funcName;

            public string DbName
            {
                get
                {
                    return _dbName;
                }
                set
                {
                    __isset.dbName = true;
                    this._dbName = value;
                }
            }

            public string FuncName
            {
                get
                {
                    return _funcName;
                }
                set
                {
                    __isset.funcName = true;
                    this._funcName = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool dbName;
                public bool funcName;
            }

            public get_function_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                DbName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                FuncName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_function_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (DbName != null && __isset.dbName)
                {
                    field.Name = "dbName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(DbName);
                    oprot.WriteFieldEnd();
                }
                if (FuncName != null && __isset.funcName)
                {
                    field.Name = "funcName";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(FuncName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_function_args(");
                sb.Append("DbName: ");
                sb.Append(DbName);
                sb.Append(",FuncName: ");
                sb.Append(FuncName);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_function_result : TBase
        {
            private Function _success;
            private MetaException _o1;
            private NoSuchObjectException _o2;

            public Function Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchObjectException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public get_function_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new Function();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchObjectException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_function_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_function_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_role_args : TBase
        {
            private Role _role;

            public Role Role
            {
                get
                {
                    return _role;
                }
                set
                {
                    __isset.role = true;
                    this._role = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool role;
            }

            public create_role_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Role = new Role();
                                Role.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_role_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Role != null && __isset.role)
                {
                    field.Name = "role";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Role.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_role_args(");
                sb.Append("Role: ");
                sb.Append(Role == null ? "<null>" : Role.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class create_role_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public create_role_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("create_role_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("create_role_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_role_args : TBase
        {
            private string _role_name;

            public string Role_name
            {
                get
                {
                    return _role_name;
                }
                set
                {
                    __isset.role_name = true;
                    this._role_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool role_name;
            }

            public drop_role_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Role_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_role_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Role_name != null && __isset.role_name)
                {
                    field.Name = "role_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Role_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_role_args(");
                sb.Append("Role_name: ");
                sb.Append(Role_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class drop_role_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public drop_role_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("drop_role_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("drop_role_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_role_names_args : TBase
        {
            public get_role_names_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_role_names_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_role_names_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_role_names_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_role_names_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list406 = iprot.ReadListBegin();
                                    for (int _i407 = 0; _i407 < _list406.Count; ++_i407)
                                    {
                                        string _elem408 = null;
                                        _elem408 = iprot.ReadString();
                                        Success.Add(_elem408);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_role_names_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter409 in Success)
                            {
                                oprot.WriteString(_iter409);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_role_names_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_role_args : TBase
        {
            private string _role_name;
            private string _principal_name;
            private PrincipalType _principal_type;
            private string _grantor;
            private PrincipalType _grantorType;
            private bool _grant_option;

            public string Role_name
            {
                get
                {
                    return _role_name;
                }
                set
                {
                    __isset.role_name = true;
                    this._role_name = value;
                }
            }

            public string Principal_name
            {
                get
                {
                    return _principal_name;
                }
                set
                {
                    __isset.principal_name = true;
                    this._principal_name = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PrincipalType"/>
            /// </summary>
            public PrincipalType Principal_type
            {
                get
                {
                    return _principal_type;
                }
                set
                {
                    __isset.principal_type = true;
                    this._principal_type = value;
                }
            }

            public string Grantor
            {
                get
                {
                    return _grantor;
                }
                set
                {
                    __isset.grantor = true;
                    this._grantor = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PrincipalType"/>
            /// </summary>
            public PrincipalType GrantorType
            {
                get
                {
                    return _grantorType;
                }
                set
                {
                    __isset.grantorType = true;
                    this._grantorType = value;
                }
            }

            public bool Grant_option
            {
                get
                {
                    return _grant_option;
                }
                set
                {
                    __isset.grant_option = true;
                    this._grant_option = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool role_name;
                public bool principal_name;
                public bool principal_type;
                public bool grantor;
                public bool grantorType;
                public bool grant_option;
            }

            public grant_role_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Role_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Principal_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I32)
                            {
                                Principal_type = (PrincipalType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 4:
                            if (field.Type == TType.String)
                            {
                                Grantor = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 5:
                            if (field.Type == TType.I32)
                            {
                                GrantorType = (PrincipalType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 6:
                            if (field.Type == TType.Bool)
                            {
                                Grant_option = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_role_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Role_name != null && __isset.role_name)
                {
                    field.Name = "role_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Role_name);
                    oprot.WriteFieldEnd();
                }
                if (Principal_name != null && __isset.principal_name)
                {
                    field.Name = "principal_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Principal_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.principal_type)
                {
                    field.Name = "principal_type";
                    field.Type = TType.I32;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)Principal_type);
                    oprot.WriteFieldEnd();
                }
                if (Grantor != null && __isset.grantor)
                {
                    field.Name = "grantor";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Grantor);
                    oprot.WriteFieldEnd();
                }
                if (__isset.grantorType)
                {
                    field.Name = "grantorType";
                    field.Type = TType.I32;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)GrantorType);
                    oprot.WriteFieldEnd();
                }
                if (__isset.grant_option)
                {
                    field.Name = "grant_option";
                    field.Type = TType.Bool;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Grant_option);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_role_args(");
                sb.Append("Role_name: ");
                sb.Append(Role_name);
                sb.Append(",Principal_name: ");
                sb.Append(Principal_name);
                sb.Append(",Principal_type: ");
                sb.Append(Principal_type);
                sb.Append(",Grantor: ");
                sb.Append(Grantor);
                sb.Append(",GrantorType: ");
                sb.Append(GrantorType);
                sb.Append(",Grant_option: ");
                sb.Append(Grant_option);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_role_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public grant_role_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_role_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_role_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class revoke_role_args : TBase
        {
            private string _role_name;
            private string _principal_name;
            private PrincipalType _principal_type;

            public string Role_name
            {
                get
                {
                    return _role_name;
                }
                set
                {
                    __isset.role_name = true;
                    this._role_name = value;
                }
            }

            public string Principal_name
            {
                get
                {
                    return _principal_name;
                }
                set
                {
                    __isset.principal_name = true;
                    this._principal_name = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PrincipalType"/>
            /// </summary>
            public PrincipalType Principal_type
            {
                get
                {
                    return _principal_type;
                }
                set
                {
                    __isset.principal_type = true;
                    this._principal_type = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool role_name;
                public bool principal_name;
                public bool principal_type;
            }

            public revoke_role_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Role_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Principal_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.I32)
                            {
                                Principal_type = (PrincipalType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("revoke_role_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Role_name != null && __isset.role_name)
                {
                    field.Name = "role_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Role_name);
                    oprot.WriteFieldEnd();
                }
                if (Principal_name != null && __isset.principal_name)
                {
                    field.Name = "principal_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Principal_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.principal_type)
                {
                    field.Name = "principal_type";
                    field.Type = TType.I32;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)Principal_type);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("revoke_role_args(");
                sb.Append("Role_name: ");
                sb.Append(Role_name);
                sb.Append(",Principal_name: ");
                sb.Append(Principal_name);
                sb.Append(",Principal_type: ");
                sb.Append(Principal_type);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class revoke_role_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public revoke_role_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("revoke_role_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("revoke_role_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class list_roles_args : TBase
        {
            private string _principal_name;
            private PrincipalType _principal_type;

            public string Principal_name
            {
                get
                {
                    return _principal_name;
                }
                set
                {
                    __isset.principal_name = true;
                    this._principal_name = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PrincipalType"/>
            /// </summary>
            public PrincipalType Principal_type
            {
                get
                {
                    return _principal_type;
                }
                set
                {
                    __isset.principal_type = true;
                    this._principal_type = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool principal_name;
                public bool principal_type;
            }

            public list_roles_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Principal_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.I32)
                            {
                                Principal_type = (PrincipalType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("list_roles_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Principal_name != null && __isset.principal_name)
                {
                    field.Name = "principal_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Principal_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.principal_type)
                {
                    field.Name = "principal_type";
                    field.Type = TType.I32;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)Principal_type);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("list_roles_args(");
                sb.Append("Principal_name: ");
                sb.Append(Principal_name);
                sb.Append(",Principal_type: ");
                sb.Append(Principal_type);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class list_roles_result : TBase
        {
            private List<Role> _success;
            private MetaException _o1;

            public List<Role> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public list_roles_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Role>();
                                    TList _list410 = iprot.ReadListBegin();
                                    for (int _i411 = 0; _i411 < _list410.Count; ++_i411)
                                    {
                                        Role _elem412 = new Role();
                                        _elem412 = new Role();
                                        _elem412.Read(iprot);
                                        Success.Add(_elem412);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("list_roles_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Role _iter413 in Success)
                            {
                                _iter413.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("list_roles_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_revoke_role_args : TBase
        {
            private GrantRevokeRoleRequest _request;

            public GrantRevokeRoleRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public grant_revoke_role_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new GrantRevokeRoleRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_revoke_role_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_revoke_role_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_revoke_role_result : TBase
        {
            private GrantRevokeRoleResponse _success;
            private MetaException _o1;

            public GrantRevokeRoleResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public grant_revoke_role_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new GrantRevokeRoleResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_revoke_role_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_revoke_role_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_principals_in_role_args : TBase
        {
            private GetPrincipalsInRoleRequest _request;

            public GetPrincipalsInRoleRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public get_principals_in_role_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new GetPrincipalsInRoleRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_principals_in_role_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_principals_in_role_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_principals_in_role_result : TBase
        {
            private GetPrincipalsInRoleResponse _success;
            private MetaException _o1;

            public GetPrincipalsInRoleResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_principals_in_role_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new GetPrincipalsInRoleResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_principals_in_role_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_principals_in_role_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_role_grants_for_principal_args : TBase
        {
            private GetRoleGrantsForPrincipalRequest _request;

            public GetRoleGrantsForPrincipalRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public get_role_grants_for_principal_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new GetRoleGrantsForPrincipalRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_role_grants_for_principal_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_role_grants_for_principal_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_role_grants_for_principal_result : TBase
        {
            private GetRoleGrantsForPrincipalResponse _success;
            private MetaException _o1;

            public GetRoleGrantsForPrincipalResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_role_grants_for_principal_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new GetRoleGrantsForPrincipalResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_role_grants_for_principal_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_role_grants_for_principal_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_privilege_set_args : TBase
        {
            private HiveObjectRef _hiveObject;
            private string _user_name;
            private List<string> _group_names;

            public HiveObjectRef HiveObject
            {
                get
                {
                    return _hiveObject;
                }
                set
                {
                    __isset.hiveObject = true;
                    this._hiveObject = value;
                }
            }

            public string User_name
            {
                get
                {
                    return _user_name;
                }
                set
                {
                    __isset.user_name = true;
                    this._user_name = value;
                }
            }

            public List<string> Group_names
            {
                get
                {
                    return _group_names;
                }
                set
                {
                    __isset.group_names = true;
                    this._group_names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool hiveObject;
                public bool user_name;
                public bool group_names;
            }

            public get_privilege_set_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                HiveObject = new HiveObjectRef();
                                HiveObject.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                User_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Group_names = new List<string>();
                                    TList _list414 = iprot.ReadListBegin();
                                    for (int _i415 = 0; _i415 < _list414.Count; ++_i415)
                                    {
                                        string _elem416 = null;
                                        _elem416 = iprot.ReadString();
                                        Group_names.Add(_elem416);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_privilege_set_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (HiveObject != null && __isset.hiveObject)
                {
                    field.Name = "hiveObject";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    HiveObject.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (User_name != null && __isset.user_name)
                {
                    field.Name = "user_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(User_name);
                    oprot.WriteFieldEnd();
                }
                if (Group_names != null && __isset.group_names)
                {
                    field.Name = "group_names";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
                        foreach (string _iter417 in Group_names)
                        {
                            oprot.WriteString(_iter417);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_privilege_set_args(");
                sb.Append("HiveObject: ");
                sb.Append(HiveObject == null ? "<null>" : HiveObject.ToString());
                sb.Append(",User_name: ");
                sb.Append(User_name);
                sb.Append(",Group_names: ");
                sb.Append(Group_names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_privilege_set_result : TBase
        {
            private PrincipalPrivilegeSet _success;
            private MetaException _o1;

            public PrincipalPrivilegeSet Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_privilege_set_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new PrincipalPrivilegeSet();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_privilege_set_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_privilege_set_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class list_privileges_args : TBase
        {
            private string _principal_name;
            private PrincipalType _principal_type;
            private HiveObjectRef _hiveObject;

            public string Principal_name
            {
                get
                {
                    return _principal_name;
                }
                set
                {
                    __isset.principal_name = true;
                    this._principal_name = value;
                }
            }

            /// <summary>
            ///
            /// <seealso cref="PrincipalType"/>
            /// </summary>
            public PrincipalType Principal_type
            {
                get
                {
                    return _principal_type;
                }
                set
                {
                    __isset.principal_type = true;
                    this._principal_type = value;
                }
            }

            public HiveObjectRef HiveObject
            {
                get
                {
                    return _hiveObject;
                }
                set
                {
                    __isset.hiveObject = true;
                    this._hiveObject = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool principal_name;
                public bool principal_type;
                public bool hiveObject;
            }

            public list_privileges_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Principal_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.I32)
                            {
                                Principal_type = (PrincipalType)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                HiveObject = new HiveObjectRef();
                                HiveObject.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("list_privileges_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Principal_name != null && __isset.principal_name)
                {
                    field.Name = "principal_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Principal_name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.principal_type)
                {
                    field.Name = "principal_type";
                    field.Type = TType.I32;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)Principal_type);
                    oprot.WriteFieldEnd();
                }
                if (HiveObject != null && __isset.hiveObject)
                {
                    field.Name = "hiveObject";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    HiveObject.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("list_privileges_args(");
                sb.Append("Principal_name: ");
                sb.Append(Principal_name);
                sb.Append(",Principal_type: ");
                sb.Append(Principal_type);
                sb.Append(",HiveObject: ");
                sb.Append(HiveObject == null ? "<null>" : HiveObject.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class list_privileges_result : TBase
        {
            private List<HiveObjectPrivilege> _success;
            private MetaException _o1;

            public List<HiveObjectPrivilege> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public list_privileges_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<HiveObjectPrivilege>();
                                    TList _list418 = iprot.ReadListBegin();
                                    for (int _i419 = 0; _i419 < _list418.Count; ++_i419)
                                    {
                                        HiveObjectPrivilege _elem420 = new HiveObjectPrivilege();
                                        _elem420 = new HiveObjectPrivilege();
                                        _elem420.Read(iprot);
                                        Success.Add(_elem420);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("list_privileges_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (HiveObjectPrivilege _iter421 in Success)
                            {
                                _iter421.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("list_privileges_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_privileges_args : TBase
        {
            private PrivilegeBag _privileges;

            public PrivilegeBag Privileges
            {
                get
                {
                    return _privileges;
                }
                set
                {
                    __isset.privileges = true;
                    this._privileges = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool privileges;
            }

            public grant_privileges_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Privileges = new PrivilegeBag();
                                Privileges.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_privileges_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Privileges != null && __isset.privileges)
                {
                    field.Name = "privileges";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Privileges.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_privileges_args(");
                sb.Append("Privileges: ");
                sb.Append(Privileges == null ? "<null>" : Privileges.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_privileges_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public grant_privileges_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_privileges_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_privileges_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class revoke_privileges_args : TBase
        {
            private PrivilegeBag _privileges;

            public PrivilegeBag Privileges
            {
                get
                {
                    return _privileges;
                }
                set
                {
                    __isset.privileges = true;
                    this._privileges = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool privileges;
            }

            public revoke_privileges_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Privileges = new PrivilegeBag();
                                Privileges.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("revoke_privileges_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Privileges != null && __isset.privileges)
                {
                    field.Name = "privileges";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Privileges.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("revoke_privileges_args(");
                sb.Append("Privileges: ");
                sb.Append(Privileges == null ? "<null>" : Privileges.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class revoke_privileges_result : TBase
        {
            private bool _success;
            private MetaException _o1;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public revoke_privileges_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("revoke_privileges_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("revoke_privileges_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_revoke_privileges_args : TBase
        {
            private GrantRevokePrivilegeRequest _request;

            public GrantRevokePrivilegeRequest Request
            {
                get
                {
                    return _request;
                }
                set
                {
                    __isset.request = true;
                    this._request = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool request;
            }

            public grant_revoke_privileges_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Request = new GrantRevokePrivilegeRequest();
                                Request.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_revoke_privileges_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Request != null && __isset.request)
                {
                    field.Name = "request";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Request.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_revoke_privileges_args(");
                sb.Append("Request: ");
                sb.Append(Request == null ? "<null>" : Request.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class grant_revoke_privileges_result : TBase
        {
            private GrantRevokePrivilegeResponse _success;
            private MetaException _o1;

            public GrantRevokePrivilegeResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public grant_revoke_privileges_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new GrantRevokePrivilegeResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("grant_revoke_privileges_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("grant_revoke_privileges_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class set_ugi_args : TBase
        {
            private string _user_name;
            private List<string> _group_names;

            public string User_name
            {
                get
                {
                    return _user_name;
                }
                set
                {
                    __isset.user_name = true;
                    this._user_name = value;
                }
            }

            public List<string> Group_names
            {
                get
                {
                    return _group_names;
                }
                set
                {
                    __isset.group_names = true;
                    this._group_names = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool user_name;
                public bool group_names;
            }

            public set_ugi_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                User_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    Group_names = new List<string>();
                                    TList _list422 = iprot.ReadListBegin();
                                    for (int _i423 = 0; _i423 < _list422.Count; ++_i423)
                                    {
                                        string _elem424 = null;
                                        _elem424 = iprot.ReadString();
                                        Group_names.Add(_elem424);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("set_ugi_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (User_name != null && __isset.user_name)
                {
                    field.Name = "user_name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(User_name);
                    oprot.WriteFieldEnd();
                }
                if (Group_names != null && __isset.group_names)
                {
                    field.Name = "group_names";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
                        foreach (string _iter425 in Group_names)
                        {
                            oprot.WriteString(_iter425);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("set_ugi_args(");
                sb.Append("User_name: ");
                sb.Append(User_name);
                sb.Append(",Group_names: ");
                sb.Append(Group_names);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class set_ugi_result : TBase
        {
            private List<string> _success;
            private MetaException _o1;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public set_ugi_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list426 = iprot.ReadListBegin();
                                    for (int _i427 = 0; _i427 < _list426.Count; ++_i427)
                                    {
                                        string _elem428 = null;
                                        _elem428 = iprot.ReadString();
                                        Success.Add(_elem428);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("set_ugi_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter429 in Success)
                            {
                                oprot.WriteString(_iter429);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("set_ugi_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_delegation_token_args : TBase
        {
            private string _token_owner;
            private string _renewer_kerberos_principal_name;

            public string Token_owner
            {
                get
                {
                    return _token_owner;
                }
                set
                {
                    __isset.token_owner = true;
                    this._token_owner = value;
                }
            }

            public string Renewer_kerberos_principal_name
            {
                get
                {
                    return _renewer_kerberos_principal_name;
                }
                set
                {
                    __isset.renewer_kerberos_principal_name = true;
                    this._renewer_kerberos_principal_name = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool token_owner;
                public bool renewer_kerberos_principal_name;
            }

            public get_delegation_token_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Token_owner = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                Renewer_kerberos_principal_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_delegation_token_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Token_owner != null && __isset.token_owner)
                {
                    field.Name = "token_owner";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Token_owner);
                    oprot.WriteFieldEnd();
                }
                if (Renewer_kerberos_principal_name != null && __isset.renewer_kerberos_principal_name)
                {
                    field.Name = "renewer_kerberos_principal_name";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Renewer_kerberos_principal_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_delegation_token_args(");
                sb.Append("Token_owner: ");
                sb.Append(Token_owner);
                sb.Append(",Renewer_kerberos_principal_name: ");
                sb.Append(Renewer_kerberos_principal_name);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_delegation_token_result : TBase
        {
            private string _success;
            private MetaException _o1;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public get_delegation_token_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_delegation_token_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_delegation_token_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class renew_delegation_token_args : TBase
        {
            private string _token_str_form;

            public string Token_str_form
            {
                get
                {
                    return _token_str_form;
                }
                set
                {
                    __isset.token_str_form = true;
                    this._token_str_form = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool token_str_form;
            }

            public renew_delegation_token_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Token_str_form = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("renew_delegation_token_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Token_str_form != null && __isset.token_str_form)
                {
                    field.Name = "token_str_form";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Token_str_form);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("renew_delegation_token_args(");
                sb.Append("Token_str_form: ");
                sb.Append(Token_str_form);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class renew_delegation_token_result : TBase
        {
            private long _success;
            private MetaException _o1;

            public long Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
            }

            public renew_delegation_token_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I64)
                            {
                                Success = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("renew_delegation_token_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I64;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("renew_delegation_token_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class cancel_delegation_token_args : TBase
        {
            private string _token_str_form;

            public string Token_str_form
            {
                get
                {
                    return _token_str_form;
                }
                set
                {
                    __isset.token_str_form = true;
                    this._token_str_form = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool token_str_form;
            }

            public cancel_delegation_token_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Token_str_form = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("cancel_delegation_token_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Token_str_form != null && __isset.token_str_form)
                {
                    field.Name = "token_str_form";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Token_str_form);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("cancel_delegation_token_args(");
                sb.Append("Token_str_form: ");
                sb.Append(Token_str_form);
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class cancel_delegation_token_result : TBase
        {
            private MetaException _o1;

            public MetaException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
            }

            public cancel_delegation_token_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new MetaException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("cancel_delegation_token_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("cancel_delegation_token_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_open_txns_args : TBase
        {
            public get_open_txns_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_open_txns_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_open_txns_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_open_txns_result : TBase
        {
            private GetOpenTxnsResponse _success;

            public GetOpenTxnsResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
            }

            public get_open_txns_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new GetOpenTxnsResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_open_txns_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_open_txns_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_open_txns_info_args : TBase
        {
            public get_open_txns_info_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_open_txns_info_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_open_txns_info_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class get_open_txns_info_result : TBase
        {
            private GetOpenTxnsInfoResponse _success;

            public GetOpenTxnsInfoResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
            }

            public get_open_txns_info_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new GetOpenTxnsInfoResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("get_open_txns_info_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("get_open_txns_info_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class open_txns_args : TBase
        {
            private OpenTxnRequest _rqst;

            public OpenTxnRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public open_txns_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new OpenTxnRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("open_txns_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("open_txns_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class open_txns_result : TBase
        {
            private OpenTxnsResponse _success;

            public OpenTxnsResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
            }

            public open_txns_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new OpenTxnsResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("open_txns_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("open_txns_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class abort_txn_args : TBase
        {
            private AbortTxnRequest _rqst;

            public AbortTxnRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public abort_txn_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new AbortTxnRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("abort_txn_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("abort_txn_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class abort_txn_result : TBase
        {
            private NoSuchTxnException _o1;

            public NoSuchTxnException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
            }

            public abort_txn_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchTxnException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("abort_txn_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("abort_txn_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class commit_txn_args : TBase
        {
            private CommitTxnRequest _rqst;

            public CommitTxnRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public commit_txn_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new CommitTxnRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("commit_txn_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("commit_txn_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class commit_txn_result : TBase
        {
            private NoSuchTxnException _o1;
            private TxnAbortedException _o2;

            public NoSuchTxnException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public TxnAbortedException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public commit_txn_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchTxnException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new TxnAbortedException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("commit_txn_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("commit_txn_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class lock_args : TBase
        {
            private LockRequest _rqst;

            public LockRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public lock_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new LockRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("lock_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("lock_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class lock_result : TBase
        {
            private LockResponse _success;
            private NoSuchTxnException _o1;
            private TxnAbortedException _o2;

            public LockResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchTxnException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public TxnAbortedException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
            }

            public lock_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new LockResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchTxnException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new TxnAbortedException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("lock_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("lock_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class check_lock_args : TBase
        {
            private CheckLockRequest _rqst;

            public CheckLockRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public check_lock_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new CheckLockRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("check_lock_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("check_lock_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class check_lock_result : TBase
        {
            private LockResponse _success;
            private NoSuchTxnException _o1;
            private TxnAbortedException _o2;
            private NoSuchLockException _o3;

            public LockResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public NoSuchTxnException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public TxnAbortedException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public NoSuchLockException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public check_lock_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new LockResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchTxnException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new TxnAbortedException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new NoSuchLockException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("check_lock_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("check_lock_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(",O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class unlock_args : TBase
        {
            private UnlockRequest _rqst;

            public UnlockRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public unlock_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new UnlockRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("unlock_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("unlock_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class unlock_result : TBase
        {
            private NoSuchLockException _o1;
            private TxnOpenException _o2;

            public NoSuchLockException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public TxnOpenException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
            }

            public unlock_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchLockException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new TxnOpenException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("unlock_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("unlock_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class show_locks_args : TBase
        {
            private ShowLocksRequest _rqst;

            public ShowLocksRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public show_locks_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new ShowLocksRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("show_locks_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("show_locks_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class show_locks_result : TBase
        {
            private ShowLocksResponse _success;

            public ShowLocksResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
            }

            public show_locks_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new ShowLocksResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("show_locks_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("show_locks_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class heartbeat_args : TBase
        {
            private HeartbeatRequest _ids;

            public HeartbeatRequest Ids
            {
                get
                {
                    return _ids;
                }
                set
                {
                    __isset.ids = true;
                    this._ids = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool ids;
            }

            public heartbeat_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Ids = new HeartbeatRequest();
                                Ids.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("heartbeat_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Ids != null && __isset.ids)
                {
                    field.Name = "ids";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Ids.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("heartbeat_args(");
                sb.Append("Ids: ");
                sb.Append(Ids == null ? "<null>" : Ids.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class heartbeat_result : TBase
        {
            private NoSuchLockException _o1;
            private NoSuchTxnException _o2;
            private TxnAbortedException _o3;

            public NoSuchLockException O1
            {
                get
                {
                    return _o1;
                }
                set
                {
                    __isset.o1 = true;
                    this._o1 = value;
                }
            }

            public NoSuchTxnException O2
            {
                get
                {
                    return _o2;
                }
                set
                {
                    __isset.o2 = true;
                    this._o2 = value;
                }
            }

            public TxnAbortedException O3
            {
                get
                {
                    return _o3;
                }
                set
                {
                    __isset.o3 = true;
                    this._o3 = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool o1;
                public bool o2;
                public bool o3;
            }

            public heartbeat_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                O1 = new NoSuchLockException();
                                O1.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                O2 = new NoSuchTxnException();
                                O2.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                O3 = new TxnAbortedException();
                                O3.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("heartbeat_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.o1)
                {
                    if (O1 != null)
                    {
                        field.Name = "O1";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        O1.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o2)
                {
                    if (O2 != null)
                    {
                        field.Name = "O2";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        O2.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.o3)
                {
                    if (O3 != null)
                    {
                        field.Name = "O3";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        O3.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("heartbeat_result(");
                sb.Append("O1: ");
                sb.Append(O1 == null ? "<null>" : O1.ToString());
                sb.Append(",O2: ");
                sb.Append(O2 == null ? "<null>" : O2.ToString());
                sb.Append(",O3: ");
                sb.Append(O3 == null ? "<null>" : O3.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class heartbeat_txn_range_args : TBase
        {
            private HeartbeatTxnRangeRequest _txns;

            public HeartbeatTxnRangeRequest Txns
            {
                get
                {
                    return _txns;
                }
                set
                {
                    __isset.txns = true;
                    this._txns = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool txns;
            }

            public heartbeat_txn_range_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Txns = new HeartbeatTxnRangeRequest();
                                Txns.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("heartbeat_txn_range_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Txns != null && __isset.txns)
                {
                    field.Name = "txns";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Txns.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("heartbeat_txn_range_args(");
                sb.Append("Txns: ");
                sb.Append(Txns == null ? "<null>" : Txns.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class heartbeat_txn_range_result : TBase
        {
            private HeartbeatTxnRangeResponse _success;

            public HeartbeatTxnRangeResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
            }

            public heartbeat_txn_range_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new HeartbeatTxnRangeResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("heartbeat_txn_range_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("heartbeat_txn_range_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class compact_args : TBase
        {
            private CompactionRequest _rqst;

            public CompactionRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public compact_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new CompactionRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("compact_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("compact_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class compact_result : TBase
        {
            public compact_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("compact_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("compact_result(");
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class show_compact_args : TBase
        {
            private ShowCompactRequest _rqst;

            public ShowCompactRequest Rqst
            {
                get
                {
                    return _rqst;
                }
                set
                {
                    __isset.rqst = true;
                    this._rqst = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool rqst;
            }

            public show_compact_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Rqst = new ShowCompactRequest();
                                Rqst.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("show_compact_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Rqst != null && __isset.rqst)
                {
                    field.Name = "rqst";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    Rqst.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("show_compact_args(");
                sb.Append("Rqst: ");
                sb.Append(Rqst == null ? "<null>" : Rqst.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }

#if !SILVERLIGHT

#endif

        public partial class show_compact_result : TBase
        {
            private ShowCompactResponse _success;

            public ShowCompactResponse Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

#endif

            public struct Isset
            {
                public bool success;
            }

            public show_compact_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new ShowCompactResponse();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("show_compact_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("show_compact_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }
    }
}