/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class Function : TBase
    {
        private string _functionName;
        private string _dbName;
        private string _className;
        private string _ownerName;
        private PrincipalType _ownerType;
        private int _createTime;
        private FunctionType _functionType;
        private List<ResourceUri> _resourceUris;

        public string FunctionName
        {
            get
            {
                return _functionName;
            }
            set
            {
                __isset.functionName = true;
                this._functionName = value;
            }
        }

        public string DbName
        {
            get
            {
                return _dbName;
            }
            set
            {
                __isset.dbName = true;
                this._dbName = value;
            }
        }

        public string ClassName
        {
            get
            {
                return _className;
            }
            set
            {
                __isset.className = true;
                this._className = value;
            }
        }

        public string OwnerName
        {
            get
            {
                return _ownerName;
            }
            set
            {
                __isset.ownerName = true;
                this._ownerName = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="PrincipalType"/>
        /// </summary>
        public PrincipalType OwnerType
        {
            get
            {
                return _ownerType;
            }
            set
            {
                __isset.ownerType = true;
                this._ownerType = value;
            }
        }

        public int CreateTime
        {
            get
            {
                return _createTime;
            }
            set
            {
                __isset.createTime = true;
                this._createTime = value;
            }
        }

        /// <summary>
        ///
        /// <seealso cref="FunctionType"/>
        /// </summary>
        public FunctionType FunctionType
        {
            get
            {
                return _functionType;
            }
            set
            {
                __isset.functionType = true;
                this._functionType = value;
            }
        }

        public List<ResourceUri> ResourceUris
        {
            get
            {
                return _resourceUris;
            }
            set
            {
                __isset.resourceUris = true;
                this._resourceUris = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool functionName;
            public bool dbName;
            public bool className;
            public bool ownerName;
            public bool ownerType;
            public bool createTime;
            public bool functionType;
            public bool resourceUris;
        }

        public Function()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            FunctionName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.String)
                        {
                            DbName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            ClassName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            OwnerName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.I32)
                        {
                            OwnerType = (PrincipalType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.I32)
                        {
                            CreateTime = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 7:
                        if (field.Type == TType.I32)
                        {
                            FunctionType = (FunctionType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 8:
                        if (field.Type == TType.List)
                        {
                            {
                                ResourceUris = new List<ResourceUri>();
                                TList _list193 = iprot.ReadListBegin();
                                for (int _i194 = 0; _i194 < _list193.Count; ++_i194)
                                {
                                    ResourceUri _elem195 = new ResourceUri();
                                    _elem195 = new ResourceUri();
                                    _elem195.Read(iprot);
                                    ResourceUris.Add(_elem195);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Function");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (FunctionName != null && __isset.functionName)
            {
                field.Name = "functionName";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(FunctionName);
                oprot.WriteFieldEnd();
            }
            if (DbName != null && __isset.dbName)
            {
                field.Name = "dbName";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(DbName);
                oprot.WriteFieldEnd();
            }
            if (ClassName != null && __isset.className)
            {
                field.Name = "className";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ClassName);
                oprot.WriteFieldEnd();
            }
            if (OwnerName != null && __isset.ownerName)
            {
                field.Name = "ownerName";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(OwnerName);
                oprot.WriteFieldEnd();
            }
            if (__isset.ownerType)
            {
                field.Name = "ownerType";
                field.Type = TType.I32;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)OwnerType);
                oprot.WriteFieldEnd();
            }
            if (__isset.createTime)
            {
                field.Name = "createTime";
                field.Type = TType.I32;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(CreateTime);
                oprot.WriteFieldEnd();
            }
            if (__isset.functionType)
            {
                field.Name = "functionType";
                field.Type = TType.I32;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)FunctionType);
                oprot.WriteFieldEnd();
            }
            if (ResourceUris != null && __isset.resourceUris)
            {
                field.Name = "resourceUris";
                field.Type = TType.List;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, ResourceUris.Count));
                    foreach (ResourceUri _iter196 in ResourceUris)
                    {
                        _iter196.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("Function(");
            sb.Append("FunctionName: ");
            sb.Append(FunctionName);
            sb.Append(",DbName: ");
            sb.Append(DbName);
            sb.Append(",ClassName: ");
            sb.Append(ClassName);
            sb.Append(",OwnerName: ");
            sb.Append(OwnerName);
            sb.Append(",OwnerType: ");
            sb.Append(OwnerType);
            sb.Append(",CreateTime: ");
            sb.Append(CreateTime);
            sb.Append(",FunctionType: ");
            sb.Append(FunctionType);
            sb.Append(",ResourceUris: ");
            sb.Append(ResourceUris);
            sb.Append(")");
            return sb.ToString();
        }
    }
}