/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class ColumnStatisticsData : TBase
    {
        private BooleanColumnStatsData _booleanStats;
        private LongColumnStatsData _longStats;
        private DoubleColumnStatsData _doubleStats;
        private StringColumnStatsData _stringStats;
        private BinaryColumnStatsData _binaryStats;
        private DecimalColumnStatsData _decimalStats;

        public BooleanColumnStatsData BooleanStats
        {
            get
            {
                return _booleanStats;
            }
            set
            {
                __isset.booleanStats = true;
                this._booleanStats = value;
            }
        }

        public LongColumnStatsData LongStats
        {
            get
            {
                return _longStats;
            }
            set
            {
                __isset.longStats = true;
                this._longStats = value;
            }
        }

        public DoubleColumnStatsData DoubleStats
        {
            get
            {
                return _doubleStats;
            }
            set
            {
                __isset.doubleStats = true;
                this._doubleStats = value;
            }
        }

        public StringColumnStatsData StringStats
        {
            get
            {
                return _stringStats;
            }
            set
            {
                __isset.stringStats = true;
                this._stringStats = value;
            }
        }

        public BinaryColumnStatsData BinaryStats
        {
            get
            {
                return _binaryStats;
            }
            set
            {
                __isset.binaryStats = true;
                this._binaryStats = value;
            }
        }

        public DecimalColumnStatsData DecimalStats
        {
            get
            {
                return _decimalStats;
            }
            set
            {
                __isset.decimalStats = true;
                this._decimalStats = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool booleanStats;
            public bool longStats;
            public bool doubleStats;
            public bool stringStats;
            public bool binaryStats;
            public bool decimalStats;
        }

        public ColumnStatisticsData()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Struct)
                        {
                            BooleanStats = new BooleanColumnStatsData();
                            BooleanStats.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.Struct)
                        {
                            LongStats = new LongColumnStatsData();
                            LongStats.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.Struct)
                        {
                            DoubleStats = new DoubleColumnStatsData();
                            DoubleStats.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.Struct)
                        {
                            StringStats = new StringColumnStatsData();
                            StringStats.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 5:
                        if (field.Type == TType.Struct)
                        {
                            BinaryStats = new BinaryColumnStatsData();
                            BinaryStats.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 6:
                        if (field.Type == TType.Struct)
                        {
                            DecimalStats = new DecimalColumnStatsData();
                            DecimalStats.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("ColumnStatisticsData");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (BooleanStats != null && __isset.booleanStats)
            {
                field.Name = "booleanStats";
                field.Type = TType.Struct;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                BooleanStats.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (LongStats != null && __isset.longStats)
            {
                field.Name = "longStats";
                field.Type = TType.Struct;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                LongStats.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (DoubleStats != null && __isset.doubleStats)
            {
                field.Name = "doubleStats";
                field.Type = TType.Struct;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                DoubleStats.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (StringStats != null && __isset.stringStats)
            {
                field.Name = "stringStats";
                field.Type = TType.Struct;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                StringStats.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (BinaryStats != null && __isset.binaryStats)
            {
                field.Name = "binaryStats";
                field.Type = TType.Struct;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                BinaryStats.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (DecimalStats != null && __isset.decimalStats)
            {
                field.Name = "decimalStats";
                field.Type = TType.Struct;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                DecimalStats.Write(oprot);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("ColumnStatisticsData(");
            sb.Append("BooleanStats: ");
            sb.Append(BooleanStats == null ? "<null>" : BooleanStats.ToString());
            sb.Append(",LongStats: ");
            sb.Append(LongStats == null ? "<null>" : LongStats.ToString());
            sb.Append(",DoubleStats: ");
            sb.Append(DoubleStats == null ? "<null>" : DoubleStats.ToString());
            sb.Append(",StringStats: ");
            sb.Append(StringStats == null ? "<null>" : StringStats.ToString());
            sb.Append(",BinaryStats: ");
            sb.Append(BinaryStats == null ? "<null>" : BinaryStats.ToString());
            sb.Append(",DecimalStats: ");
            sb.Append(DecimalStats == null ? "<null>" : DecimalStats.ToString());
            sb.Append(")");
            return sb.ToString();
        }
    }
}