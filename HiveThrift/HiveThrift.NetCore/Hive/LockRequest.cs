/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
#if !SILVERLIGHT

    
#endif
    public partial class LockRequest : TBase
    {
        private long _txnid;

        public List<LockComponent> Component { get; set; }

        public long Txnid
        {
            get
            {
                return _txnid;
            }
            set
            {
                __isset.txnid = true;
                this._txnid = value;
            }
        }

        public string User { get; set; }

        public string Hostname { get; set; }

        public Isset __isset;
#if !SILVERLIGHT

        
#endif
        public struct Isset
        {
            public bool txnid;
        }

        public LockRequest()
        {
        }

        public LockRequest(List<LockComponent> component, string user, string hostname)
            : this()
        {
            this.Component = component;
            this.User = user;
            this.Hostname = hostname;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_component = false;
            bool isset_user = false;
            bool isset_hostname = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                Component = new List<LockComponent>();
                                TList _list209 = iprot.ReadListBegin();
                                for (int _i210 = 0; _i210 < _list209.Count; ++_i210)
                                {
                                    LockComponent _elem211 = new LockComponent();
                                    _elem211 = new LockComponent();
                                    _elem211.Read(iprot);
                                    Component.Add(_elem211);
                                }
                                iprot.ReadListEnd();
                            }
                            isset_component = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I64)
                        {
                            Txnid = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.String)
                        {
                            User = iprot.ReadString();
                            isset_user = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 4:
                        if (field.Type == TType.String)
                        {
                            Hostname = iprot.ReadString();
                            isset_hostname = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_component)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_user)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_hostname)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("LockRequest");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "component";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
                oprot.WriteListBegin(new TList(TType.Struct, Component.Count));
                foreach (LockComponent _iter212 in Component)
                {
                    _iter212.Write(oprot);
                }
                oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
            if (__isset.txnid)
            {
                field.Name = "txnid";
                field.Type = TType.I64;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(Txnid);
                oprot.WriteFieldEnd();
            }
            field.Name = "user";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(User);
            oprot.WriteFieldEnd();
            field.Name = "hostname";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hostname);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("LockRequest(");
            sb.Append("Component: ");
            sb.Append(Component);
            sb.Append(",Txnid: ");
            sb.Append(Txnid);
            sb.Append(",User: ");
            sb.Append(User);
            sb.Append(",Hostname: ");
            sb.Append(Hostname);
            sb.Append(")");
            return sb.ToString();
        }
    }
}