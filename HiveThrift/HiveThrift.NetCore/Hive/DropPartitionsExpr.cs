/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Hive
{
    public partial class DropPartitionsExpr : TBase
    {
        private int _partArchiveLevel;

        public byte[] Expr { get; set; }

        public int PartArchiveLevel
        {
            get
            {
                return _partArchiveLevel;
            }
            set
            {
                __isset.partArchiveLevel = true;
                this._partArchiveLevel = value;
            }
        }

        public Isset __isset;

        public struct Isset
        {
            public bool partArchiveLevel;
        }

        public DropPartitionsExpr()
        {
        }

        public DropPartitionsExpr(byte[] expr)
            : this()
        {
            this.Expr = expr;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_expr = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Expr = iprot.ReadBinary();
                            isset_expr = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            PartArchiveLevel = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_expr)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("DropPartitionsExpr");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "expr";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Expr);
            oprot.WriteFieldEnd();
            if (__isset.partArchiveLevel)
            {
                field.Name = "partArchiveLevel";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(PartArchiveLevel);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("DropPartitionsExpr(");
            sb.Append("Expr: ");
            sb.Append(Expr);
            sb.Append(",PartArchiveLevel: ");
            sb.Append(PartArchiveLevel);
            sb.Append(")");
            return sb.ToString();
        }
    }
}