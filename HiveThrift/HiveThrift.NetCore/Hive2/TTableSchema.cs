/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Hive2
{
#if !SILVERLIGHT

#endif

    public partial class TTableSchema : TBase
    {
        public List<TColumnDesc> Columns { get; set; }

        public TTableSchema()
        {
        }

        public TTableSchema(List<TColumnDesc> columns) : this()
        {
            this.Columns = columns;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_columns = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                Columns = new List<TColumnDesc>();
                                TList _list19 = iprot.ReadListBegin();
                                for (int _i20 = 0; _i20 < _list19.Count; ++_i20)
                                {
                                    TColumnDesc _elem21 = new TColumnDesc();
                                    _elem21 = new TColumnDesc();
                                    _elem21.Read(iprot);
                                    Columns.Add(_elem21);
                                }
                                iprot.ReadListEnd();
                            }
                            isset_columns = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_columns)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TTableSchema");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "columns";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
                oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
                foreach (TColumnDesc _iter22 in Columns)
                {
                    _iter22.Write(oprot);
                }
                oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TTableSchema(");
            sb.Append("Columns: ");
            sb.Append(Columns);
            sb.Append(")");
            return sb.ToString();
        }
    }
}