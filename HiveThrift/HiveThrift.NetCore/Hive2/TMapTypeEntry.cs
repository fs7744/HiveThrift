/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Hive2
{
#if !SILVERLIGHT

#endif

    public partial class TMapTypeEntry : TBase
    {
        public int KeyTypePtr { get; set; }

        public int ValueTypePtr { get; set; }

        public TMapTypeEntry()
        {
        }

        public TMapTypeEntry(int keyTypePtr, int valueTypePtr) : this()
        {
            this.KeyTypePtr = keyTypePtr;
            this.ValueTypePtr = valueTypePtr;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_keyTypePtr = false;
            bool isset_valueTypePtr = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            KeyTypePtr = iprot.ReadI32();
                            isset_keyTypePtr = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            ValueTypePtr = iprot.ReadI32();
                            isset_valueTypePtr = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_keyTypePtr)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_valueTypePtr)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TMapTypeEntry");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "keyTypePtr";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(KeyTypePtr);
            oprot.WriteFieldEnd();
            field.Name = "valueTypePtr";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ValueTypePtr);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TMapTypeEntry(");
            sb.Append("KeyTypePtr: ");
            sb.Append(KeyTypePtr);
            sb.Append(",ValueTypePtr: ");
            sb.Append(ValueTypePtr);
            sb.Append(")");
            return sb.ToString();
        }
    }
}