/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Hive2
{
#if !SILVERLIGHT

#endif

    public partial class TFetchResultsReq : TBase
    {
        public TOperationHandle OperationHandle { get; set; }

        /// <summary>
        ///
        /// <seealso cref="TFetchOrientation"/>
        /// </summary>
        public TFetchOrientation Orientation { get; set; }

        public long MaxRows { get; set; }

        public TFetchResultsReq()
        {
            this.Orientation = TFetchOrientation.FETCH_NEXT;
        }

        public TFetchResultsReq(TOperationHandle operationHandle, TFetchOrientation orientation, long maxRows) : this()
        {
            this.OperationHandle = operationHandle;
            this.Orientation = orientation;
            this.MaxRows = maxRows;
        }

        public void Read(TProtocol iprot)
        {
            bool isset_operationHandle = false;
            bool isset_orientation = false;
            bool isset_maxRows = false;
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Struct)
                        {
                            OperationHandle = new TOperationHandle();
                            OperationHandle.Read(iprot);
                            isset_operationHandle = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 2:
                        if (field.Type == TType.I32)
                        {
                            Orientation = (TFetchOrientation)iprot.ReadI32();
                            isset_orientation = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    case 3:
                        if (field.Type == TType.I64)
                        {
                            MaxRows = iprot.ReadI64();
                            isset_maxRows = true;
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
            if (!isset_operationHandle)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_orientation)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
            if (!isset_maxRows)
                throw new TProtocolException(TProtocolException.INVALID_DATA);
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TFetchResultsReq");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            field.Name = "operationHandle";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            OperationHandle.Write(oprot);
            oprot.WriteFieldEnd();
            field.Name = "orientation";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Orientation);
            oprot.WriteFieldEnd();
            field.Name = "maxRows";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(MaxRows);
            oprot.WriteFieldEnd();
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TFetchResultsReq(");
            sb.Append("OperationHandle: ");
            sb.Append(OperationHandle == null ? "<null>" : OperationHandle.ToString());
            sb.Append(",Orientation: ");
            sb.Append(Orientation);
            sb.Append(",MaxRows: ");
            sb.Append(MaxRows);
            sb.Append(")");
            return sb.ToString();
        }
    }
}